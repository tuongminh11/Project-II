
G474_Master_20_11_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800d990  0800d990  0000e990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1e0  0800e1e0  000100a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1e0  0800e1e0  0000f1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1e8  0800e1e8  000100a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1e8  0800e1e8  0000f1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1ec  0800e1ec  0000f1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800e1f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023a8  200000a8  0800e298  000100a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002450  0800e298  00010450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202a6  00000000  00000000  000100d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004284  00000000  00000000  0003037e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00034608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001895  00000000  00000000  000365b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005c77  00000000  00000000  00037e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b0b  00000000  00000000  0003dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f54f  00000000  00000000  000635cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009130  00000000  00000000  00182b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018bc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a8 	.word	0x200000a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d978 	.word	0x0800d978

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000ac 	.word	0x200000ac
 800021c:	0800d978 	.word	0x0800d978

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <writeFlash>:
//   - data: An array of uint64_t containing the data to be written.
//   - size: The number of uint64_t values to write from the data array.
//   - page: The page number in Flash memory where data will be written.
//   - bank: The Flash bank (FLASH_BANK_1 or FLASH_BANK_2) where data will be written.
void writeFlash(uint64_t* data, uint32_t size, uint32_t page, uint32_t bank)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t PageError;

  HAL_FLASH_Unlock();
 80005ce:	f005 fb85 	bl	8005cdc <HAL_FLASH_Unlock>

  // Xóa trang trước khi ghi
  FLASH_EraseInitTypeDef erase_init;
  erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  //erase_init.TypeErase = FLASH_TYPEERASE_MASSERASE;
  erase_init.Page = 127; // Điều chỉnh trang dựa trên nhu cầu của bạn
 80005d6:	237f      	movs	r3, #127	@ 0x7f
 80005d8:	61bb      	str	r3, [r7, #24]
  erase_init.NbPages = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	61fb      	str	r3, [r7, #28]
  erase_init.Banks=bank;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	617b      	str	r3, [r7, #20]

  status = HAL_FLASHEx_Erase(&erase_init, &PageError);
 80005e2:	f107 0220 	add.w	r2, r7, #32
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f005 fc5f 	bl	8005eb0 <HAL_FLASHEx_Erase>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (status != HAL_OK)
 80005f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <writeFlash+0x46>
  {
    // Xử lý lỗi khi xóa
    HAL_FLASH_Lock();
 8000600:	f005 fb8e 	bl	8005d20 <HAL_FLASH_Lock>
 8000604:	e02f      	b.n	8000666 <writeFlash+0xa6>
    return;
  }

  // Ghi dữ liệu v??��?��?o flash
  uint32_t start_add;
  if(bank==FLASH_BANK_1) start_add=FLASH_BANK1_START_ADDR;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d102      	bne.n	8000612 <writeFlash+0x52>
 800060c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(bank==FLASH_BANK_2) start_add=FLASH_BANK2_START_ADDR;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d101      	bne.n	800061c <writeFlash+0x5c>
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <writeFlash+0xac>)
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  for (uint32_t i = 0; i < size; i++)
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000620:	e01b      	b.n	800065a <writeFlash+0x9a>
  {
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, start_add+ page*2048 + (i * 8), data[i]);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	021a      	lsls	r2, r3, #8
 8000626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000628:	4413      	add	r3, r2
 800062a:	00da      	lsls	r2, r3, #3
 800062c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800062e:	18d1      	adds	r1, r2, r3
 8000630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800063c:	2000      	movs	r0, #0
 800063e:	f005 faf7 	bl	8005c30 <HAL_FLASH_Program>
 8000642:	4603      	mov	r3, r0
 8000644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK)
 8000648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <writeFlash+0x94>
    {
      // Xử lý lỗi khi ghi;
    	HAL_FLASH_Lock();
 8000650:	f005 fb66 	bl	8005d20 <HAL_FLASH_Lock>
  for (uint32_t i = 0; i < size; i++)
 8000654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000656:	3301      	adds	r3, #1
 8000658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800065a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3df      	bcc.n	8000622 <writeFlash+0x62>
    }
  }

  HAL_FLASH_Lock();
 8000662:	f005 fb5d 	bl	8005d20 <HAL_FLASH_Lock>
}
 8000666:	3730      	adds	r7, #48	@ 0x30
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	08040000 	.word	0x08040000

08000670 <readFlash>:
//   - data: An array of uint64_t to store the read data.
//   - size: The number of uint64_t values to read and store in the data array.
//   - page: The page number in Flash memory from which to read data.
//   - bank: The Flash bank (FLASH_BANK_1 or FLASH_BANK_2) that contains the data.
void readFlash(uint64_t* data, uint32_t size, uint32_t page, uint32_t bank)
{
 8000670:	b480      	push	{r7}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
	  uint32_t start_add;
	  if(bank==FLASH_BANK_1) start_add=FLASH_BANK1_START_ADDR;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d102      	bne.n	800068a <readFlash+0x1a>
 8000684:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000688:	617b      	str	r3, [r7, #20]
	  if(bank==FLASH_BANK_2) start_add=FLASH_BANK2_START_ADDR;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d101      	bne.n	8000694 <readFlash+0x24>
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <readFlash+0x68>)
 8000692:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < size; i++) {
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	e012      	b.n	80006c0 <readFlash+0x50>
    data[i] = *(__IO uint64_t*)(start_add + page*2048+ (i * 8));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	021a      	lsls	r2, r3, #8
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4413      	add	r3, r2
 80006a2:	00da      	lsls	r2, r3, #3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	4413      	add	r3, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	18d1      	adds	r1, r2, r3
 80006b2:	e9d0 2300 	ldrd	r2, r3, [r0]
 80006b6:	e9c1 2300 	strd	r2, r3, [r1]
  for (uint32_t i = 0; i < size; i++) {
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	3301      	adds	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3e8      	bcc.n	800069a <readFlash+0x2a>
  }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	371c      	adds	r7, #28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	08040000 	.word	0x08040000

080006dc <uint64_array_to_uint8_array_big_endian>:
// Parameters:
//   - input: An array of uint64_t containing the data to be converted.
//   - input_length: The number of uint64_t values in the input array.
//   - output: An array of uint8_t where the converted data will be stored.
void uint64_array_to_uint8_array_big_endian(const uint64_t* input, size_t input_length, uint8_t* output)
{
 80006dc:	b4f0      	push	{r4, r5, r6, r7}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < input_length; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	e02e      	b.n	800074c <uint64_array_to_uint8_array_big_endian+0x70>
        uint64_t value = input[i];
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	4413      	add	r3, r2
 80006f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (int j = 7; j >= 0; j--) {
 80006fe:	2307      	movs	r3, #7
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	e01d      	b.n	8000740 <uint64_array_to_uint8_array_big_endian+0x64>
            output[i * 8 + (7 - j)] = (uint8_t)((value >> (j * 8)) & 0xFF);
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	00d9      	lsls	r1, r3, #3
 8000708:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800070c:	f1c1 0620 	rsb	r6, r1, #32
 8000710:	f1a1 0020 	sub.w	r0, r1, #32
 8000714:	fa22 f401 	lsr.w	r4, r2, r1
 8000718:	fa03 f606 	lsl.w	r6, r3, r6
 800071c:	4334      	orrs	r4, r6
 800071e:	fa23 f000 	lsr.w	r0, r3, r0
 8000722:	4304      	orrs	r4, r0
 8000724:	fa23 f501 	lsr.w	r5, r3, r1
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	00da      	lsls	r2, r3, #3
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	3307      	adds	r3, #7
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	b2e2      	uxtb	r2, r4
 8000738:	701a      	strb	r2, [r3, #0]
        for (int j = 7; j >= 0; j--) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3b01      	subs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	dade      	bge.n	8000704 <uint64_array_to_uint8_array_big_endian+0x28>
    for (size_t i = 0; i < input_length; i++) {
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3301      	adds	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fa      	ldr	r2, [r7, #28]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	429a      	cmp	r2, r3
 8000752:	d3cc      	bcc.n	80006ee <uint64_array_to_uint8_array_big_endian+0x12>
        }
    }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bcf0      	pop	{r4, r5, r6, r7}
 800075e:	4770      	bx	lr

08000760 <uint8_array_to_uint64_array_big_endian>:
// Parameters:
//   - input: An array of uint8_t containing the data to be converted.
//   - input_length: The number of uint64_t values to be converted and stored in the output array.
//   - output: An array of uint64_t where the converted data will be stored.
void uint8_array_to_uint64_array_big_endian(const uint8_t* input, size_t input_length, uint64_t* output)
{
 8000760:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000764:	b08b      	sub	sp, #44	@ 0x2c
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < input_length; i++) {
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
 8000772:	e03e      	b.n	80007f2 <uint8_array_to_uint64_array_big_endian+0x92>
        uint64_t value = 0;
 8000774:	f04f 0200 	mov.w	r2, #0
 8000778:	f04f 0300 	mov.w	r3, #0
 800077c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        for (int j = 0; j < 8; j++) {
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e027      	b.n	80007d6 <uint8_array_to_uint64_array_big_endian+0x76>
            // Construct the uint64_t value by shifting and combining the bytes.
            value |= ((uint64_t)input[i * 8 + j] << ((7 - j) * 8));
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	00da      	lsls	r2, r3, #3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4413      	add	r3, r2
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2200      	movs	r2, #0
 8000798:	4698      	mov	r8, r3
 800079a:	4691      	mov	r9, r2
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	f1a3 0120 	sub.w	r1, r3, #32
 80007a8:	f1c3 0220 	rsb	r2, r3, #32
 80007ac:	fa09 f503 	lsl.w	r5, r9, r3
 80007b0:	fa08 f101 	lsl.w	r1, r8, r1
 80007b4:	430d      	orrs	r5, r1
 80007b6:	fa28 f202 	lsr.w	r2, r8, r2
 80007ba:	4315      	orrs	r5, r2
 80007bc:	fa08 f403 	lsl.w	r4, r8, r3
 80007c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80007c4:	ea42 0a04 	orr.w	sl, r2, r4
 80007c8:	ea43 0b05 	orr.w	fp, r3, r5
 80007cc:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        for (int j = 0; j < 8; j++) {
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b07      	cmp	r3, #7
 80007da:	ddd4      	ble.n	8000786 <uint8_array_to_uint64_array_big_endian+0x26>
        }
        output[i] = value;
 80007dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	18d1      	adds	r1, r2, r3
 80007e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80007e8:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < input_length; i++) {
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	3301      	adds	r3, #1
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80007f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3bc      	bcc.n	8000774 <uint8_array_to_uint64_array_big_endian+0x14>
    }
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	372c      	adds	r7, #44	@ 0x2c
 8000800:	46bd      	mov	sp, r7
 8000802:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000806:	4770      	bx	lr

08000808 <Packet_to_ESP>:
DATA_TO_ESP ESP_Data;

uint8_t ESP_Payload[8];

void Packet_to_ESP(uint8_t type, uint8_t state)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]
	ESP_Payload[0]=0xAB;
 8000818:	4b46      	ldr	r3, [pc, #280]	@ (8000934 <Packet_to_ESP+0x12c>)
 800081a:	22ab      	movs	r2, #171	@ 0xab
 800081c:	701a      	strb	r2, [r3, #0]
	ESP_Payload[1]=0xCD;
 800081e:	4b45      	ldr	r3, [pc, #276]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000820:	22cd      	movs	r2, #205	@ 0xcd
 8000822:	705a      	strb	r2, [r3, #1]
	ESP_Payload[2]=type;
 8000824:	4a43      	ldr	r2, [pc, #268]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	7093      	strb	r3, [r2, #2]
	ESP_Data.type_ESP_Data=type;
 800082a:	4a43      	ldr	r2, [pc, #268]	@ (8000938 <Packet_to_ESP+0x130>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	7013      	strb	r3, [r2, #0]
	if((ESP_Data.type_ESP_Data == TYPE_INTERNET_STATUS) ||
 8000830:	4b41      	ldr	r3, [pc, #260]	@ (8000938 <Packet_to_ESP+0x130>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b11      	cmp	r3, #17
 8000836:	d00f      	beq.n	8000858 <Packet_to_ESP+0x50>
	   (ESP_Data.type_ESP_Data == TYPE_CIMS_CHARGE_STATUS) ||
 8000838:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <Packet_to_ESP+0x130>)
 800083a:	781b      	ldrb	r3, [r3, #0]
	if((ESP_Data.type_ESP_Data == TYPE_INTERNET_STATUS) ||
 800083c:	2b12      	cmp	r3, #18
 800083e:	d00b      	beq.n	8000858 <Packet_to_ESP+0x50>
	   (ESP_Data.type_ESP_Data == TYPE_HMI_STATUS) ||
 8000840:	4b3d      	ldr	r3, [pc, #244]	@ (8000938 <Packet_to_ESP+0x130>)
 8000842:	781b      	ldrb	r3, [r3, #0]
	   (ESP_Data.type_ESP_Data == TYPE_CIMS_CHARGE_STATUS) ||
 8000844:	2b13      	cmp	r3, #19
 8000846:	d007      	beq.n	8000858 <Packet_to_ESP+0x50>
	   (ESP_Data.type_ESP_Data == TYPE_PLC_STATUS) ||
 8000848:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <Packet_to_ESP+0x130>)
 800084a:	781b      	ldrb	r3, [r3, #0]
	   (ESP_Data.type_ESP_Data == TYPE_HMI_STATUS) ||
 800084c:	2b14      	cmp	r3, #20
 800084e:	d003      	beq.n	8000858 <Packet_to_ESP+0x50>
	   (ESP_Data.type_ESP_Data == TYPE_ID_TAG))
 8000850:	4b39      	ldr	r3, [pc, #228]	@ (8000938 <Packet_to_ESP+0x130>)
 8000852:	781b      	ldrb	r3, [r3, #0]
	   (ESP_Data.type_ESP_Data == TYPE_PLC_STATUS) ||
 8000854:	2b15      	cmp	r3, #21
 8000856:	d10c      	bne.n	8000872 <Packet_to_ESP+0x6a>
	{
		ESP_Payload[3]=0x00;
 8000858:	4b36      	ldr	r3, [pc, #216]	@ (8000934 <Packet_to_ESP+0x12c>)
 800085a:	2200      	movs	r2, #0
 800085c:	70da      	strb	r2, [r3, #3]
		ESP_Payload[4]=0x00;
 800085e:	4b35      	ldr	r3, [pc, #212]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000860:	2200      	movs	r2, #0
 8000862:	711a      	strb	r2, [r3, #4]
		ESP_Payload[5]=0x00;
 8000864:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000866:	2200      	movs	r2, #0
 8000868:	715a      	strb	r2, [r3, #5]
		ESP_Payload[6]=state;
 800086a:	4a32      	ldr	r2, [pc, #200]	@ (8000934 <Packet_to_ESP+0x12c>)
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	7193      	strb	r3, [r2, #6]
 8000870:	e03d      	b.n	80008ee <Packet_to_ESP+0xe6>
	}
	else if(ESP_Data.type_ESP_Data==TYPE_HMI_CONTROL_TRANSACTION)
 8000872:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <Packet_to_ESP+0x130>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b18      	cmp	r3, #24
 8000878:	d10c      	bne.n	8000894 <Packet_to_ESP+0x8c>
	{
		ESP_Payload[3]=0x00;
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <Packet_to_ESP+0x12c>)
 800087c:	2200      	movs	r2, #0
 800087e:	70da      	strb	r2, [r3, #3]
		ESP_Payload[4]=0x00;
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000882:	2200      	movs	r2, #0
 8000884:	711a      	strb	r2, [r3, #4]
		ESP_Payload[5]=0x01;
 8000886:	4b2b      	ldr	r3, [pc, #172]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000888:	2201      	movs	r2, #1
 800088a:	715a      	strb	r2, [r3, #5]
		ESP_Payload[6]=state;
 800088c:	4a29      	ldr	r2, [pc, #164]	@ (8000934 <Packet_to_ESP+0x12c>)
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	7193      	strb	r3, [r2, #6]
 8000892:	e02c      	b.n	80008ee <Packet_to_ESP+0xe6>

	}
	else if(ESP_Data.type_ESP_Data==TYPE_VOLTAGE_VALUE)
 8000894:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <Packet_to_ESP+0x130>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b21      	cmp	r3, #33	@ 0x21
 800089a:	d112      	bne.n	80008c2 <Packet_to_ESP+0xba>
	{
		ESP_Payload[5]=0;
 800089c:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <Packet_to_ESP+0x12c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	715a      	strb	r2, [r3, #5]
		ESP_Payload[3]=(uint8_t)(ESP_Data.ESP_Data_voltage & 0xFF);
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <Packet_to_ESP+0x130>)
 80008a4:	885b      	ldrh	r3, [r3, #2]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008aa:	70da      	strb	r2, [r3, #3]
		ESP_Payload[4]=(uint8_t)((ESP_Data.ESP_Data_voltage>>8) & 0xFF);
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <Packet_to_ESP+0x130>)
 80008ae:	885b      	ldrh	r3, [r3, #2]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008b8:	711a      	strb	r2, [r3, #4]
		ESP_Payload[6]=1;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008bc:	2201      	movs	r2, #1
 80008be:	719a      	strb	r2, [r3, #6]
 80008c0:	e015      	b.n	80008ee <Packet_to_ESP+0xe6>
	}
	else if(ESP_Data.type_ESP_Data==TYPE_CURRENT_VALUE)
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <Packet_to_ESP+0x130>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b20      	cmp	r3, #32
 80008c8:	d111      	bne.n	80008ee <Packet_to_ESP+0xe6>
	{
		ESP_Payload[5]=0;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	715a      	strb	r2, [r3, #5]
		ESP_Payload[3]=(uint8_t)(ESP_Data.ESP_Data_current & 0xFF);
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <Packet_to_ESP+0x130>)
 80008d2:	889b      	ldrh	r3, [r3, #4]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008d8:	70da      	strb	r2, [r3, #3]
		ESP_Payload[4]=(uint8_t)((ESP_Data.ESP_Data_current>>8) & 0xFF);
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <Packet_to_ESP+0x130>)
 80008dc:	889b      	ldrh	r3, [r3, #4]
 80008de:	0a1b      	lsrs	r3, r3, #8
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008e6:	711a      	strb	r2, [r3, #4]
		ESP_Payload[6]=1;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	719a      	strb	r2, [r3, #6]
	}
	ESP_Payload[7]=ESP_Payload[0]+ESP_Payload[1]+ESP_Payload[2]+ESP_Payload[3]+ESP_Payload[4]+ESP_Payload[5]+ESP_Payload[6];
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	4413      	add	r3, r2
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <Packet_to_ESP+0x12c>)
 80008fc:	789b      	ldrb	r3, [r3, #2]
 80008fe:	4413      	add	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	4413      	add	r3, r2
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <Packet_to_ESP+0x12c>)
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	4413      	add	r3, r2
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	4413      	add	r3, r2
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <Packet_to_ESP+0x12c>)
 800091c:	799b      	ldrb	r3, [r3, #6]
 800091e:	4413      	add	r3, r2
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <Packet_to_ESP+0x12c>)
 8000924:	71da      	strb	r2, [r3, #7]
	ESP_Send();
 8000926:	f000 f829 	bl	800097c <ESP_Send>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000cc 	.word	0x200000cc
 8000938:	200000c4 	.word	0x200000c4

0800093c <random_number>:
uint16_t EVstate;
uint16_t Current=30;
uint16_t Voltage=0;
uint16_t Temperature=50;
uint16_t Energy=0;
uint16_t random_number() {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    return rand() % 2;
 8000940:	f00b fe66 	bl	800c610 <rand>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	bfb8      	it	lt
 800094e:	425b      	neglt	r3, r3
 8000950:	b29b      	uxth	r3, r3
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <Serial_Print>:
uint16_t random_voltage() {
    return rand() % 30;
}
void Serial_Print(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  #define TIMEOUT_100_MS 100
  HAL_UART_Transmit(&huart1, (uint8_t*)serial_output_buffer, strlen(serial_output_buffer), TIMEOUT_100_MS);
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <Serial_Print+0x1c>)
 800095e:	f7ff fc5f 	bl	8000220 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	2364      	movs	r3, #100	@ 0x64
 8000968:	4902      	ldr	r1, [pc, #8]	@ (8000974 <Serial_Print+0x1c>)
 800096a:	4803      	ldr	r0, [pc, #12]	@ (8000978 <Serial_Print+0x20>)
 800096c:	f008 fe06 	bl	800957c <HAL_UART_Transmit>
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000708 	.word	0x20000708
 8000978:	20000330 	.word	0x20000330

0800097c <ESP_Send>:
void ESP_Send(void)	{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(&huart3, ESP_Payload, 8, 100);
 8000980:	2364      	movs	r3, #100	@ 0x64
 8000982:	2208      	movs	r2, #8
 8000984:	4902      	ldr	r1, [pc, #8]	@ (8000990 <ESP_Send+0x14>)
 8000986:	4803      	ldr	r0, [pc, #12]	@ (8000994 <ESP_Send+0x18>)
 8000988:	f008 fdf8 	bl	800957c <HAL_UART_Transmit>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000cc 	.word	0x200000cc
 8000994:	20000450 	.word	0x20000450

08000998 <SPI_Transmit_Receive>:

void SPI_Transmit_Receive(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af02      	add	r7, sp, #8
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a4:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <SPI_Transmit_Receive+0x38>)
 80009a6:	f005 fd67 	bl	8006478 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, spi_tx_buffer, spi_rx_buffer, spi_data_size, 200);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <SPI_Transmit_Receive+0x3c>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	22c8      	movs	r2, #200	@ 0xc8
 80009b0:	9200      	str	r2, [sp, #0]
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <SPI_Transmit_Receive+0x40>)
 80009b4:	4909      	ldr	r1, [pc, #36]	@ (80009dc <SPI_Transmit_Receive+0x44>)
 80009b6:	480a      	ldr	r0, [pc, #40]	@ (80009e0 <SPI_Transmit_Receive+0x48>)
 80009b8:	f006 fe89 	bl	80076ce <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c2:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <SPI_Transmit_Receive+0x38>)
 80009c4:	f005 fd58 	bl	8006478 <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000400 	.word	0x48000400
 80009d4:	20001fa4 	.word	0x20001fa4
 80009d8:	20001770 	.word	0x20001770
 80009dc:	20000f3c 	.word	0x20000f3c
 80009e0:	200001a4 	.word	0x200001a4

080009e4 <HMI_Print>:

void HMI_Print(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(&huart4, (uint8_t*)hmi_buffer, strlen(hmi_buffer), TIMEOUT_100_MS);
 80009ea:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <HMI_Print+0x4c>)
 80009ec:	f7ff fc18 	bl	8000220 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	490e      	ldr	r1, [pc, #56]	@ (8000a30 <HMI_Print+0x4c>)
 80009f8:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <HMI_Print+0x50>)
 80009fa:	f008 fdbf 	bl	800957c <HAL_UART_Transmit>
  uint8_t END_BYTE = 0xFF;
 80009fe:	23ff      	movs	r3, #255	@ 0xff
 8000a00:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart4, &END_BYTE, 1, 10);
 8000a02:	1df9      	adds	r1, r7, #7
 8000a04:	230a      	movs	r3, #10
 8000a06:	2201      	movs	r2, #1
 8000a08:	480a      	ldr	r0, [pc, #40]	@ (8000a34 <HMI_Print+0x50>)
 8000a0a:	f008 fdb7 	bl	800957c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart4, &END_BYTE, 1, 10);
 8000a0e:	1df9      	adds	r1, r7, #7
 8000a10:	230a      	movs	r3, #10
 8000a12:	2201      	movs	r2, #1
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <HMI_Print+0x50>)
 8000a16:	f008 fdb1 	bl	800957c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart4, &END_BYTE, 1, 10);
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <HMI_Print+0x50>)
 8000a22:	f008 fdab 	bl	800957c <HAL_UART_Transmit>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000229c 	.word	0x2000229c
 8000a34:	200002a0 	.word	0x200002a0

08000a38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	;
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  if(huart->Instance==huart3.Instance)	//ESP data
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b9e      	ldr	r3, [pc, #632]	@ (8000cd4 <HAL_UART_RxCpltCallback+0x288>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d13c      	bne.n	8000ada <HAL_UART_RxCpltCallback+0x8e>
  {
	  HAL_UART_Receive_DMA(&huart3, uart3_rx_data, sizeof(uart3_rx_data));
 8000a60:	2208      	movs	r2, #8
 8000a62:	499d      	ldr	r1, [pc, #628]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x28c>)
 8000a64:	489b      	ldr	r0, [pc, #620]	@ (8000cd4 <HAL_UART_RxCpltCallback+0x288>)
 8000a66:	f008 fe1f 	bl	80096a8 <HAL_UART_Receive_DMA>
	  sprintf(serial_output_buffer,"Data received from ESP is: ");
 8000a6a:	499c      	ldr	r1, [pc, #624]	@ (8000cdc <HAL_UART_RxCpltCallback+0x290>)
 8000a6c:	489c      	ldr	r0, [pc, #624]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000a6e:	f00b fecf 	bl	800c810 <siprintf>
	  for(int i=0;i<5;i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
 8000a76:	e010      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x4e>
	  {
		  sprintf(serial_output_buffer+strlen(serial_output_buffer),"%02X ",uart3_rx_data[i]);
 8000a78:	4899      	ldr	r0, [pc, #612]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000a7a:	f7ff fbd1 	bl	8000220 <strlen>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a97      	ldr	r2, [pc, #604]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000a82:	1898      	adds	r0, r3, r2
 8000a84:	4a94      	ldr	r2, [pc, #592]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x28c>)
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4995      	ldr	r1, [pc, #596]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x298>)
 8000a90:	f00b febe 	bl	800c810 <siprintf>
	  for(int i=0;i<5;i++)
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	3301      	adds	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	ddeb      	ble.n	8000a78 <HAL_UART_RxCpltCallback+0x2c>
	  }
	  Serial_Print();
 8000aa0:	f7ff ff5a 	bl	8000958 <Serial_Print>
	  if(uart3_rx_data[2]==0x15)
 8000aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x28c>)
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	2b15      	cmp	r3, #21
 8000aaa:	d116      	bne.n	8000ada <HAL_UART_RxCpltCallback+0x8e>
	  {
		  switch (uart3_rx_data[3]) {
 8000aac:	4b8a      	ldr	r3, [pc, #552]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x28c>)
 8000aae:	78db      	ldrb	r3, [r3, #3]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00f      	beq.n	8000ad4 <HAL_UART_RxCpltCallback+0x88>
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_UART_RxCpltCallback+0x8c>
		  case 0x01:
			 // HMI_Compose_Status(HMI_PAGE1);
			  uint8_t data_to_hmi[9]={0x70, 0x61, 0x67, 0x65, 0x20, 0x31 ,0xFF, 0xFF, 0xFF};
 8000ab8:	4a8b      	ldr	r2, [pc, #556]	@ (8000ce8 <HAL_UART_RxCpltCallback+0x29c>)
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac0:	c303      	stmia	r3!, {r0, r1}
 8000ac2:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart4, data_to_hmi, 9, 100);
 8000ac4:	f107 0108 	add.w	r1, r7, #8
 8000ac8:	2364      	movs	r3, #100	@ 0x64
 8000aca:	2209      	movs	r2, #9
 8000acc:	4887      	ldr	r0, [pc, #540]	@ (8000cec <HAL_UART_RxCpltCallback+0x2a0>)
 8000ace:	f008 fd55 	bl	800957c <HAL_UART_Transmit>
			  break;
 8000ad2:	e002      	b.n	8000ada <HAL_UART_RxCpltCallback+0x8e>
		  case 0x00:
			  break;
 8000ad4:	bf00      	nop
 8000ad6:	e000      	b.n	8000ada <HAL_UART_RxCpltCallback+0x8e>
		  default:
			  break;
 8000ad8:	bf00      	nop
//	  {
//
//	  }

  }
  if(huart->Instance==huart1.Instance)	//ESP data
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b84      	ldr	r3, [pc, #528]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x2a4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d121      	bne.n	8000b2a <HAL_UART_RxCpltCallback+0xde>
  {
	  HAL_UART_Receive_DMA(&huart1, uart1_rx_data, sizeof(uart1_rx_data));
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	4982      	ldr	r1, [pc, #520]	@ (8000cf4 <HAL_UART_RxCpltCallback+0x2a8>)
 8000aea:	4881      	ldr	r0, [pc, #516]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x2a4>)
 8000aec:	f008 fddc 	bl	80096a8 <HAL_UART_Receive_DMA>
	  sprintf(serial_output_buffer,"Data received from ESP is: ");
 8000af0:	497a      	ldr	r1, [pc, #488]	@ (8000cdc <HAL_UART_RxCpltCallback+0x290>)
 8000af2:	487b      	ldr	r0, [pc, #492]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000af4:	f00b fe8c 	bl	800c810 <siprintf>
	  for(int i=0;i<8;i++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	e010      	b.n	8000b20 <HAL_UART_RxCpltCallback+0xd4>
	  {
		  sprintf(serial_output_buffer+strlen(serial_output_buffer),"%02X ",uart1_rx_data[i]);
 8000afe:	4878      	ldr	r0, [pc, #480]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000b00:	f7ff fb8e 	bl	8000220 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a76      	ldr	r2, [pc, #472]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000b08:	1898      	adds	r0, r3, r2
 8000b0a:	4a7a      	ldr	r2, [pc, #488]	@ (8000cf4 <HAL_UART_RxCpltCallback+0x2a8>)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	4413      	add	r3, r2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	4973      	ldr	r1, [pc, #460]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x298>)
 8000b16:	f00b fe7b 	bl	800c810 <siprintf>
	  for(int i=0;i<8;i++)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	ddeb      	ble.n	8000afe <HAL_UART_RxCpltCallback+0xb2>
	  }
	  Serial_Print();
 8000b26:	f7ff ff17 	bl	8000958 <Serial_Print>
  }
  if(huart->Instance==huart4.Instance)	//HMI data
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8000cec <HAL_UART_RxCpltCallback+0x2a0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	f040 8130 	bne.w	8000d98 <HAL_UART_RxCpltCallback+0x34c>
  {
	  HAL_UART_Receive_DMA(&huart4, uart4_rx_data, sizeof(uart4_rx_data));
 8000b38:	2208      	movs	r2, #8
 8000b3a:	496f      	ldr	r1, [pc, #444]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000b3c:	486b      	ldr	r0, [pc, #428]	@ (8000cec <HAL_UART_RxCpltCallback+0x2a0>)
 8000b3e:	f008 fdb3 	bl	80096a8 <HAL_UART_Receive_DMA>
	  //loc truoc khi nhan, co the day la du lieu loi 1A FF FF FF nen can loai bo
	  if(uart4_rx_data[0]>0x29 && uart4_rx_data[0]<0x60)
 8000b42:	4b6d      	ldr	r3, [pc, #436]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b29      	cmp	r3, #41	@ 0x29
 8000b48:	f240 8121 	bls.w	8000d8e <HAL_UART_RxCpltCallback+0x342>
 8000b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b52:	f200 811c 	bhi.w	8000d8e <HAL_UART_RxCpltCallback+0x342>
	  {
		  uart_flag=1;
 8000b56:	4b69      	ldr	r3, [pc, #420]	@ (8000cfc <HAL_UART_RxCpltCallback+0x2b0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
		  sprintf(serial_output_buffer,"Data received from HMI is: ");
 8000b5c:	4968      	ldr	r1, [pc, #416]	@ (8000d00 <HAL_UART_RxCpltCallback+0x2b4>)
 8000b5e:	4860      	ldr	r0, [pc, #384]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000b60:	f00b fe56 	bl	800c810 <siprintf>
		  for(int i=0;i<8;i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e010      	b.n	8000b8c <HAL_UART_RxCpltCallback+0x140>
		  {
			  sprintf(serial_output_buffer+strlen(serial_output_buffer),"%02X ",uart4_rx_data[i]);
 8000b6a:	485d      	ldr	r0, [pc, #372]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000b6c:	f7ff fb58 	bl	8000220 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a5b      	ldr	r2, [pc, #364]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000b74:	1898      	adds	r0, r3, r2
 8000b76:	4a60      	ldr	r2, [pc, #384]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4958      	ldr	r1, [pc, #352]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x298>)
 8000b82:	f00b fe45 	bl	800c810 <siprintf>
		  for(int i=0;i<8;i++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	ddeb      	ble.n	8000b6a <HAL_UART_RxCpltCallback+0x11e>
		  }
		  Serial_Print();
 8000b92:	f7ff fee1 	bl	8000958 <Serial_Print>

		  if(uart4_rx_data[0]==0x59)
 8000b96:	4b58      	ldr	r3, [pc, #352]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b59      	cmp	r3, #89	@ 0x59
 8000b9c:	d121      	bne.n	8000be2 <HAL_UART_RxCpltCallback+0x196>
		  {
			  //start
			  sprintf(serial_output_buffer,"HMI gui goi tin Start ");
 8000b9e:	4959      	ldr	r1, [pc, #356]	@ (8000d04 <HAL_UART_RxCpltCallback+0x2b8>)
 8000ba0:	484f      	ldr	r0, [pc, #316]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000ba2:	f00b fe35 	bl	800c810 <siprintf>
			  Serial_Print();
 8000ba6:	f7ff fed7 	bl	8000958 <Serial_Print>
			  Packet_to_ESP(TYPE_CONNECTER_STATUS,STATE_ON);
 8000baa:	2101      	movs	r1, #1
 8000bac:	2017      	movs	r0, #23
 8000bae:	f7ff fe2b 	bl	8000808 <Packet_to_ESP>
			  Packet_to_ESP(TYPE_HMI_CONTROL_TRANSACTION,STATE_ON);     // Sent start to ESp
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2018      	movs	r0, #24
 8000bb6:	f7ff fe27 	bl	8000808 <Packet_to_ESP>
			  Master_Tx_SPDO_Data.state=CHARGING_ON;
 8000bba:	4b53      	ldr	r3, [pc, #332]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f005 fc56 	bl	8006478 <HAL_GPIO_WritePin>
			  PEF_Compose_Contactor_Close_Req();
 8000bcc:	f00a fe1c 	bl	800b808 <PEF_Compose_Contactor_Close_Req>
			  SPI_QCA7000_Send_Eth_Frame();
 8000bd0:	f00a f90a 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
			  sprintf(serial_output_buffer,"Send PEF_Compose_Contactor_Close_Req() ");
 8000bd4:	494d      	ldr	r1, [pc, #308]	@ (8000d0c <HAL_UART_RxCpltCallback+0x2c0>)
 8000bd6:	4842      	ldr	r0, [pc, #264]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000bd8:	f00b fe1a 	bl	800c810 <siprintf>
			  Serial_Print();
 8000bdc:	f7ff febc 	bl	8000958 <Serial_Print>
 8000be0:	e04f      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x236>
		  }
		  else if(uart4_rx_data[0]==0x30)
 8000be2:	4b45      	ldr	r3, [pc, #276]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b30      	cmp	r3, #48	@ 0x30
 8000be8:	d10a      	bne.n	8000c00 <HAL_UART_RxCpltCallback+0x1b4>
		  {
			  sprintf(serial_output_buffer,"HMI gui goi tin Logout ");
 8000bea:	4949      	ldr	r1, [pc, #292]	@ (8000d10 <HAL_UART_RxCpltCallback+0x2c4>)
 8000bec:	483c      	ldr	r0, [pc, #240]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000bee:	f00b fe0f 	bl	800c810 <siprintf>
			  Serial_Print();
 8000bf2:	f7ff feb1 	bl	8000958 <Serial_Print>
			  Packet_to_ESP(TYPE_ID_TAG,STATE_OFF);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2015      	movs	r0, #21
 8000bfa:	f7ff fe05 	bl	8000808 <Packet_to_ESP>
 8000bfe:	e040      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x236>
		  }
		  else if(uart4_rx_data[0]==0x4E)
 8000c00:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b4e      	cmp	r3, #78	@ 0x4e
 8000c06:	d133      	bne.n	8000c70 <HAL_UART_RxCpltCallback+0x224>
		  {
			  //stop
			  sprintf(serial_output_buffer,"HMI gui goi tin Stop ");
 8000c08:	4942      	ldr	r1, [pc, #264]	@ (8000d14 <HAL_UART_RxCpltCallback+0x2c8>)
 8000c0a:	4835      	ldr	r0, [pc, #212]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000c0c:	f00b fe00 	bl	800c810 <siprintf>
			  Serial_Print();
 8000c10:	f7ff fea2 	bl	8000958 <Serial_Print>
			  ESP_Data.ESP_Data_voltage=0;
 8000c14:	4b40      	ldr	r3, [pc, #256]	@ (8000d18 <HAL_UART_RxCpltCallback+0x2cc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	805a      	strh	r2, [r3, #2]
			  ESP_Data.ESP_Data_current=0;
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d18 <HAL_UART_RxCpltCallback+0x2cc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	809a      	strh	r2, [r3, #4]
			  Packet_to_ESP(TYPE_CURRENT_VALUE,STATE_ON);
 8000c20:	2101      	movs	r1, #1
 8000c22:	2020      	movs	r0, #32
 8000c24:	f7ff fdf0 	bl	8000808 <Packet_to_ESP>
			  Packet_to_ESP(TYPE_VOLTAGE_VALUE,STATE_ON);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2021      	movs	r0, #33	@ 0x21
 8000c2c:	f7ff fdec 	bl	8000808 <Packet_to_ESP>
			  Packet_to_ESP(TYPE_HMI_CONTROL_TRANSACTION,STATE_OFF);
 8000c30:	2100      	movs	r1, #0
 8000c32:	2018      	movs	r0, #24
 8000c34:	f7ff fde8 	bl	8000808 <Packet_to_ESP>
			  Master_Tx_SPDO_Data.state=CHARGING_OFF;
 8000c38:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
			  can_setting_confirm_flag=0;
 8000c3e:	4b37      	ldr	r3, [pc, #220]	@ (8000d1c <HAL_UART_RxCpltCallback+0x2d0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
			  CAN_Master_Tx_Data[0]=0x02;
 8000c44:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <HAL_UART_RxCpltCallback+0x2d4>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	701a      	strb	r2, [r3, #0]
			  Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_CURRENT;
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	715a      	strb	r2, [r3, #5]
			  button_flag=0;
 8000c50:	4b34      	ldr	r3, [pc, #208]	@ (8000d24 <HAL_UART_RxCpltCallback+0x2d8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
			  button_flag2=0;
 8000c56:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <HAL_UART_RxCpltCallback+0x2dc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
			  uart_flag=0;
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <HAL_UART_RxCpltCallback+0x2b0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2120      	movs	r1, #32
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f005 fc05 	bl	8006478 <HAL_GPIO_WritePin>
 8000c6e:	e008      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x236>
		  }
		  else
		  {
			  //data
			  //Master_Tx_SPDO_Data.state=CHARGING_ON;
			  sprintf(serial_output_buffer,"HMI gui goi tin Setting ");
 8000c70:	492e      	ldr	r1, [pc, #184]	@ (8000d2c <HAL_UART_RxCpltCallback+0x2e0>)
 8000c72:	481b      	ldr	r0, [pc, #108]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x294>)
 8000c74:	f00b fdcc 	bl	800c810 <siprintf>
			  Serial_Print();
 8000c78:	f7ff fe6e 	bl	8000958 <Serial_Print>
			  HMI_Evaluate_Setting_Data(uart4_rx_data);
 8000c7c:	481e      	ldr	r0, [pc, #120]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8000c7e:	f00a fa83 	bl	800b188 <HMI_Evaluate_Setting_Data>
		  }

			switch(myHMI.mode)
 8000c82:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <HAL_UART_RxCpltCallback+0x2e4>)
 8000c84:	785b      	ldrb	r3, [r3, #1]
 8000c86:	3b30      	subs	r3, #48	@ 0x30
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d863      	bhi.n	8000d54 <HAL_UART_RxCpltCallback+0x308>
 8000c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c94 <HAL_UART_RxCpltCallback+0x248>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000ca5 	.word	0x08000ca5
 8000c98:	08000cb5 	.word	0x08000cb5
 8000c9c:	08000cc5 	.word	0x08000cc5
 8000ca0:	08000d39 	.word	0x08000d39
			{
				case '0':
					Master_Tx_SPDO_Data.mode=CHARGING_MODE_1;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	70da      	strb	r2, [r3, #3]
					Master_Tx_SPDO_Data.current_value=myEV.charging_current_request;
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <HAL_UART_RxCpltCallback+0x2e8>)
 8000cac:	899a      	ldrh	r2, [r3, #12]
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000cb0:	811a      	strh	r2, [r3, #8]
					break;
 8000cb2:	e04f      	b.n	8000d54 <HAL_UART_RxCpltCallback+0x308>
				case '1':
					Master_Tx_SPDO_Data.mode=CHARGING_MODE_2;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	70da      	strb	r2, [r3, #3]
					Master_Tx_SPDO_Data.current_value=myEV.charging_current_request;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_UART_RxCpltCallback+0x2e8>)
 8000cbc:	899a      	ldrh	r2, [r3, #12]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000cc0:	811a      	strh	r2, [r3, #8]
					break;
 8000cc2:	e047      	b.n	8000d54 <HAL_UART_RxCpltCallback+0x308>
				case '2':
					Master_Tx_SPDO_Data.mode=CHARGING_MODE_3;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	70da      	strb	r2, [r3, #3]
					Master_Tx_SPDO_Data.current_value=myEV.charging_current_request;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <HAL_UART_RxCpltCallback+0x2e8>)
 8000ccc:	899a      	ldrh	r2, [r3, #12]
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_UART_RxCpltCallback+0x2bc>)
 8000cd0:	811a      	strh	r2, [r3, #8]
					break;
 8000cd2:	e03f      	b.n	8000d54 <HAL_UART_RxCpltCallback+0x308>
 8000cd4:	20000450 	.word	0x20000450
 8000cd8:	200005dc 	.word	0x200005dc
 8000cdc:	0800d990 	.word	0x0800d990
 8000ce0:	20000708 	.word	0x20000708
 8000ce4:	0800d9ac 	.word	0x0800d9ac
 8000ce8:	0800da5c 	.word	0x0800da5c
 8000cec:	200002a0 	.word	0x200002a0
 8000cf0:	20000330 	.word	0x20000330
 8000cf4:	200005e4 	.word	0x200005e4
 8000cf8:	200005d4 	.word	0x200005d4
 8000cfc:	200006e4 	.word	0x200006e4
 8000d00:	0800d9b4 	.word	0x0800d9b4
 8000d04:	0800d9d0 	.word	0x0800d9d0
 8000d08:	20000648 	.word	0x20000648
 8000d0c:	0800d9e8 	.word	0x0800d9e8
 8000d10:	0800da10 	.word	0x0800da10
 8000d14:	0800da28 	.word	0x0800da28
 8000d18:	200000c4 	.word	0x200000c4
 8000d1c:	200006f4 	.word	0x200006f4
 8000d20:	20000638 	.word	0x20000638
 8000d24:	200006e8 	.word	0x200006e8
 8000d28:	200006ec 	.word	0x200006ec
 8000d2c:	0800da40 	.word	0x0800da40
 8000d30:	200022d0 	.word	0x200022d0
 8000d34:	200022e0 	.word	0x200022e0
				case '3':
					Master_Tx_SPDO_Data.mode=CHARGING_MODE_4;
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_UART_RxCpltCallback+0x354>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	70da      	strb	r2, [r3, #3]
					Master_Tx_SPDO_Data.current_value=myHMI.current/can_node_number;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_UART_RxCpltCallback+0x358>)
 8000d40:	889b      	ldrh	r3, [r3, #4]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_UART_RxCpltCallback+0x35c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_UART_RxCpltCallback+0x354>)
 8000d50:	811a      	strh	r2, [r3, #8]
					break;
 8000d52:	bf00      	nop
			}

			switch(myHMI.cable)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_UART_RxCpltCallback+0x358>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b30      	cmp	r3, #48	@ 0x30
 8000d5a:	d002      	beq.n	8000d62 <HAL_UART_RxCpltCallback+0x316>
 8000d5c:	2b31      	cmp	r3, #49	@ 0x31
 8000d5e:	d004      	beq.n	8000d6a <HAL_UART_RxCpltCallback+0x31e>
 8000d60:	e007      	b.n	8000d72 <HAL_UART_RxCpltCallback+0x326>
			{
				case '0':	Master_Tx_SPDO_Data.mode=CHARGING_PLUG_1; break;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <HAL_UART_RxCpltCallback+0x354>)
 8000d64:	2210      	movs	r2, #16
 8000d66:	70da      	strb	r2, [r3, #3]
 8000d68:	e003      	b.n	8000d72 <HAL_UART_RxCpltCallback+0x326>
				case '1':	Master_Tx_SPDO_Data.mode=CHARGING_PLUG_2; break;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_UART_RxCpltCallback+0x354>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	70da      	strb	r2, [r3, #3]
 8000d70:	bf00      	nop
			}
			Master_Tx_SPDO_Data.time_value=myHMI.time;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_UART_RxCpltCallback+0x358>)
 8000d74:	88da      	ldrh	r2, [r3, #6]
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_UART_RxCpltCallback+0x354>)
 8000d78:	819a      	strh	r2, [r3, #12]
			Master_Tx_SPDO_Data.voltage_value=myHMI.voltage/can_node_number;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_UART_RxCpltCallback+0x358>)
 8000d7c:	885b      	ldrh	r3, [r3, #2]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_UART_RxCpltCallback+0x35c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_UART_RxCpltCallback+0x354>)
 8000d8c:	80da      	strh	r2, [r3, #6]
	  }
	  memset(uart4_rx_data, 0, sizeof(uart4_rx_data));
 8000d8e:	2208      	movs	r2, #8
 8000d90:	2100      	movs	r1, #0
 8000d92:	4806      	ldr	r0, [pc, #24]	@ (8000dac <HAL_UART_RxCpltCallback+0x360>)
 8000d94:	f00b fd9f 	bl	800c8d6 <memset>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000648 	.word	0x20000648
 8000da4:	200022d0 	.word	0x200022d0
 8000da8:	20000000 	.word	0x20000000
 8000dac:	200005d4 	.word	0x200005d4

08000db0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
	{
	}

	if(GPIO_Pin == QCA_INT_Pin)
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x14>
	{
		SPI_QCA7000_Handling_Intr();
 8000dc0:	f00a f8c2 	bl	800af48 <SPI_QCA7000_Handling_Intr>
	}

}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 8106 	beq.w	8000fee <HAL_FDCAN_RxFifo0Callback+0x222>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Master_Rx_Header, CAN_Master_Rx_Data) != HAL_OK)
 8000de2:	4b85      	ldr	r3, [pc, #532]	@ (8000ff8 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8000de4:	4a85      	ldr	r2, [pc, #532]	@ (8000ffc <HAL_FDCAN_RxFifo0Callback+0x230>)
 8000de6:	2140      	movs	r1, #64	@ 0x40
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f004 fad7 	bl	800539c <HAL_FDCAN_GetRxMessage>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000df4:	f001 fa8a 	bl	800230c <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f004 fba7 	bl	8005550 <HAL_FDCAN_ActivateNotification>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_FDCAN_RxFifo0Callback+0x40>
		{
			/* Notification Error */
			Error_Handler();
 8000e08:	f001 fa80 	bl	800230c <Error_Handler>
		}
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e12:	f005 fb49 	bl	80064a8 <HAL_GPIO_TogglePin>
		can_flag=1;
 8000e16:	4b7a      	ldr	r3, [pc, #488]	@ (8001000 <HAL_FDCAN_RxFifo0Callback+0x234>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

		deframe_PDO(CAN_Master_Rx_Data, &Master_Rx_SPDO_Data);
 8000e1c:	4979      	ldr	r1, [pc, #484]	@ (8001004 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8000e1e:	4876      	ldr	r0, [pc, #472]	@ (8000ff8 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8000e20:	f001 facc 	bl	80023bc <deframe_PDO>

		int id=(int)CAN_Master_Rx_Header.Identifier;
 8000e24:	4b75      	ldr	r3, [pc, #468]	@ (8000ffc <HAL_FDCAN_RxFifo0Callback+0x230>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	623b      	str	r3, [r7, #32]
		list_node_update[id]=HAL_GetTick();			//lastest time this ID node communicate with CIMS
 8000e2a:	f002 f8dd 	bl	8002fe8 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	4975      	ldr	r1, [pc, #468]	@ (8001008 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(list_node_available[id]!=ID_IN_USED)
 8000e38:	4a74      	ldr	r2, [pc, #464]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2baa      	cmp	r3, #170	@ 0xaa
 8000e42:	d00b      	beq.n	8000e5c <HAL_FDCAN_RxFifo0Callback+0x90>
		{
			list_node_available[id]=ID_IN_USED;			//ID connect/reconnect with the CIMS
 8000e44:	4a71      	ldr	r2, [pc, #452]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	4413      	add	r3, r2
 8000e4a:	22aa      	movs	r2, #170	@ 0xaa
 8000e4c:	701a      	strb	r2, [r3, #0]
			sprintf(serial_output_buffer,"Node 0x%02X reconnect vao mang ",id);
 8000e4e:	6a3a      	ldr	r2, [r7, #32]
 8000e50:	496f      	ldr	r1, [pc, #444]	@ (8001010 <HAL_FDCAN_RxFifo0Callback+0x244>)
 8000e52:	4870      	ldr	r0, [pc, #448]	@ (8001014 <HAL_FDCAN_RxFifo0Callback+0x248>)
 8000e54:	f00b fcdc 	bl	800c810 <siprintf>
			Serial_Print();
 8000e58:	f7ff fd7e 	bl	8000958 <Serial_Print>
		}

		deframe_PDO(CAN_Master_Rx_Data, &Slave_Data[id-2]);	//slave data
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	1e9a      	subs	r2, r3, #2
 8000e60:	4613      	mov	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4a6b      	ldr	r2, [pc, #428]	@ (8001018 <HAL_FDCAN_RxFifo0Callback+0x24c>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4862      	ldr	r0, [pc, #392]	@ (8000ff8 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8000e70:	f001 faa4 	bl	80023bc <deframe_PDO>


		if(Master_Rx_SPDO_Data.state==CHARGING_INIT) //có slave mới tham gia mang
 8000e74:	4b63      	ldr	r3, [pc, #396]	@ (8001004 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	f040 80af 	bne.w	8000fdc <HAL_FDCAN_RxFifo0Callback+0x210>
		{
			if(CAN_Master_Rx_Header.Identifier==CHARGING_SLAVE_ID)	//slave default ID => new node join and need a new ID
 8000e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8000ffc <HAL_FDCAN_RxFifo0Callback+0x230>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 80aa 	bne.w	8000fdc <HAL_FDCAN_RxFifo0Callback+0x210>
			{
				sprintf(serial_output_buffer,"Co node moi tham gia, ID mong muon= 0x%02X ",Master_Rx_SPDO_Data.slaveID);
 8000e88:	4b5e      	ldr	r3, [pc, #376]	@ (8001004 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4963      	ldr	r1, [pc, #396]	@ (800101c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000e90:	4860      	ldr	r0, [pc, #384]	@ (8001014 <HAL_FDCAN_RxFifo0Callback+0x248>)
 8000e92:	f00b fcbd 	bl	800c810 <siprintf>
				Serial_Print();
 8000e96:	f7ff fd5f 	bl	8000958 <Serial_Print>
				int desireID=(int)Master_Rx_SPDO_Data.slaveID;
 8000e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001004 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8000e9c:	791b      	ldrb	r3, [r3, #4]
 8000e9e:	61fb      	str	r3, [r7, #28]
				if(list_node_available[desireID]==ID_NOT_USED)
 8000ea0:	4a5a      	ldr	r2, [pc, #360]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d13f      	bne.n	8000f2c <HAL_FDCAN_RxFifo0Callback+0x160>
				{
					Master_Tx_SPDO_Data.slaveID=Master_Rx_SPDO_Data.slaveID;
 8000eac:	4b55      	ldr	r3, [pc, #340]	@ (8001004 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8000eae:	791a      	ldrb	r2, [r3, #4]
 8000eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000eb2:	711a      	strb	r2, [r3, #4]
					list_node_available[desireID]=ID_IN_USED;
 8000eb4:	4a55      	ldr	r2, [pc, #340]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	4413      	add	r3, r2
 8000eba:	22aa      	movs	r2, #170	@ 0xaa
 8000ebc:	701a      	strb	r2, [r3, #0]

					//send message, if a slave is new (ID=0) then it will have a new ID
					uint8_t state_temp=Master_Tx_SPDO_Data.state;	//luu trang thai master hien tai
 8000ebe:	4b58      	ldr	r3, [pc, #352]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	767b      	strb	r3, [r7, #25]
					uint8_t destinationaddress=CAN_Master_Tx_Data[0]; //luu dia chi dich hien tai
 8000ec4:	4b57      	ldr	r3, [pc, #348]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	763b      	strb	r3, [r7, #24]
					Master_Tx_SPDO_Data.state=CHARGING_INIT;		//tam thoi thay doi trang thai master sang khoi tao slave
 8000eca:	4b55      	ldr	r3, [pc, #340]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000ecc:	2205      	movs	r2, #5
 8000ece:	701a      	strb	r2, [r3, #0]
					CAN_Master_Tx_Data[0]=CHARGING_SLAVE_ID;		//tam thoi thay doi dia chi dich toi slave moi khoi tao
 8000ed0:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 8000ed6:	4b52      	ldr	r3, [pc, #328]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000ed8:	899a      	ldrh	r2, [r3, #12]
 8000eda:	f8ad 2000 	strh.w	r2, [sp]
 8000ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee0:	4850      	ldr	r0, [pc, #320]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000ee2:	f001 fa19 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 8000ee6:	4a4f      	ldr	r2, [pc, #316]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000ee8:	494f      	ldr	r1, [pc, #316]	@ (8001028 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f004 fa12 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					//send message to uart3
					sprintf(serial_output_buffer,"Node moi co ID= 0x%02X ",Master_Tx_SPDO_Data.slaveID);
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	494d      	ldr	r1, [pc, #308]	@ (800102c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000ef8:	4846      	ldr	r0, [pc, #280]	@ (8001014 <HAL_FDCAN_RxFifo0Callback+0x248>)
 8000efa:	f00b fc89 	bl	800c810 <siprintf>
					Serial_Print();
 8000efe:	f7ff fd2b 	bl	8000958 <Serial_Print>

					//write list id to flash
					uint64_t datawwritetoflash[Maximum_number_of_IDs/8];
					uint8_array_to_uint64_array_big_endian(list_node_available, Maximum_number_of_IDs/8, datawwritetoflash);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	461a      	mov	r2, r3
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4840      	ldr	r0, [pc, #256]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000f0c:	f7ff fc28 	bl	8000760 <uint8_array_to_uint64_array_big_endian>
					writeFlash(datawwritetoflash, Maximum_number_of_IDs/8, 127, FLASH_BANK_1);
 8000f10:	f107 0010 	add.w	r0, r7, #16
 8000f14:	2301      	movs	r3, #1
 8000f16:	227f      	movs	r2, #127	@ 0x7f
 8000f18:	2101      	movs	r1, #1
 8000f1a:	f7ff fb51 	bl	80005c0 <writeFlash>

					Master_Tx_SPDO_Data.state=state_temp;			//tra lai trang thai cu cho master
 8000f1e:	4a40      	ldr	r2, [pc, #256]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000f20:	7e7b      	ldrb	r3, [r7, #25]
 8000f22:	7013      	strb	r3, [r2, #0]
					CAN_Master_Tx_Data[0]=destinationaddress;		//tra lai dia chi dich cu cho master
 8000f24:	4a3f      	ldr	r2, [pc, #252]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000f26:	7e3b      	ldrb	r3, [r7, #24]
 8000f28:	7013      	strb	r3, [r2, #0]
 8000f2a:	e057      	b.n	8000fdc <HAL_FDCAN_RxFifo0Callback+0x210>
				}
				else
				{
					int i = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
					while (i < Maximum_number_of_IDs)
 8000f30:	e051      	b.n	8000fd6 <HAL_FDCAN_RxFifo0Callback+0x20a>
					{
						if (list_node_available[i] == ID_NOT_USED)
 8000f32:	4a36      	ldr	r2, [pc, #216]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d13f      	bne.n	8000fbe <HAL_FDCAN_RxFifo0Callback+0x1f2>
						{
							Master_Tx_SPDO_Data.slaveID=i;			//nodeID cho slave mới tham gia, có giá tri từ 2-Maximum_number_of_IDs
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000f44:	711a      	strb	r2, [r3, #4]
							list_node_available[i]=ID_IN_USED;
 8000f46:	4a31      	ldr	r2, [pc, #196]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	4413      	add	r3, r2
 8000f4c:	22aa      	movs	r2, #170	@ 0xaa
 8000f4e:	701a      	strb	r2, [r3, #0]

							//send message, if a slave is new (ID=0) then it will have a new ID
							uint8_t state_temp=Master_Tx_SPDO_Data.state;	//luu trang thai master hien tai
 8000f50:	4b33      	ldr	r3, [pc, #204]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	76fb      	strb	r3, [r7, #27]
							uint8_t destinationaddress=CAN_Master_Tx_Data[0]; //luu dia chi dich hien tai
 8000f56:	4b33      	ldr	r3, [pc, #204]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	76bb      	strb	r3, [r7, #26]
							Master_Tx_SPDO_Data.state=CHARGING_INIT;		//tam thoi thay doi trang thai master sang khoi tao slave
 8000f5c:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	701a      	strb	r2, [r3, #0]
							CAN_Master_Tx_Data[0]=CHARGING_SLAVE_ID;		//tam thoi thay doi dia chi dich toi slave moi khoi tao
 8000f62:	4b30      	ldr	r3, [pc, #192]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
							PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 8000f68:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000f6a:	899a      	ldrh	r2, [r3, #12]
 8000f6c:	f8ad 2000 	strh.w	r2, [sp]
 8000f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f72:	482c      	ldr	r0, [pc, #176]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000f74:	f001 f9d0 	bl	8002318 <PDO_set_data_frame>
							HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 8000f78:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000f7a:	492b      	ldr	r1, [pc, #172]	@ (8001028 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f004 f9c9 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>

							uint64_t datawwritetoflash[Maximum_number_of_IDs/8];
							uint8_array_to_uint64_array_big_endian(list_node_available, Maximum_number_of_IDs/8, datawwritetoflash);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	461a      	mov	r2, r3
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4820      	ldr	r0, [pc, #128]	@ (800100c <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000f8c:	f7ff fbe8 	bl	8000760 <uint8_array_to_uint64_array_big_endian>
							writeFlash(datawwritetoflash, Maximum_number_of_IDs/8, 127, FLASH_BANK_1);
 8000f90:	f107 0008 	add.w	r0, r7, #8
 8000f94:	2301      	movs	r3, #1
 8000f96:	227f      	movs	r2, #127	@ 0x7f
 8000f98:	2101      	movs	r1, #1
 8000f9a:	f7ff fb11 	bl	80005c0 <writeFlash>

							Master_Tx_SPDO_Data.state=state_temp;			//tra lai trang thai cu cho master
 8000f9e:	4a20      	ldr	r2, [pc, #128]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000fa0:	7efb      	ldrb	r3, [r7, #27]
 8000fa2:	7013      	strb	r3, [r2, #0]
							CAN_Master_Tx_Data[0]=destinationaddress;		//tra lai dia chi dich cu cho master
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000fa6:	7ebb      	ldrb	r3, [r7, #26]
 8000fa8:	7013      	strb	r3, [r2, #0]

							sprintf(serial_output_buffer,"Node moi co ID= 0x%02X ",Master_Tx_SPDO_Data.slaveID);
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	491e      	ldr	r1, [pc, #120]	@ (800102c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000fb2:	4818      	ldr	r0, [pc, #96]	@ (8001014 <HAL_FDCAN_RxFifo0Callback+0x248>)
 8000fb4:	f00b fc2c 	bl	800c810 <siprintf>
							Serial_Print();
 8000fb8:	f7ff fcce 	bl	8000958 <Serial_Print>
							break;	// Phá vỡ vòng lặp while
 8000fbc:	e00e      	b.n	8000fdc <HAL_FDCAN_RxFifo0Callback+0x210>
						}
						i++;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
						if(i==Maximum_number_of_IDs)
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d105      	bne.n	8000fd6 <HAL_FDCAN_RxFifo0Callback+0x20a>
						{
							sprintf(serial_output_buffer,"Khong co ID phu hop cho node moi nay");
 8000fca:	4919      	ldr	r1, [pc, #100]	@ (8001030 <HAL_FDCAN_RxFifo0Callback+0x264>)
 8000fcc:	4811      	ldr	r0, [pc, #68]	@ (8001014 <HAL_FDCAN_RxFifo0Callback+0x248>)
 8000fce:	f00b fc1f 	bl	800c810 <siprintf>
							Serial_Print();
 8000fd2:	f7ff fcc1 	bl	8000958 <Serial_Print>
					while (i < Maximum_number_of_IDs)
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	ddaa      	ble.n	8000f32 <HAL_FDCAN_RxFifo0Callback+0x166>
					}
				}
			}
		}

		if(Master_Rx_SPDO_Data.function==CHARGING_CONFIRM)	//slave confirm data setting
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d104      	bne.n	8000fee <HAL_FDCAN_RxFifo0Callback+0x222>
		{
			can_setting_confirm_flag++;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <HAL_FDCAN_RxFifo0Callback+0x268>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <HAL_FDCAN_RxFifo0Callback+0x268>)
 8000fec:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	@ 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000640 	.word	0x20000640
 8000ffc:	20000610 	.word	0x20000610
 8001000:	200006f0 	.word	0x200006f0
 8001004:	20000658 	.word	0x20000658
 8001008:	200006c4 	.word	0x200006c4
 800100c:	200006bc 	.word	0x200006bc
 8001010:	0800da68 	.word	0x0800da68
 8001014:	20000708 	.word	0x20000708
 8001018:	20000668 	.word	0x20000668
 800101c:	0800da88 	.word	0x0800da88
 8001020:	20000648 	.word	0x20000648
 8001024:	20000638 	.word	0x20000638
 8001028:	200005ec 	.word	0x200005ec
 800102c:	0800dab4 	.word	0x0800dab4
 8001030:	0800dacc 	.word	0x0800dacc
 8001034:	200006f4 	.word	0x200006f4

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b0a1      	sub	sp, #132	@ 0x84
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f001 ff6e 	bl	8002f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fd5b 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 f8bf 	bl	80021c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 f88b 	bl	8002164 <MX_DMA_Init>
  MX_FDCAN2_Init();
 800104e:	f000 fe19 	bl	8001c84 <MX_FDCAN2_Init>
  MX_UART4_Init();
 8001052:	f000 ff57 	bl	8001f04 <MX_UART4_Init>
  MX_TIM17_Init();
 8001056:	f000 ff2d 	bl	8001eb4 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 800105a:	f001 f837 	bl	80020cc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800105e:	f000 fd99 	bl	8001b94 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001062:	f000 fe55 	bl	8001d10 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001066:	f000 fe91 	bl	8001d8c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800106a:	f000 ff97 	bl	8001f9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800106e:	f000 ffe1 	bl	8002034 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 8001072:	48ab      	ldr	r0, [pc, #684]	@ (8001320 <main+0x2e8>)
 8001074:	f004 f926 	bl	80052c4 <HAL_FDCAN_Start>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <main+0x4a>
	{
	  Error_Handler();
 800107e:	f001 f945 	bl	800230c <Error_Handler>
	}
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	48a6      	ldr	r0, [pc, #664]	@ (8001320 <main+0x2e8>)
 8001088:	f004 fa62 	bl	8005550 <HAL_FDCAN_ActivateNotification>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <main+0x5e>
	{
	  /* Notification Error */
	  Error_Handler();
 8001092:	f001 f93b 	bl	800230c <Error_Handler>
	}

  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &CAN_Master_Rx_Header, CAN_Master_Rx_Data);
 8001096:	4ba3      	ldr	r3, [pc, #652]	@ (8001324 <main+0x2ec>)
 8001098:	4aa3      	ldr	r2, [pc, #652]	@ (8001328 <main+0x2f0>)
 800109a:	2140      	movs	r1, #64	@ 0x40
 800109c:	48a0      	ldr	r0, [pc, #640]	@ (8001320 <main+0x2e8>)
 800109e:	f004 f97d 	bl	800539c <HAL_FDCAN_GetRxMessage>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    // Bắt đầu PWM
 80010a2:	2100      	movs	r1, #0
 80010a4:	48a1      	ldr	r0, [pc, #644]	@ (800132c <main+0x2f4>)
 80010a6:	f007 f8c5 	bl	8008234 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim17);
 80010aa:	48a1      	ldr	r0, [pc, #644]	@ (8001330 <main+0x2f8>)
 80010ac:	f006 fff2 	bl	8008094 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart4, uart4_rx_data, sizeof(uart4_rx_data));
 80010b0:	2208      	movs	r2, #8
 80010b2:	49a0      	ldr	r1, [pc, #640]	@ (8001334 <main+0x2fc>)
 80010b4:	48a0      	ldr	r0, [pc, #640]	@ (8001338 <main+0x300>)
 80010b6:	f008 faf7 	bl	80096a8 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, uart3_rx_data, sizeof(uart3_rx_data));
 80010ba:	2208      	movs	r2, #8
 80010bc:	499f      	ldr	r1, [pc, #636]	@ (800133c <main+0x304>)
 80010be:	48a0      	ldr	r0, [pc, #640]	@ (8001340 <main+0x308>)
 80010c0:	f008 faf2 	bl	80096a8 <HAL_UART_Receive_DMA>

  Master_Tx_SPDO_Data.state=CHARGING_ON;
 80010c4:	4b9f      	ldr	r3, [pc, #636]	@ (8001344 <main+0x30c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
  Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_CURRENT;
 80010ca:	4b9e      	ldr	r3, [pc, #632]	@ (8001344 <main+0x30c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	715a      	strb	r2, [r3, #5]


  CAN_Master_Tx_Header.Identifier = CHARGING_MASTER_ID;
 80010d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001348 <main+0x310>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
  CAN_Master_Tx_Header.IdType = FDCAN_STANDARD_ID;
 80010d6:	4b9c      	ldr	r3, [pc, #624]	@ (8001348 <main+0x310>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  CAN_Master_Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 80010dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001348 <main+0x310>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  CAN_Master_Tx_Header.DataLength = FDCAN_DLC_BYTES_8;
 80010e2:	4b99      	ldr	r3, [pc, #612]	@ (8001348 <main+0x310>)
 80010e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010e8:	60da      	str	r2, [r3, #12]
  CAN_Master_Tx_Header.FDFormat = FDCAN_CLASSIC_CAN;
 80010ea:	4b97      	ldr	r3, [pc, #604]	@ (8001348 <main+0x310>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]

  CAN_Master_Tx_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80010f0:	4b95      	ldr	r3, [pc, #596]	@ (8001348 <main+0x310>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  CAN_Master_Tx_Header.BitRateSwitch = FDCAN_BRS_OFF;
 80010f6:	4b94      	ldr	r3, [pc, #592]	@ (8001348 <main+0x310>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  CAN_Master_Tx_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80010fc:	4b92      	ldr	r3, [pc, #584]	@ (8001348 <main+0x310>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  CAN_Master_Tx_Header.MessageMarker = 0;
 8001102:	4b91      	ldr	r3, [pc, #580]	@ (8001348 <main+0x310>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]

  CAN_Master_Tx_Data[0]=0x02;
 8001108:	4b90      	ldr	r3, [pc, #576]	@ (800134c <main+0x314>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(QCA_RS_GPIO_Port, QCA_RS_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	2104      	movs	r1, #4
 8001112:	488f      	ldr	r0, [pc, #572]	@ (8001350 <main+0x318>)
 8001114:	f005 f9b0 	bl	8006478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CP_SELECT_GPIO_Port, CP_SELECT_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2108      	movs	r1, #8
 800111c:	488d      	ldr	r0, [pc, #564]	@ (8001354 <main+0x31c>)
 800111e:	f005 f9ab 	bl	8006478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PP_SELECT_GPIO_Port, PP_SELECT_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2104      	movs	r1, #4
 8001126:	488b      	ldr	r0, [pc, #556]	@ (8001354 <main+0x31c>)
 8001128:	f005 f9a6 	bl	8006478 <HAL_GPIO_WritePin>


  //read list ID in flash
  uint64_t datareadfromflash[Maximum_number_of_IDs/8];
  readFlash(datareadfromflash, Maximum_number_of_IDs/8, 127, FLASH_BANK_1);
 800112c:	f107 0010 	add.w	r0, r7, #16
 8001130:	2301      	movs	r3, #1
 8001132:	227f      	movs	r2, #127	@ 0x7f
 8001134:	2101      	movs	r1, #1
 8001136:	f7ff fa9b 	bl	8000670 <readFlash>
  uint64_array_to_uint8_array_big_endian(datareadfromflash, Maximum_number_of_IDs/8, list_node_available);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4a86      	ldr	r2, [pc, #536]	@ (8001358 <main+0x320>)
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff faca 	bl	80006dc <uint64_array_to_uint8_array_big_endian>

  list_node_available[0]=ID_IN_USED;
 8001148:	4b83      	ldr	r3, [pc, #524]	@ (8001358 <main+0x320>)
 800114a:	22aa      	movs	r2, #170	@ 0xaa
 800114c:	701a      	strb	r2, [r3, #0]
  list_node_available[1]=ID_IN_USED;
 800114e:	4b82      	ldr	r3, [pc, #520]	@ (8001358 <main+0x320>)
 8001150:	22aa      	movs	r2, #170	@ 0xaa
 8001152:	705a      	strb	r2, [r3, #1]
  for(int i=2;i<Maximum_number_of_IDs;i++)
 8001154:	2302      	movs	r3, #2
 8001156:	677b      	str	r3, [r7, #116]	@ 0x74
 8001158:	e00d      	b.n	8001176 <main+0x13e>
  {
	  if(list_node_available[i]==0xFF) //reading error
 800115a:	4a7f      	ldr	r2, [pc, #508]	@ (8001358 <main+0x320>)
 800115c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2bff      	cmp	r3, #255	@ 0xff
 8001164:	d104      	bne.n	8001170 <main+0x138>
		  list_node_available[i]=ID_NOT_USED;
 8001166:	4a7c      	ldr	r2, [pc, #496]	@ (8001358 <main+0x320>)
 8001168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
  for(int i=2;i<Maximum_number_of_IDs;i++)
 8001170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001172:	3301      	adds	r3, #1
 8001174:	677b      	str	r3, [r7, #116]	@ 0x74
 8001176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001178:	2b07      	cmp	r3, #7
 800117a:	ddee      	ble.n	800115a <main+0x122>
  }

  //write list ID to flash
  uint64_t datawwritetoflash[Maximum_number_of_IDs/8];
  uint8_array_to_uint64_array_big_endian(list_node_available, Maximum_number_of_IDs/8, datawwritetoflash);
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	461a      	mov	r2, r3
 8001182:	2101      	movs	r1, #1
 8001184:	4874      	ldr	r0, [pc, #464]	@ (8001358 <main+0x320>)
 8001186:	f7ff faeb 	bl	8000760 <uint8_array_to_uint64_array_big_endian>
  writeFlash(datawwritetoflash, Maximum_number_of_IDs/8, 127, FLASH_BANK_1);
 800118a:	f107 0008 	add.w	r0, r7, #8
 800118e:	2301      	movs	r3, #1
 8001190:	227f      	movs	r2, #127	@ 0x7f
 8001192:	2101      	movs	r1, #1
 8001194:	f7ff fa14 	bl	80005c0 <writeFlash>

  for(int i=2;i<Maximum_number_of_IDs;i++) list_node_update[i]=0;		//the last time node communicated with CIMS, updated when node communicate
 8001198:	2302      	movs	r3, #2
 800119a:	673b      	str	r3, [r7, #112]	@ 0x70
 800119c:	e007      	b.n	80011ae <main+0x176>
 800119e:	4a6f      	ldr	r2, [pc, #444]	@ (800135c <main+0x324>)
 80011a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011a2:	2100      	movs	r1, #0
 80011a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80011a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011aa:	3301      	adds	r3, #1
 80011ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80011ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	ddf4      	ble.n	800119e <main+0x166>
  for(int i=2;i<Maximum_number_of_IDs;i++) previoustick_slave[i]=0;		//time to check how long node had disconnected with CIMS, updated by timer
 80011b4:	2302      	movs	r3, #2
 80011b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011b8:	e007      	b.n	80011ca <main+0x192>
 80011ba:	4a69      	ldr	r2, [pc, #420]	@ (8001360 <main+0x328>)
 80011bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011be:	2100      	movs	r1, #0
 80011c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80011c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011c6:	3301      	adds	r3, #1
 80011c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	ddf4      	ble.n	80011ba <main+0x182>

  for(int i=0;i<Maximum_number_of_Slave;i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80011d4:	e00c      	b.n	80011f0 <main+0x1b8>
	  Reset_Data(&Slave_Data[i]);
 80011d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4a60      	ldr	r2, [pc, #384]	@ (8001364 <main+0x32c>)
 80011e2:	4413      	add	r3, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 f9ac 	bl	8002542 <Reset_Data>
  for(int i=0;i<Maximum_number_of_Slave;i++)
 80011ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011ec:	3301      	adds	r3, #1
 80011ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80011f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	ddef      	ble.n	80011d6 <main+0x19e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint16_t c=30;
 80011f6:	231e      	movs	r3, #30
 80011f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t v=600;
 80011fa:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80011fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint16_t t=50;
 8001200:	2332      	movs	r3, #50	@ 0x32
 8001202:	857b      	strh	r3, [r7, #42]	@ 0x2a
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint16_t c=30;
 8001204:	231e      	movs	r3, #30
 8001206:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		uint16_t v=600;
 800120a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800120e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		uint16_t t=50;
 8001212:	2332      	movs	r3, #50	@ 0x32
 8001214:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	TIM1->CCR1=50;
 8001218:	4b53      	ldr	r3, [pc, #332]	@ (8001368 <main+0x330>)
 800121a:	2232      	movs	r2, #50	@ 0x32
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34
	uint32_t currenttick = HAL_GetTick(); // Lưu th�?i điểm bắt đầu
 800121e:	f001 fee3 	bl	8002fe8 <HAL_GetTick>
 8001222:	6278      	str	r0, [r7, #36]	@ 0x24



	if((currenttick-previoustick_calculate)>=TPDO_Event_Time)	//timer 100ms
 8001224:	4b51      	ldr	r3, [pc, #324]	@ (800136c <main+0x334>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b63      	cmp	r3, #99	@ 0x63
 800122e:	d951      	bls.n	80012d4 <main+0x29c>
	{
		previoustick_calculate=currenttick;
 8001230:	4a4e      	ldr	r2, [pc, #312]	@ (800136c <main+0x334>)
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < can_node_number; ++i)
 8001236:	2300      	movs	r3, #0
 8001238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800123a:	e012      	b.n	8001262 <main+0x22a>
		{
//			c=c+ Slave_Data[i].current_value;
//			v=v+ Slave_Data[i].voltage_value;
//			t=t+ Slave_Data[i].temperature_value;
			c=c+ 15;
 800123c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001240:	330f      	adds	r3, #15
 8001242:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
			v=v+ 300;
 8001246:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800124a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800124e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
			t=t+ 25;
 8001252:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001256:	3319      	adds	r3, #25
 8001258:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		for (int i = 0; i < can_node_number; ++i)
 800125c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800125e:	3301      	adds	r3, #1
 8001260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001262:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <main+0x338>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001268:	429a      	cmp	r2, r3
 800126a:	dbe7      	blt.n	800123c <main+0x204>
		}
		uint32_t period=currenttick-previoustick_calculate;
 800126c:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <main+0x334>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	623b      	str	r3, [r7, #32]
		//tinh toan cong suat va nang luong tieu thu
		Voltage=v;							//dien ap
 8001276:	4a3f      	ldr	r2, [pc, #252]	@ (8001374 <main+0x33c>)
 8001278:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800127c:	8013      	strh	r3, [r2, #0]
		Current=c;							//dong dien
 800127e:	4a3e      	ldr	r2, [pc, #248]	@ (8001378 <main+0x340>)
 8001280:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001284:	8013      	strh	r3, [r2, #0]
		Temperature=t+random_number()-random_number();						//nhiet do
 8001286:	f7ff fb59 	bl	800093c <random_number>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001292:	4413      	add	r3, r2
 8001294:	b29c      	uxth	r4, r3
 8001296:	f7ff fb51 	bl	800093c <random_number>
 800129a:	4603      	mov	r3, r0
 800129c:	1ae3      	subs	r3, r4, r3
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b36      	ldr	r3, [pc, #216]	@ (800137c <main+0x344>)
 80012a2:	801a      	strh	r2, [r3, #0]
		uint32_t p=c*v;						//cong suat
 80012a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80012a8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	61fb      	str	r3, [r7, #28]
		Energy+=p*period;					//nang luong
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	fb12 f303 	smulbb	r3, r2, r3
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <main+0x348>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <main+0x348>)
 80012ca:	801a      	strh	r2, [r3, #0]
		//set duty cho PWM
		uint32_t duty;
//		if(myEV.charging_current_request<51) duty=myEV.charging_current_request*5/3;
//		else if(myEV.charging_current_request<80) duty=(myEV.charging_current_request*2/5)+64;
//		TIM1->CCR1=duty;	//duty
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <main+0x2f4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2232      	movs	r2, #50	@ 0x32
 80012d2:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	//EV state timer 1s
	if((currenttick-previoustick_SPI)>=TPDO_Event_Time*10)
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <main+0x34c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012e0:	f0c0 8136 	bcc.w	8001550 <main+0x518>
	{
		previoustick_SPI=currenttick;
 80012e4:	4a27      	ldr	r2, [pc, #156]	@ (8001384 <main+0x34c>)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	6013      	str	r3, [r2, #0]

		EVstate=PEF_Get_Sequence_State();
 80012ea:	f00a ff07 	bl	800c0fc <PEF_Get_Sequence_State>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <main+0x350>)
 80012f4:	801a      	strh	r2, [r3, #0]
		switch(EVstate)
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <main+0x350>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	f24c 1217 	movw	r2, #49431	@ 0xc117
 80012fe:	4293      	cmp	r3, r2
 8001300:	f300 8126 	bgt.w	8001550 <main+0x518>
 8001304:	f24c 120c 	movw	r2, #49420	@ 0xc10c
 8001308:	4293      	cmp	r3, r2
 800130a:	da3f      	bge.n	800138c <main+0x354>
 800130c:	f24b 0209 	movw	r2, #45065	@ 0xb009
 8001310:	4293      	cmp	r3, r2
 8001312:	f300 809f 	bgt.w	8001454 <main+0x41c>
 8001316:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 800131a:	da7f      	bge.n	800141c <main+0x3e4>
 800131c:	e118      	b.n	8001550 <main+0x518>
 800131e:	bf00      	nop
 8001320:	20000140 	.word	0x20000140
 8001324:	20000640 	.word	0x20000640
 8001328:	20000610 	.word	0x20000610
 800132c:	20000208 	.word	0x20000208
 8001330:	20000254 	.word	0x20000254
 8001334:	200005d4 	.word	0x200005d4
 8001338:	200002a0 	.word	0x200002a0
 800133c:	200005dc 	.word	0x200005dc
 8001340:	20000450 	.word	0x20000450
 8001344:	20000648 	.word	0x20000648
 8001348:	200005ec 	.word	0x200005ec
 800134c:	20000638 	.word	0x20000638
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	200006bc 	.word	0x200006bc
 800135c:	200006c4 	.word	0x200006c4
 8001360:	200005a0 	.word	0x200005a0
 8001364:	20000668 	.word	0x20000668
 8001368:	40012c00 	.word	0x40012c00
 800136c:	200005cc 	.word	0x200005cc
 8001370:	20000000 	.word	0x20000000
 8001374:	200006fa 	.word	0x200006fa
 8001378:	20000004 	.word	0x20000004
 800137c:	20000006 	.word	0x20000006
 8001380:	200006fc 	.word	0x200006fc
 8001384:	200005c8 	.word	0x200005c8
 8001388:	200006f8 	.word	0x200006f8
 800138c:	f5a3 4341 	sub.w	r3, r3, #49408	@ 0xc100
 8001390:	3b0c      	subs	r3, #12
 8001392:	2b0b      	cmp	r3, #11
 8001394:	f200 80dc 	bhi.w	8001550 <main+0x518>
 8001398:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <main+0x368>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	08001551 	.word	0x08001551
 80013a4:	080014c5 	.word	0x080014c5
 80013a8:	08001551 	.word	0x08001551
 80013ac:	08001551 	.word	0x08001551
 80013b0:	080014e3 	.word	0x080014e3
 80013b4:	08001551 	.word	0x08001551
 80013b8:	08001551 	.word	0x08001551
 80013bc:	08001551 	.word	0x08001551
 80013c0:	080014f5 	.word	0x080014f5
 80013c4:	08001551 	.word	0x08001551
 80013c8:	08001551 	.word	0x08001551
 80013cc:	08001551 	.word	0x08001551
 80013d0:	f5a3 4332 	sub.w	r3, r3, #45568	@ 0xb200
 80013d4:	3b18      	subs	r3, #24
 80013d6:	2b0d      	cmp	r3, #13
 80013d8:	f200 80ba 	bhi.w	8001550 <main+0x518>
 80013dc:	a201      	add	r2, pc, #4	@ (adr r2, 80013e4 <main+0x3ac>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	08001551 	.word	0x08001551
 80013e8:	08001551 	.word	0x08001551
 80013ec:	08001551 	.word	0x08001551
 80013f0:	08001551 	.word	0x08001551
 80013f4:	08001551 	.word	0x08001551
 80013f8:	08001551 	.word	0x08001551
 80013fc:	08001551 	.word	0x08001551
 8001400:	08001551 	.word	0x08001551
 8001404:	08001551 	.word	0x08001551
 8001408:	08001551 	.word	0x08001551
 800140c:	08001551 	.word	0x08001551
 8001410:	08001551 	.word	0x08001551
 8001414:	08001551 	.word	0x08001551
 8001418:	08001513 	.word	0x08001513
 800141c:	f5a3 4330 	sub.w	r3, r3, #45056	@ 0xb000
 8001420:	2b09      	cmp	r3, #9
 8001422:	f200 8095 	bhi.w	8001550 <main+0x518>
 8001426:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <main+0x3f4>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	08001551 	.word	0x08001551
 8001430:	08001551 	.word	0x08001551
 8001434:	08001551 	.word	0x08001551
 8001438:	08001551 	.word	0x08001551
 800143c:	08001467 	.word	0x08001467
 8001440:	08001551 	.word	0x08001551
 8001444:	08001551 	.word	0x08001551
 8001448:	08001551 	.word	0x08001551
 800144c:	080014b9 	.word	0x080014b9
 8001450:	08001551 	.word	0x08001551
 8001454:	f24b 2225 	movw	r2, #45605	@ 0xb225
 8001458:	4293      	cmp	r3, r2
 800145a:	dc79      	bgt.n	8001550 <main+0x518>
 800145c:	f24b 2218 	movw	r2, #45592	@ 0xb218
 8001460:	4293      	cmp	r3, r2
 8001462:	dab5      	bge.n	80013d0 <main+0x398>
 8001464:	e074      	b.n	8001550 <main+0x518>
		case INITIALIZATION + STATE_B + COMMUNICATION_INIT + CONFIRM:
			break;

		case INITIALIZATION + STATE_B + PARAMETER_EXCHANGE + REQUEST:
			//HMI_Compose_Pre_Charge_Parm(HMI_COMPATIBLE, myEV.control_protocol_number); 		HMI_Print();
			HMI_Compose_Pre_Charge_Parm(HMI_CAR_MODEL, myEV.control_protocol_number); 		HMI_Print();
 8001466:	4b9c      	ldr	r3, [pc, #624]	@ (80016d8 <main+0x6a0>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	2035      	movs	r0, #53	@ 0x35
 800146e:	f009 fd7f 	bl	800af70 <HMI_Compose_Pre_Charge_Parm>
 8001472:	f7ff fab7 	bl	80009e4 <HMI_Print>
			HMI_Compose_Pre_Charge_Parm(HMI_BATTERY_CAPACITY, myEV.rate_capacity_battery);	HMI_Print();
 8001476:	4b98      	ldr	r3, [pc, #608]	@ (80016d8 <main+0x6a0>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	4619      	mov	r1, r3
 800147c:	2031      	movs	r0, #49	@ 0x31
 800147e:	f009 fd77 	bl	800af70 <HMI_Compose_Pre_Charge_Parm>
 8001482:	f7ff faaf 	bl	80009e4 <HMI_Print>
			HMI_Compose_Pre_Charge_Parm(HMI_CURRENT_BATTERY, myEV.current_battery);			HMI_Print();
 8001486:	4b94      	ldr	r3, [pc, #592]	@ (80016d8 <main+0x6a0>)
 8001488:	789b      	ldrb	r3, [r3, #2]
 800148a:	4619      	mov	r1, r3
 800148c:	2032      	movs	r0, #50	@ 0x32
 800148e:	f009 fd6f 	bl	800af70 <HMI_Compose_Pre_Charge_Parm>
 8001492:	f7ff faa7 	bl	80009e4 <HMI_Print>
			HMI_Compose_Pre_Charge_Parm(HMI_BATTERY_VOLTAGE, myEV.max_battery_voltage);		HMI_Print();
 8001496:	4b90      	ldr	r3, [pc, #576]	@ (80016d8 <main+0x6a0>)
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	4619      	mov	r1, r3
 800149c:	2033      	movs	r0, #51	@ 0x33
 800149e:	f009 fd67 	bl	800af70 <HMI_Compose_Pre_Charge_Parm>
 80014a2:	f7ff fa9f 	bl	80009e4 <HMI_Print>
			HMI_Compose_Pre_Charge_Parm(HMI_CHARGING_TIME, myEV.max_charging_time);			HMI_Print();
 80014a6:	4b8c      	ldr	r3, [pc, #560]	@ (80016d8 <main+0x6a0>)
 80014a8:	88db      	ldrh	r3, [r3, #6]
 80014aa:	4619      	mov	r1, r3
 80014ac:	2034      	movs	r0, #52	@ 0x34
 80014ae:	f009 fd5f 	bl	800af70 <HMI_Compose_Pre_Charge_Parm>
 80014b2:	f7ff fa97 	bl	80009e4 <HMI_Print>
			break;
 80014b6:	e04b      	b.n	8001550 <main+0x518>
		case INITIALIZATION + STATE_B + PARAMETER_EXCHANGE + CONFIRM:
			break;

		case INITIALIZATION + STATE_B + EVSE_CONNECTOR_LOCK + REQUEST:
			//gui connected len HMI
			HMI_Compose_Status(HMI_CONNECT);	HMI_Print();
 80014b8:	2011      	movs	r0, #17
 80014ba:	f009 fdfd 	bl	800b0b8 <HMI_Compose_Status>
 80014be:	f7ff fa91 	bl	80009e4 <HMI_Print>
			break;
 80014c2:	e045      	b.n	8001550 <main+0x518>

			break;

		case ENERGY_TRANSFER + STATE_C + EV_CONTACTOR_CLOSE + CONFIRM:
			//gui ready len HMI, vao trang theo doi realtime data
			CAN_Master_Tx_Data[0]=0x02;
 80014c4:	4b85      	ldr	r3, [pc, #532]	@ (80016dc <main+0x6a4>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	701a      	strb	r2, [r3, #0]
			can_setting_confirm_flag=0;
 80014ca:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <main+0x6a8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
			Master_Tx_SPDO_Data.state=CHARGING_ON;
 80014d0:	4b84      	ldr	r3, [pc, #528]	@ (80016e4 <main+0x6ac>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
			HMI_Compose_Status(HMI_READY);	HMI_Print();
 80014d6:	2012      	movs	r0, #18
 80014d8:	f009 fdee 	bl	800b0b8 <HMI_Compose_Status>
 80014dc:	f7ff fa82 	bl	80009e4 <HMI_Print>
			break;
 80014e0:	e036      	b.n	8001550 <main+0x518>

		case ENERGY_TRANSFER + STATE_C + CHARGING_CURRENT_DEMAND + REQUEST:
			//gui cac cai dat qua CAN
			HMI_Compose_Pre_Charge_Parm(HMI_CURRENT_BATTERY, myEV.current_battery);
 80014e2:	4b7d      	ldr	r3, [pc, #500]	@ (80016d8 <main+0x6a0>)
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	4619      	mov	r1, r3
 80014e8:	2032      	movs	r0, #50	@ 0x32
 80014ea:	f009 fd41 	bl	800af70 <HMI_Compose_Pre_Charge_Parm>
			HMI_Print();
 80014ee:	f7ff fa79 	bl	80009e4 <HMI_Print>
			break;
 80014f2:	e02d      	b.n	8001550 <main+0x518>
		case ENERGY_TRANSFER + STATE_C + CHARGING_CURRENT_DEMAND + RESPONSE:

			break;

		case ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + REQUEST:
			can_setting_confirm_flag=0;
 80014f4:	4b7a      	ldr	r3, [pc, #488]	@ (80016e0 <main+0x6a8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
			CAN_Master_Tx_Data[0]=0x02;
 80014fa:	4b78      	ldr	r3, [pc, #480]	@ (80016dc <main+0x6a4>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	701a      	strb	r2, [r3, #0]
			Master_Tx_SPDO_Data.state=CHARGING_OFF;
 8001500:	4b78      	ldr	r3, [pc, #480]	@ (80016e4 <main+0x6ac>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
			HMI_Compose_Status(HMI_STOP);	HMI_Print();
 8001506:	2010      	movs	r0, #16
 8001508:	f009 fdd6 	bl	800b0b8 <HMI_Compose_Status>
 800150c:	f7ff fa6a 	bl	80009e4 <HMI_Print>
			break;
 8001510:	e01e      	b.n	8001550 <main+0x518>

			break;

		case SHUT_DOWN + STATE_B + END_OF_CHARGE + CONFIRM:
			//PEF_Handle_End_of_Charge_Cnf();
			uart_flag=0;
 8001512:	4b75      	ldr	r3, [pc, #468]	@ (80016e8 <main+0x6b0>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
			button_flag=0;
 8001518:	4b74      	ldr	r3, [pc, #464]	@ (80016ec <main+0x6b4>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
			button_flag2=0;
 800151e:	4b74      	ldr	r3, [pc, #464]	@ (80016f0 <main+0x6b8>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
			can_flag=0;
 8001524:	4b73      	ldr	r3, [pc, #460]	@ (80016f4 <main+0x6bc>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
			can_setting_confirm_flag=0;
 800152a:	4b6d      	ldr	r3, [pc, #436]	@ (80016e0 <main+0x6a8>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
			Reset_Data(&Master_Tx_SPDO_Data);
 8001530:	486c      	ldr	r0, [pc, #432]	@ (80016e4 <main+0x6ac>)
 8001532:	f001 f806 	bl	8002542 <Reset_Data>
			Master_Tx_SPDO_Data.state=CHARGING_ON;
 8001536:	4b6b      	ldr	r3, [pc, #428]	@ (80016e4 <main+0x6ac>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
			Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_CURRENT;
 800153c:	4b69      	ldr	r3, [pc, #420]	@ (80016e4 <main+0x6ac>)
 800153e:	2201      	movs	r2, #1
 8001540:	715a      	strb	r2, [r3, #5]
			CAN_Master_Tx_Data[0]=0x02;
 8001542:	4b66      	ldr	r3, [pc, #408]	@ (80016dc <main+0x6a4>)
 8001544:	2202      	movs	r2, #2
 8001546:	701a      	strb	r2, [r3, #0]
			Reset_Data(&Master_Rx_SPDO_Data);
 8001548:	486b      	ldr	r0, [pc, #428]	@ (80016f8 <main+0x6c0>)
 800154a:	f000 fffa 	bl	8002542 <Reset_Data>
			break;
 800154e:	bf00      	nop
		}
	  }
	//end timer 1s

	//timer 100ms CAN BUS
	if((currenttick-previoustick_CAN)>=TPDO_Event_Time)
 8001550:	4b6a      	ldr	r3, [pc, #424]	@ (80016fc <main+0x6c4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b63      	cmp	r3, #99	@ 0x63
 800155a:	f240 81af 	bls.w	80018bc <main+0x884>
	{
		previoustick_CAN=currenttick;
 800155e:	4a67      	ldr	r2, [pc, #412]	@ (80016fc <main+0x6c4>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	6013      	str	r3, [r2, #0]
		//lam viec voi cac trang thai EVSE
		//gui setting Data qua CAN Bus
		if(EVstate==(ENERGY_TRANSFER + STATE_C + CHARGING_CURRENT_DEMAND + REQUEST))	//setting theo EV, SPI CCC REQ
 8001564:	4b66      	ldr	r3, [pc, #408]	@ (8001700 <main+0x6c8>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	f24c 1210 	movw	r2, #49424	@ 0xc110
 800156c:	4293      	cmp	r3, r2
 800156e:	f040 8097 	bne.w	80016a0 <main+0x668>
		{
			if(can_setting_confirm_flag<can_node_number*4)	//setting CAN
 8001572:	4b64      	ldr	r3, [pc, #400]	@ (8001704 <main+0x6cc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	009a      	lsls	r2, r3, #2
 8001578:	4b59      	ldr	r3, [pc, #356]	@ (80016e0 <main+0x6a8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	dd72      	ble.n	8001666 <main+0x62e>
			{
				Master_Tx_SPDO_Data.function=CHARGING_SETTING;
 8001580:	4b58      	ldr	r3, [pc, #352]	@ (80016e4 <main+0x6ac>)
 8001582:	2203      	movs	r2, #3
 8001584:	705a      	strb	r2, [r3, #1]
				Master_Tx_SPDO_Data.current_value=myEV.charging_current_request/can_node_number;
 8001586:	4b54      	ldr	r3, [pc, #336]	@ (80016d8 <main+0x6a0>)
 8001588:	899b      	ldrh	r3, [r3, #12]
 800158a:	461a      	mov	r2, r3
 800158c:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <main+0x6cc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	fb92 f3f3 	sdiv	r3, r2, r3
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b53      	ldr	r3, [pc, #332]	@ (80016e4 <main+0x6ac>)
 8001598:	811a      	strh	r2, [r3, #8]
				Master_Tx_SPDO_Data.voltage_value=600/can_node_number;
 800159a:	4b5a      	ldr	r3, [pc, #360]	@ (8001704 <main+0x6cc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80015a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <main+0x6ac>)
 80015aa:	80da      	strh	r2, [r3, #6]
//				PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
//				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
				for(int i=0x02;i<(0x02+can_node_number);i++)
 80015ac:	2302      	movs	r3, #2
 80015ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015b0:	e052      	b.n	8001658 <main+0x620>
				{
					CAN_Master_Tx_Data[0]=i;
 80015b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b49      	ldr	r3, [pc, #292]	@ (80016dc <main+0x6a4>)
 80015b8:	701a      	strb	r2, [r3, #0]
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_CURRENT;
 80015ba:	4b4a      	ldr	r3, [pc, #296]	@ (80016e4 <main+0x6ac>)
 80015bc:	2201      	movs	r2, #1
 80015be:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 80015c0:	4b48      	ldr	r3, [pc, #288]	@ (80016e4 <main+0x6ac>)
 80015c2:	899a      	ldrh	r2, [r3, #12]
 80015c4:	f8ad 2000 	strh.w	r2, [sp]
 80015c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ca:	4844      	ldr	r0, [pc, #272]	@ (80016dc <main+0x6a4>)
 80015cc:	f000 fea4 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 80015d0:	4a42      	ldr	r2, [pc, #264]	@ (80016dc <main+0x6a4>)
 80015d2:	494d      	ldr	r1, [pc, #308]	@ (8001708 <main+0x6d0>)
 80015d4:	484d      	ldr	r0, [pc, #308]	@ (800170c <main+0x6d4>)
 80015d6:	f003 fe9d 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 80015da:	2064      	movs	r0, #100	@ 0x64
 80015dc:	f001 fd10 	bl	8003000 <HAL_Delay>
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_VOLTAGE;
 80015e0:	4b40      	ldr	r3, [pc, #256]	@ (80016e4 <main+0x6ac>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 80015e6:	4b3f      	ldr	r3, [pc, #252]	@ (80016e4 <main+0x6ac>)
 80015e8:	899a      	ldrh	r2, [r3, #12]
 80015ea:	f8ad 2000 	strh.w	r2, [sp]
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	483a      	ldr	r0, [pc, #232]	@ (80016dc <main+0x6a4>)
 80015f2:	f000 fe91 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 80015f6:	4a39      	ldr	r2, [pc, #228]	@ (80016dc <main+0x6a4>)
 80015f8:	4943      	ldr	r1, [pc, #268]	@ (8001708 <main+0x6d0>)
 80015fa:	4844      	ldr	r0, [pc, #272]	@ (800170c <main+0x6d4>)
 80015fc:	f003 fe8a 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 8001600:	2064      	movs	r0, #100	@ 0x64
 8001602:	f001 fcfd 	bl	8003000 <HAL_Delay>
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_TEMPERATURE;
 8001606:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <main+0x6ac>)
 8001608:	2203      	movs	r2, #3
 800160a:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 800160c:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <main+0x6ac>)
 800160e:	899a      	ldrh	r2, [r3, #12]
 8001610:	f8ad 2000 	strh.w	r2, [sp]
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	4831      	ldr	r0, [pc, #196]	@ (80016dc <main+0x6a4>)
 8001618:	f000 fe7e 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 800161c:	4a2f      	ldr	r2, [pc, #188]	@ (80016dc <main+0x6a4>)
 800161e:	493a      	ldr	r1, [pc, #232]	@ (8001708 <main+0x6d0>)
 8001620:	483a      	ldr	r0, [pc, #232]	@ (800170c <main+0x6d4>)
 8001622:	f003 fe77 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 8001626:	2064      	movs	r0, #100	@ 0x64
 8001628:	f001 fcea 	bl	8003000 <HAL_Delay>
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_TIME;
 800162c:	4b2d      	ldr	r3, [pc, #180]	@ (80016e4 <main+0x6ac>)
 800162e:	2204      	movs	r2, #4
 8001630:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 8001632:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <main+0x6ac>)
 8001634:	899a      	ldrh	r2, [r3, #12]
 8001636:	f8ad 2000 	strh.w	r2, [sp]
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	4827      	ldr	r0, [pc, #156]	@ (80016dc <main+0x6a4>)
 800163e:	f000 fe6b 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 8001642:	4a26      	ldr	r2, [pc, #152]	@ (80016dc <main+0x6a4>)
 8001644:	4930      	ldr	r1, [pc, #192]	@ (8001708 <main+0x6d0>)
 8001646:	4831      	ldr	r0, [pc, #196]	@ (800170c <main+0x6d4>)
 8001648:	f003 fe64 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 800164c:	2064      	movs	r0, #100	@ 0x64
 800164e:	f001 fcd7 	bl	8003000 <HAL_Delay>
				for(int i=0x02;i<(0x02+can_node_number);i++)
 8001652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001654:	3301      	adds	r3, #1
 8001656:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001658:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <main+0x6cc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001660:	429a      	cmp	r2, r3
 8001662:	dda6      	ble.n	80015b2 <main+0x57a>
 8001664:	e01c      	b.n	80016a0 <main+0x668>
				}
			}
			else		//setting done, request data
			{
				Master_Tx_SPDO_Data.function=CHARGING_REQUEST;
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <main+0x6ac>)
 8001668:	2201      	movs	r2, #1
 800166a:	705a      	strb	r2, [r3, #1]
				changeTypeOfValue(&(Master_Tx_SPDO_Data.type_of_value));//change question to slave
 800166c:	4828      	ldr	r0, [pc, #160]	@ (8001710 <main+0x6d8>)
 800166e:	f000 ff1d 	bl	80024ac <changeTypeOfValue>
				//change Destination ID from 0x02 to 0x07
				UpdateCANMasterTxDesID(0x02, can_node_number+1 , &Master_Tx_SPDO_Data, CAN_Master_Tx_Data);
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <main+0x6cc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3301      	adds	r3, #1
 800167a:	b2d9      	uxtb	r1, r3
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <main+0x6a4>)
 800167e:	4a19      	ldr	r2, [pc, #100]	@ (80016e4 <main+0x6ac>)
 8001680:	2002      	movs	r0, #2
 8001682:	f000 ff3d 	bl	8002500 <UpdateCANMasterTxDesID>
				PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 8001686:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <main+0x6ac>)
 8001688:	899a      	ldrh	r2, [r3, #12]
 800168a:	f8ad 2000 	strh.w	r2, [sp]
 800168e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001690:	4812      	ldr	r0, [pc, #72]	@ (80016dc <main+0x6a4>)
 8001692:	f000 fe41 	bl	8002318 <PDO_set_data_frame>
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 8001696:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <main+0x6a4>)
 8001698:	491b      	ldr	r1, [pc, #108]	@ (8001708 <main+0x6d0>)
 800169a:	481c      	ldr	r0, [pc, #112]	@ (800170c <main+0x6d4>)
 800169c:	f003 fe3a 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}

		if(EVstate==(ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + CONFIRM))	//setting ve 0, current suppresion CNF
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <main+0x6c8>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	f24c 1215 	movw	r2, #49429	@ 0xc115
 80016a8:	4293      	cmp	r3, r2
 80016aa:	f040 80aa 	bne.w	8001802 <main+0x7ca>
		{
			if(can_setting_confirm_flag<can_node_number*4)	//setting CAN
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <main+0x6cc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	009a      	lsls	r2, r3, #2
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <main+0x6a8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	f340 8085 	ble.w	80017c8 <main+0x790>
			{
				Master_Tx_SPDO_Data.function=CHARGING_SETTING;
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <main+0x6ac>)
 80016c0:	2203      	movs	r2, #3
 80016c2:	705a      	strb	r2, [r3, #1]
				Master_Tx_SPDO_Data.current_value=0;
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <main+0x6ac>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	811a      	strh	r2, [r3, #8]
				Master_Tx_SPDO_Data.voltage_value=0;
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <main+0x6ac>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	80da      	strh	r2, [r3, #6]
//				PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
//				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
				for(int i=0x02;i<(0x02+can_node_number);i++)
 80016d0:	2302      	movs	r3, #2
 80016d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80016d4:	e071      	b.n	80017ba <main+0x782>
 80016d6:	bf00      	nop
 80016d8:	200022e0 	.word	0x200022e0
 80016dc:	20000638 	.word	0x20000638
 80016e0:	200006f4 	.word	0x200006f4
 80016e4:	20000648 	.word	0x20000648
 80016e8:	200006e4 	.word	0x200006e4
 80016ec:	200006e8 	.word	0x200006e8
 80016f0:	200006ec 	.word	0x200006ec
 80016f4:	200006f0 	.word	0x200006f0
 80016f8:	20000658 	.word	0x20000658
 80016fc:	200005d0 	.word	0x200005d0
 8001700:	200006f8 	.word	0x200006f8
 8001704:	20000000 	.word	0x20000000
 8001708:	200005ec 	.word	0x200005ec
 800170c:	20000140 	.word	0x20000140
 8001710:	2000064d 	.word	0x2000064d
				{
					CAN_Master_Tx_Data[0]=i;
 8001714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b97      	ldr	r3, [pc, #604]	@ (8001978 <main+0x940>)
 800171a:	701a      	strb	r2, [r3, #0]
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_CURRENT;
 800171c:	4b97      	ldr	r3, [pc, #604]	@ (800197c <main+0x944>)
 800171e:	2201      	movs	r2, #1
 8001720:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 8001722:	4b96      	ldr	r3, [pc, #600]	@ (800197c <main+0x944>)
 8001724:	899a      	ldrh	r2, [r3, #12]
 8001726:	f8ad 2000 	strh.w	r2, [sp]
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	4892      	ldr	r0, [pc, #584]	@ (8001978 <main+0x940>)
 800172e:	f000 fdf3 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 8001732:	4a91      	ldr	r2, [pc, #580]	@ (8001978 <main+0x940>)
 8001734:	4992      	ldr	r1, [pc, #584]	@ (8001980 <main+0x948>)
 8001736:	4893      	ldr	r0, [pc, #588]	@ (8001984 <main+0x94c>)
 8001738:	f003 fdec 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 800173c:	2064      	movs	r0, #100	@ 0x64
 800173e:	f001 fc5f 	bl	8003000 <HAL_Delay>
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_VOLTAGE;
 8001742:	4b8e      	ldr	r3, [pc, #568]	@ (800197c <main+0x944>)
 8001744:	2202      	movs	r2, #2
 8001746:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 8001748:	4b8c      	ldr	r3, [pc, #560]	@ (800197c <main+0x944>)
 800174a:	899a      	ldrh	r2, [r3, #12]
 800174c:	f8ad 2000 	strh.w	r2, [sp]
 8001750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001752:	4889      	ldr	r0, [pc, #548]	@ (8001978 <main+0x940>)
 8001754:	f000 fde0 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 8001758:	4a87      	ldr	r2, [pc, #540]	@ (8001978 <main+0x940>)
 800175a:	4989      	ldr	r1, [pc, #548]	@ (8001980 <main+0x948>)
 800175c:	4889      	ldr	r0, [pc, #548]	@ (8001984 <main+0x94c>)
 800175e:	f003 fdd9 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 8001762:	2064      	movs	r0, #100	@ 0x64
 8001764:	f001 fc4c 	bl	8003000 <HAL_Delay>
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_TEMPERATURE;
 8001768:	4b84      	ldr	r3, [pc, #528]	@ (800197c <main+0x944>)
 800176a:	2203      	movs	r2, #3
 800176c:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 800176e:	4b83      	ldr	r3, [pc, #524]	@ (800197c <main+0x944>)
 8001770:	899a      	ldrh	r2, [r3, #12]
 8001772:	f8ad 2000 	strh.w	r2, [sp]
 8001776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001778:	487f      	ldr	r0, [pc, #508]	@ (8001978 <main+0x940>)
 800177a:	f000 fdcd 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 800177e:	4a7e      	ldr	r2, [pc, #504]	@ (8001978 <main+0x940>)
 8001780:	497f      	ldr	r1, [pc, #508]	@ (8001980 <main+0x948>)
 8001782:	4880      	ldr	r0, [pc, #512]	@ (8001984 <main+0x94c>)
 8001784:	f003 fdc6 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 8001788:	2064      	movs	r0, #100	@ 0x64
 800178a:	f001 fc39 	bl	8003000 <HAL_Delay>
					Master_Tx_SPDO_Data.type_of_value=CHARGING_DATA_TIME;
 800178e:	4b7b      	ldr	r3, [pc, #492]	@ (800197c <main+0x944>)
 8001790:	2204      	movs	r2, #4
 8001792:	715a      	strb	r2, [r3, #5]
					PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 8001794:	4b79      	ldr	r3, [pc, #484]	@ (800197c <main+0x944>)
 8001796:	899a      	ldrh	r2, [r3, #12]
 8001798:	f8ad 2000 	strh.w	r2, [sp]
 800179c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179e:	4876      	ldr	r0, [pc, #472]	@ (8001978 <main+0x940>)
 80017a0:	f000 fdba 	bl	8002318 <PDO_set_data_frame>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 80017a4:	4a74      	ldr	r2, [pc, #464]	@ (8001978 <main+0x940>)
 80017a6:	4976      	ldr	r1, [pc, #472]	@ (8001980 <main+0x948>)
 80017a8:	4876      	ldr	r0, [pc, #472]	@ (8001984 <main+0x94c>)
 80017aa:	f003 fdb3 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_Delay(100);
 80017ae:	2064      	movs	r0, #100	@ 0x64
 80017b0:	f001 fc26 	bl	8003000 <HAL_Delay>
				for(int i=0x02;i<(0x02+can_node_number);i++)
 80017b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b6:	3301      	adds	r3, #1
 80017b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ba:	4b73      	ldr	r3, [pc, #460]	@ (8001988 <main+0x950>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dda6      	ble.n	8001714 <main+0x6dc>
 80017c6:	e01c      	b.n	8001802 <main+0x7ca>
				}
			}
			else		//setting done, request data
			{
				Master_Tx_SPDO_Data.function=CHARGING_REQUEST;
 80017c8:	4b6c      	ldr	r3, [pc, #432]	@ (800197c <main+0x944>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	705a      	strb	r2, [r3, #1]
				changeTypeOfValue(&(Master_Tx_SPDO_Data.type_of_value));//change question to slave
 80017ce:	486f      	ldr	r0, [pc, #444]	@ (800198c <main+0x954>)
 80017d0:	f000 fe6c 	bl	80024ac <changeTypeOfValue>
				//change Destination ID from 0x02 to 0x07
				UpdateCANMasterTxDesID(0x02, can_node_number+1 , &Master_Tx_SPDO_Data, CAN_Master_Tx_Data);
 80017d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001988 <main+0x950>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	b2d9      	uxtb	r1, r3
 80017de:	4b66      	ldr	r3, [pc, #408]	@ (8001978 <main+0x940>)
 80017e0:	4a66      	ldr	r2, [pc, #408]	@ (800197c <main+0x944>)
 80017e2:	2002      	movs	r0, #2
 80017e4:	f000 fe8c 	bl	8002500 <UpdateCANMasterTxDesID>
				//UpdateCANMasterTxDesID(0x02, 0x03, &Master_Tx_SPDO_Data, CAN_Master_Tx_Data);
				PDO_set_data_frame(CAN_Master_Tx_Data,Master_Tx_SPDO_Data);
 80017e8:	4b64      	ldr	r3, [pc, #400]	@ (800197c <main+0x944>)
 80017ea:	899a      	ldrh	r2, [r3, #12]
 80017ec:	f8ad 2000 	strh.w	r2, [sp]
 80017f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f2:	4861      	ldr	r0, [pc, #388]	@ (8001978 <main+0x940>)
 80017f4:	f000 fd90 	bl	8002318 <PDO_set_data_frame>
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Master_Tx_Header, CAN_Master_Tx_Data);
 80017f8:	4a5f      	ldr	r2, [pc, #380]	@ (8001978 <main+0x940>)
 80017fa:	4961      	ldr	r1, [pc, #388]	@ (8001980 <main+0x948>)
 80017fc:	4861      	ldr	r0, [pc, #388]	@ (8001984 <main+0x94c>)
 80017fe:	f003 fd89 	bl	8005314 <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}

		//kiem tra id mat ket noi
		for(int i=2;i<Maximum_number_of_IDs;i++)			//kiem tra cac node ID co mat ket noi khong
 8001802:	2302      	movs	r3, #2
 8001804:	653b      	str	r3, [r7, #80]	@ 0x50
 8001806:	e03f      	b.n	8001888 <main+0x850>
		{
			if(list_node_available[i]==ID_IN_USED)			//ID dang danh dau co ket noi
 8001808:	4a61      	ldr	r2, [pc, #388]	@ (8001990 <main+0x958>)
 800180a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2baa      	cmp	r3, #170	@ 0xaa
 8001812:	d136      	bne.n	8001882 <main+0x84a>
			{
				previoustick_slave[i]=HAL_GetTick();
 8001814:	f001 fbe8 	bl	8002fe8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	495e      	ldr	r1, [pc, #376]	@ (8001994 <main+0x95c>)
 800181c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(previoustick_slave[i]-list_node_update[i]>Maximum_time_not_update_of_IDs)	//NOT UPDATED for more than 5000ms =5s
 8001822:	4a5c      	ldr	r2, [pc, #368]	@ (8001994 <main+0x95c>)
 8001824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800182a:	495b      	ldr	r1, [pc, #364]	@ (8001998 <main+0x960>)
 800182c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800182e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d922      	bls.n	8001882 <main+0x84a>
				{
					list_node_available[i]=ID_DISCONNECTED;		//id da mat ket noi, cho ket noi lại
 800183c:	4a54      	ldr	r2, [pc, #336]	@ (8001990 <main+0x958>)
 800183e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001840:	4413      	add	r3, r2
 8001842:	22bb      	movs	r2, #187	@ 0xbb
 8001844:	701a      	strb	r2, [r3, #0]
					Reset_Data(&Slave_Data[i-2]);				//reset data
 8001846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001848:	1e9a      	subs	r2, r3, #2
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4a52      	ldr	r2, [pc, #328]	@ (800199c <main+0x964>)
 8001854:	4413      	add	r3, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fe73 	bl	8002542 <Reset_Data>
					sprintf(serial_output_buffer,"Node ID= %d da mat ket noi ",i);
 800185c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800185e:	4950      	ldr	r1, [pc, #320]	@ (80019a0 <main+0x968>)
 8001860:	4850      	ldr	r0, [pc, #320]	@ (80019a4 <main+0x96c>)
 8001862:	f00a ffd5 	bl	800c810 <siprintf>
					Serial_Print();
 8001866:	f7ff f877 	bl	8000958 <Serial_Print>
					uint64_t datawwritetoflash[Maximum_number_of_IDs/8];
					uint8_array_to_uint64_array_big_endian(list_node_available, Maximum_number_of_IDs/8, datawwritetoflash);
 800186a:	463b      	mov	r3, r7
 800186c:	461a      	mov	r2, r3
 800186e:	2101      	movs	r1, #1
 8001870:	4847      	ldr	r0, [pc, #284]	@ (8001990 <main+0x958>)
 8001872:	f7fe ff75 	bl	8000760 <uint8_array_to_uint64_array_big_endian>
					writeFlash(datawwritetoflash, Maximum_number_of_IDs/8, 127, FLASH_BANK_1);
 8001876:	4638      	mov	r0, r7
 8001878:	2301      	movs	r3, #1
 800187a:	227f      	movs	r2, #127	@ 0x7f
 800187c:	2101      	movs	r1, #1
 800187e:	f7fe fe9f 	bl	80005c0 <writeFlash>
		for(int i=2;i<Maximum_number_of_IDs;i++)			//kiem tra cac node ID co mat ket noi khong
 8001882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001884:	3301      	adds	r3, #1
 8001886:	653b      	str	r3, [r7, #80]	@ 0x50
 8001888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800188a:	2b07      	cmp	r3, #7
 800188c:	ddbc      	ble.n	8001808 <main+0x7d0>
				}
			}
		}

		//dem so luong node dang ket noi
			int count=0;
 800188e:	2300      	movs	r3, #0
 8001890:	64fb      	str	r3, [r7, #76]	@ 0x4c
			for(int i=2;i<Maximum_number_of_IDs;i++)
 8001892:	2302      	movs	r3, #2
 8001894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001896:	e00b      	b.n	80018b0 <main+0x878>
			{
				if(list_node_available[i]==ID_IN_USED) count++;
 8001898:	4a3d      	ldr	r2, [pc, #244]	@ (8001990 <main+0x958>)
 800189a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2baa      	cmp	r3, #170	@ 0xaa
 80018a2:	d102      	bne.n	80018aa <main+0x872>
 80018a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018a6:	3301      	adds	r3, #1
 80018a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			for(int i=2;i<Maximum_number_of_IDs;i++)
 80018aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ac:	3301      	adds	r3, #1
 80018ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	ddf0      	ble.n	8001898 <main+0x860>
			}
			can_node_number=count;
 80018b6:	4a34      	ldr	r2, [pc, #208]	@ (8001988 <main+0x950>)
 80018b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ba:	6013      	str	r3, [r2, #0]


	//gui cac thong so dong dien, dien ap len HMI
	//timer 500ms cho HMI. gui realtime data

	if((currenttick-previoustick_HMI)>=TPDO_Event_Time*5)	//timer 500ms cho HMI. gui realtime data
 80018bc:	4b3a      	ldr	r3, [pc, #232]	@ (80019a8 <main+0x970>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018c8:	f0c0 8098 	bcc.w	80019fc <main+0x9c4>
	{
		previoustick_HMI=currenttick;
 80018cc:	4a36      	ldr	r2, [pc, #216]	@ (80019a8 <main+0x970>)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	6013      	str	r3, [r2, #0]
		if (
				(EVstate==(ENERGY_TRANSFER + STATE_C + CHARGING_CURRENT_DEMAND + REQUEST)) ||
 80018d2:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <main+0x974>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
		if (
 80018d6:	f24c 1210 	movw	r2, #49424	@ 0xc110
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00c      	beq.n	80018f8 <main+0x8c0>
				(EVstate==(ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + REQUEST) )	 ||
 80018de:	4b33      	ldr	r3, [pc, #204]	@ (80019ac <main+0x974>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
				(EVstate==(ENERGY_TRANSFER + STATE_C + CHARGING_CURRENT_DEMAND + REQUEST)) ||
 80018e2:	f24c 1214 	movw	r2, #49428	@ 0xc114
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d006      	beq.n	80018f8 <main+0x8c0>
				(EVstate==(ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + CONFIRM))
 80018ea:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <main+0x974>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
				(EVstate==(ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + REQUEST) )	 ||
 80018ee:	f24c 1215 	movw	r2, #49429	@ 0xc115
 80018f2:	4293      	cmp	r3, r2
 80018f4:	f040 8082 	bne.w	80019fc <main+0x9c4>
			)	//SPI CCC REQ, SPI Current suppression REQ, SPI Current suppression CNF
		{
			int check=0;	//kiem tra xem co node nao loi khong
 80018f8:	2300      	movs	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
			for(int i=0;i<can_node_number;i++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8001900:	e00f      	b.n	8001922 <main+0x8ea>
			{
				if(Slave_Data[i].state!=CHARGING_ON)
 8001902:	4926      	ldr	r1, [pc, #152]	@ (800199c <main+0x964>)
 8001904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	440b      	add	r3, r1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d002      	beq.n	800191c <main+0x8e4>
				{
					check++;
 8001916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001918:	3301      	adds	r3, #1
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
			for(int i=0;i<can_node_number;i++)
 800191c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800191e:	3301      	adds	r3, #1
 8001920:	643b      	str	r3, [r7, #64]	@ 0x40
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <main+0x950>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001928:	429a      	cmp	r2, r3
 800192a:	dbea      	blt.n	8001902 <main+0x8ca>
				}
			}

			if(check==0)	//khong co cai nao bi loi
 800192c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192e:	2b00      	cmp	r3, #0
 8001930:	d11f      	bne.n	8001972 <main+0x93a>
			{
					HMI_Compose_Realtime_Data(HMI_VOLTAGE, Voltage);	HMI_Print();
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <main+0x978>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	2000      	movs	r0, #0
 800193a:	f009 fb77 	bl	800b02c <HMI_Compose_Realtime_Data>
 800193e:	f7ff f851 	bl	80009e4 <HMI_Print>
					HMI_Compose_Realtime_Data(HMI_CURRENT, Current);	HMI_Print();
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <main+0x97c>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	2001      	movs	r0, #1
 800194a:	f009 fb6f 	bl	800b02c <HMI_Compose_Realtime_Data>
 800194e:	f7ff f849 	bl	80009e4 <HMI_Print>
					HMI_Compose_Realtime_Data(HMI_TEMP, Temperature);	HMI_Print();
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <main+0x980>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	2002      	movs	r0, #2
 800195a:	f009 fb67 	bl	800b02c <HMI_Compose_Realtime_Data>
 800195e:	f7ff f841 	bl	80009e4 <HMI_Print>
					HMI_Compose_Realtime_Data(HMI_IREF, myEV.charging_current_request); HMI_Print();
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <main+0x984>)
 8001964:	899b      	ldrh	r3, [r3, #12]
 8001966:	4619      	mov	r1, r3
 8001968:	2003      	movs	r0, #3
 800196a:	f009 fb5f 	bl	800b02c <HMI_Compose_Realtime_Data>
 800196e:	f7ff f839 	bl	80009e4 <HMI_Print>
			}
			//co it nhat 1 cai bi loi send error, arlam to HMI
			for(int i=0;i<can_node_number;i++)
 8001972:	2300      	movs	r3, #0
 8001974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001976:	e03c      	b.n	80019f2 <main+0x9ba>
 8001978:	20000638 	.word	0x20000638
 800197c:	20000648 	.word	0x20000648
 8001980:	200005ec 	.word	0x200005ec
 8001984:	20000140 	.word	0x20000140
 8001988:	20000000 	.word	0x20000000
 800198c:	2000064d 	.word	0x2000064d
 8001990:	200006bc 	.word	0x200006bc
 8001994:	200005a0 	.word	0x200005a0
 8001998:	200006c4 	.word	0x200006c4
 800199c:	20000668 	.word	0x20000668
 80019a0:	0800daf4 	.word	0x0800daf4
 80019a4:	20000708 	.word	0x20000708
 80019a8:	200005c0 	.word	0x200005c0
 80019ac:	200006f8 	.word	0x200006f8
 80019b0:	200006fa 	.word	0x200006fa
 80019b4:	20000004 	.word	0x20000004
 80019b8:	20000006 	.word	0x20000006
 80019bc:	200022e0 	.word	0x200022e0
			{
				if(Slave_Data[i].state!=CHARGING_ON && can_setting_confirm_flag>=can_node_number*4)
 80019c0:	4946      	ldr	r1, [pc, #280]	@ (8001adc <main+0xaa4>)
 80019c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	440b      	add	r3, r1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d00b      	beq.n	80019ec <main+0x9b4>
 80019d4:	4b42      	ldr	r3, [pc, #264]	@ (8001ae0 <main+0xaa8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	009a      	lsls	r2, r3, #2
 80019da:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <main+0xaac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dc04      	bgt.n	80019ec <main+0x9b4>
				{
					HMI_Compose_Status(HMI_ERROR_1);	HMI_Print();
 80019e2:	2025      	movs	r0, #37	@ 0x25
 80019e4:	f009 fb68 	bl	800b0b8 <HMI_Compose_Status>
 80019e8:	f7fe fffc 	bl	80009e4 <HMI_Print>
			for(int i=0;i<can_node_number;i++)
 80019ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ee:	3301      	adds	r3, #1
 80019f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <main+0xaa8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbe1      	blt.n	80019c0 <main+0x988>
				}
			}

		}
	}
	if((currenttick-previoustick_ESP)>=TPDO_Event_Time*200)	//timer 20s cho ESP. gui realtime data
 80019fc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <main+0xab0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	f67f abfb 	bls.w	8001204 <main+0x1cc>
	{
		previoustick_ESP=currenttick;
 8001a0e:	4a36      	ldr	r2, [pc, #216]	@ (8001ae8 <main+0xab0>)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	6013      	str	r3, [r2, #0]
		if (
				(EVstate==(ENERGY_TRANSFER + STATE_C + CHARGING_CURRENT_DEMAND + REQUEST)) ||
 8001a14:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <main+0xab4>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
		if (
 8001a18:	f24c 1210 	movw	r2, #49424	@ 0xc110
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00c      	beq.n	8001a3a <main+0xa02>
				(EVstate==(ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + REQUEST) )	 ||
 8001a20:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <main+0xab4>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
				(EVstate==(ENERGY_TRANSFER + STATE_C + CHARGING_CURRENT_DEMAND + REQUEST)) ||
 8001a24:	f24c 1214 	movw	r2, #49428	@ 0xc114
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d006      	beq.n	8001a3a <main+0xa02>
				(EVstate==(ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + CONFIRM))
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <main+0xab4>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
				(EVstate==(ENERGY_TRANSFER + STATE_C + CURRENT_SUPPRESSION + REQUEST) )	 ||
 8001a30:	f24c 1215 	movw	r2, #49429	@ 0xc115
 8001a34:	4293      	cmp	r3, r2
 8001a36:	f47f abe5 	bne.w	8001204 <main+0x1cc>
			)	//SPI CCC REQ, SPI Current suppression REQ, SPI Current suppression CNF
		{
			int check=0;	//kiem tra xem co node nao loi khong
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
			for(int i=0;i<can_node_number;i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a42:	e00f      	b.n	8001a64 <main+0xa2c>
			{
				if(Slave_Data[i].state!=CHARGING_ON)
 8001a44:	4925      	ldr	r1, [pc, #148]	@ (8001adc <main+0xaa4>)
 8001a46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	440b      	add	r3, r1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d002      	beq.n	8001a5e <main+0xa26>
				{
					check++;
 8001a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
			for(int i=0;i<can_node_number;i++)
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <main+0xaa8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbea      	blt.n	8001a44 <main+0xa0c>
				}
			}

			if(check==0)	//khong co cai nao bi loi
 8001a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <main+0xa5c>
			{
						ESP_Data.ESP_Data_voltage=Voltage;
 8001a74:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <main+0xab8>)
 8001a76:	881a      	ldrh	r2, [r3, #0]
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <main+0xabc>)
 8001a7a:	805a      	strh	r2, [r3, #2]
						ESP_Data.ESP_Data_current=Current;
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <main+0xac0>)
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <main+0xabc>)
 8001a82:	809a      	strh	r2, [r3, #4]
						Packet_to_ESP(TYPE_CURRENT_VALUE,STATE_ON);
 8001a84:	2101      	movs	r1, #1
 8001a86:	2020      	movs	r0, #32
 8001a88:	f7fe febe 	bl	8000808 <Packet_to_ESP>
						Packet_to_ESP(TYPE_VOLTAGE_VALUE,STATE_ON);
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	2021      	movs	r0, #33	@ 0x21
 8001a90:	f7fe feba 	bl	8000808 <Packet_to_ESP>
			}
			//co it nhat 1 cai bi loi send error, arlam to HMI
			for(int i=0;i<can_node_number;i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a98:	e018      	b.n	8001acc <main+0xa94>
			{
				if(Slave_Data[i].state!=CHARGING_ON && can_setting_confirm_flag>=can_node_number*4)
 8001a9a:	4910      	ldr	r1, [pc, #64]	@ (8001adc <main+0xaa4>)
 8001a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	440b      	add	r3, r1
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d00b      	beq.n	8001ac6 <main+0xa8e>
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <main+0xaa8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	009a      	lsls	r2, r3, #2
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <main+0xaac>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dc04      	bgt.n	8001ac6 <main+0xa8e>
				{
					HMI_Compose_Status(HMI_ERROR_1);	HMI_Print();
 8001abc:	2025      	movs	r0, #37	@ 0x25
 8001abe:	f009 fafb 	bl	800b0b8 <HMI_Compose_Status>
 8001ac2:	f7fe ff8f 	bl	80009e4 <HMI_Print>
			for(int i=0;i<can_node_number;i++)
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	3301      	adds	r3, #1
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <main+0xaa8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbe1      	blt.n	8001a9a <main+0xa62>
  {
 8001ad6:	f7ff bb95 	b.w	8001204 <main+0x1cc>
 8001ada:	bf00      	nop
 8001adc:	20000668 	.word	0x20000668
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	200006f4 	.word	0x200006f4
 8001ae8:	200005c4 	.word	0x200005c4
 8001aec:	200006f8 	.word	0x200006f8
 8001af0:	200006fa 	.word	0x200006fa
 8001af4:	200000c4 	.word	0x200000c4
 8001af8:	20000004 	.word	0x20000004

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b094      	sub	sp, #80	@ 0x50
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0318 	add.w	r3, r7, #24
 8001b06:	2238      	movs	r2, #56	@ 0x38
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00a fee3 	bl	800c8d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b22:	f004 fcf3 	bl	800650c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b30:	2340      	movs	r3, #64	@ 0x40
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b34:	2302      	movs	r3, #2
 8001b36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b40:	2308      	movs	r3, #8
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fd8d 	bl	8006674 <HAL_RCC_OscConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001b60:	f000 fbd4 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b64:	230f      	movs	r3, #15
 8001b66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001b6c:	2390      	movs	r3, #144	@ 0x90
 8001b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 f891 	bl	8006ca4 <HAL_RCC_ClockConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b88:	f000 fbc0 	bl	800230c <Error_Handler>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3750      	adds	r7, #80	@ 0x50
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2220      	movs	r2, #32
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00a fe92 	bl	800c8d6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bb2:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001bb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bba:	4b30      	ldr	r3, [pc, #192]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001bce:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bd4:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bda:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bdc:	2204      	movs	r2, #4
 8001bde:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001be0:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001bec:	4b23      	ldr	r3, [pc, #140]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c1c:	4817      	ldr	r0, [pc, #92]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001c1e:	f001 fc2d 	bl	800347c <HAL_ADC_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001c28:	f000 fb70 	bl	800230c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001c38:	f002 fcf8 	bl	800462c <HAL_ADCEx_MultiModeConfigChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c42:	f000 fb63 	bl	800230c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_ADC1_Init+0xec>)
 8001c48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c52:	237f      	movs	r3, #127	@ 0x7f
 8001c54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c56:	2304      	movs	r3, #4
 8001c58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <MX_ADC1_Init+0xe8>)
 8001c64:	f002 f84a 	bl	8003cfc <HAL_ADC_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c6e:	f000 fb4d 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	@ 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200000d4 	.word	0x200000d4
 8001c80:	04300002 	.word	0x04300002

08001c84 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <MX_FDCAN2_Init+0x88>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 4;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001cf4:	4804      	ldr	r0, [pc, #16]	@ (8001d08 <MX_FDCAN2_Init+0x84>)
 8001cf6:	f003 f98b 	bl	8005010 <HAL_FDCAN_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001d00:	f000 fb04 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000140 	.word	0x20000140
 8001d0c:	40006800 	.word	0x40006800

08001d10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d16:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <MX_SPI2_Init+0x78>)
 8001d18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d28:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d5e:	2207      	movs	r2, #7
 8001d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_SPI2_Init+0x74>)
 8001d70:	f005 fc02 	bl	8007578 <HAL_SPI_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d7a:	f000 fac7 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200001a4 	.word	0x200001a4
 8001d88:	40003800 	.word	0x40003800

08001d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b098      	sub	sp, #96	@ 0x60
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2234      	movs	r2, #52	@ 0x34
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00a fd8c 	bl	800c8d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb0 <MX_TIM1_Init+0x124>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000;
 8001dc4:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001dc6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001dca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001dd2:	4b36      	ldr	r3, [pc, #216]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001dd4:	2263      	movs	r2, #99	@ 0x63
 8001dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dde:	4b33      	ldr	r3, [pc, #204]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001de6:	2280      	movs	r2, #128	@ 0x80
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dea:	4830      	ldr	r0, [pc, #192]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001dec:	f006 f9ca 	bl	8008184 <HAL_TIM_PWM_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001df6:	f000 fa89 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4827      	ldr	r0, [pc, #156]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001e0e:	f007 f9d7 	bl	80091c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e18:	f000 fa78 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1c:	2360      	movs	r3, #96	@ 0x60
 8001e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e24:	2300      	movs	r3, #0
 8001e26:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481a      	ldr	r0, [pc, #104]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001e42:	f006 fc89 	bl	8008758 <HAL_TIM_PWM_ConfigChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e4c:	f000 fa5e 	bl	800230c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4807      	ldr	r0, [pc, #28]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001e8e:	f007 fa2d 	bl	80092ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001e98:	f000 fa38 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <MX_TIM1_Init+0x120>)
 8001e9e:	f000 fcf1 	bl	8002884 <HAL_TIM_MspPostInit>

}
 8001ea2:	bf00      	nop
 8001ea4:	3760      	adds	r7, #96	@ 0x60
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000208 	.word	0x20000208
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001eba:	4a11      	ldr	r2, [pc, #68]	@ (8001f00 <MX_TIM17_Init+0x4c>)
 8001ebc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 319;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001ec0:	f240 123f 	movw	r2, #319	@ 0x13f
 8001ec4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001ece:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ed2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_TIM17_Init+0x48>)
 8001ee8:	f006 f87c 	bl	8007fe4 <HAL_TIM_Base_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001ef2:	f000 fa0b 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000254 	.word	0x20000254
 8001f00:	40014800 	.word	0x40014800

08001f04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f0a:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <MX_UART4_Init+0x94>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f0e:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f4c:	4811      	ldr	r0, [pc, #68]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f4e:	f007 fac5 	bl	80094dc <HAL_UART_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f58:	f000 f9d8 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	480d      	ldr	r0, [pc, #52]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f60:	f008 fb41 	bl	800a5e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f6a:	f000 f9cf 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4808      	ldr	r0, [pc, #32]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f72:	f008 fb76 	bl	800a662 <HAL_UARTEx_SetRxFifoThreshold>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f7c:	f000 f9c6 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <MX_UART4_Init+0x90>)
 8001f82:	f008 faf7 	bl	800a574 <HAL_UARTEx_DisableFifoMode>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f8c:	f000 f9be 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200002a0 	.word	0x200002a0
 8001f98:	40004c00 	.word	0x40004c00

08001f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fa2:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <MX_USART1_UART_Init+0x94>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe4:	4811      	ldr	r0, [pc, #68]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001fe6:	f007 fa79 	bl	80094dc <HAL_UART_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ff0:	f000 f98c 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	480d      	ldr	r0, [pc, #52]	@ (800202c <MX_USART1_UART_Init+0x90>)
 8001ff8:	f008 faf5 	bl	800a5e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002002:	f000 f983 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4808      	ldr	r0, [pc, #32]	@ (800202c <MX_USART1_UART_Init+0x90>)
 800200a:	f008 fb2a 	bl	800a662 <HAL_UARTEx_SetRxFifoThreshold>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002014:	f000 f97a 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	@ (800202c <MX_USART1_UART_Init+0x90>)
 800201a:	f008 faab 	bl	800a574 <HAL_UARTEx_DisableFifoMode>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002024:	f000 f972 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000330 	.word	0x20000330
 8002030:	40013800 	.word	0x40013800

08002034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002038:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800203a:	4a23      	ldr	r2, [pc, #140]	@ (80020c8 <MX_USART2_UART_Init+0x94>)
 800203c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203e:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002052:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207c:	4811      	ldr	r0, [pc, #68]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800207e:	f007 fa2d 	bl	80094dc <HAL_UART_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002088:	f000 f940 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208c:	2100      	movs	r1, #0
 800208e:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002090:	f008 faa9 	bl	800a5e6 <HAL_UARTEx_SetTxFifoThreshold>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800209a:	f000 f937 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 80020a2:	f008 fade 	bl	800a662 <HAL_UARTEx_SetRxFifoThreshold>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f000 f92e 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 80020b2:	f008 fa5f 	bl	800a574 <HAL_UARTEx_DisableFifoMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020bc:	f000 f926 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200003c0 	.word	0x200003c0
 80020c8:	40004400 	.word	0x40004400

080020cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020d0:	4b22      	ldr	r3, [pc, #136]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020d2:	4a23      	ldr	r2, [pc, #140]	@ (8002160 <MX_USART3_UART_Init+0x94>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020d6:	4b21      	ldr	r3, [pc, #132]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b17      	ldr	r3, [pc, #92]	@ (800215c <MX_USART3_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_USART3_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <MX_USART3_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <MX_USART3_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002114:	4811      	ldr	r0, [pc, #68]	@ (800215c <MX_USART3_UART_Init+0x90>)
 8002116:	f007 f9e1 	bl	80094dc <HAL_UART_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002120:	f000 f8f4 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_USART3_UART_Init+0x90>)
 8002128:	f008 fa5d 	bl	800a5e6 <HAL_UARTEx_SetTxFifoThreshold>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002132:	f000 f8eb 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	4808      	ldr	r0, [pc, #32]	@ (800215c <MX_USART3_UART_Init+0x90>)
 800213a:	f008 fa92 	bl	800a662 <HAL_UARTEx_SetRxFifoThreshold>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002144:	f000 f8e2 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <MX_USART3_UART_Init+0x90>)
 800214a:	f008 fa13 	bl	800a574 <HAL_UARTEx_DisableFifoMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002154:	f000 f8da 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000450 	.word	0x20000450
 8002160:	40004800 	.word	0x40004800

08002164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <MX_DMA_Init+0x60>)
 800216c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216e:	4a15      	ldr	r2, [pc, #84]	@ (80021c4 <MX_DMA_Init+0x60>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6493      	str	r3, [r2, #72]	@ 0x48
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <MX_DMA_Init+0x60>)
 8002178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <MX_DMA_Init+0x60>)
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <MX_DMA_Init+0x60>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6493      	str	r3, [r2, #72]	@ 0x48
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <MX_DMA_Init+0x60>)
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	200b      	movs	r0, #11
 80021a0:	f002 fc27 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021a4:	200b      	movs	r0, #11
 80021a6:	f002 fc3e 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	200c      	movs	r0, #12
 80021b0:	f002 fc1f 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021b4:	200c      	movs	r0, #12
 80021b6:	f002 fc36 	bl	8004a26 <HAL_NVIC_EnableIRQ>

}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021de:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <MX_GPIO_Init+0x138>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a47      	ldr	r2, [pc, #284]	@ (8002300 <MX_GPIO_Init+0x138>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b45      	ldr	r3, [pc, #276]	@ (8002300 <MX_GPIO_Init+0x138>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b42      	ldr	r3, [pc, #264]	@ (8002300 <MX_GPIO_Init+0x138>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a41      	ldr	r2, [pc, #260]	@ (8002300 <MX_GPIO_Init+0x138>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002202:	4b3f      	ldr	r3, [pc, #252]	@ (8002300 <MX_GPIO_Init+0x138>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <MX_GPIO_Init+0x138>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	4a3b      	ldr	r2, [pc, #236]	@ (8002300 <MX_GPIO_Init+0x138>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <MX_GPIO_Init+0x138>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PP_SELECT_Pin|CP_SELECT_Pin, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	210c      	movs	r1, #12
 800222a:	4836      	ldr	r0, [pc, #216]	@ (8002304 <MX_GPIO_Init+0x13c>)
 800222c:	f004 f924 	bl	8006478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	2120      	movs	r1, #32
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002238:	f004 f91e 	bl	8006478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, QCA_RS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f241 0104 	movw	r1, #4100	@ 0x1004
 8002242:	4831      	ldr	r0, [pc, #196]	@ (8002308 <MX_GPIO_Init+0x140>)
 8002244:	f004 f918 	bl	8006478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INT_Pin;
 8002248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800224c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_INT_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	4829      	ldr	r0, [pc, #164]	@ (8002304 <MX_GPIO_Init+0x13c>)
 8002260:	f003 ff88 	bl	8006174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PP_SELECT_Pin CP_SELECT_Pin */
  GPIO_InitStruct.Pin = PP_SELECT_Pin|CP_SELECT_Pin;
 8002264:	230c      	movs	r3, #12
 8002266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	2301      	movs	r3, #1
 800226a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4619      	mov	r1, r3
 800227a:	4822      	ldr	r0, [pc, #136]	@ (8002304 <MX_GPIO_Init+0x13c>)
 800227c:	f003 ff7a 	bl	8006174 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002280:	2320      	movs	r3, #32
 8002282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229a:	f003 ff6b 	bl	8006174 <HAL_GPIO_Init>

  /*Configure GPIO pin : QCA_INT_Pin */
  GPIO_InitStruct.Pin = QCA_INT_Pin;
 800229e:	2302      	movs	r3, #2
 80022a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QCA_INT_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4619      	mov	r1, r3
 80022b2:	4815      	ldr	r0, [pc, #84]	@ (8002308 <MX_GPIO_Init+0x140>)
 80022b4:	f003 ff5e 	bl	8006174 <HAL_GPIO_Init>

  /*Configure GPIO pins : QCA_RS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = QCA_RS_Pin|SPI2_CS_Pin;
 80022b8:	f241 0304 	movw	r3, #4100	@ 0x1004
 80022bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	4619      	mov	r1, r3
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <MX_GPIO_Init+0x140>)
 80022d2:	f003 ff4f 	bl	8006174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	2007      	movs	r0, #7
 80022dc:	f002 fb89 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022e0:	2007      	movs	r0, #7
 80022e2:	f002 fba0 	bl	8004a26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2028      	movs	r0, #40	@ 0x28
 80022ec:	f002 fb81 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022f0:	2028      	movs	r0, #40	@ 0x28
 80022f2:	f002 fb98 	bl	8004a26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	48000800 	.word	0x48000800
 8002308:	48000400 	.word	0x48000400

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <Error_Handler+0x8>

08002318 <PDO_set_data_frame>:
  * @brief  Insert all data needed into Transmit 8 byte Frame
  * @param  aData is Transmit_data to transmit
  * @param  My_PDO_Data is struct that include all data
  */
void PDO_set_data_frame(uint8_t* aData,SPDO_Data My_PDO_Data)
{
 8002318:	b084      	sub	sp, #16
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	f107 001c 	add.w	r0, r7, #28
 8002326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	aData[1]=My_PDO_Data.state;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3301      	adds	r3, #1
 800232e:	7f3a      	ldrb	r2, [r7, #28]
 8002330:	701a      	strb	r2, [r3, #0]
	aData[2]=My_PDO_Data.function;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3302      	adds	r3, #2
 8002336:	7f7a      	ldrb	r2, [r7, #29]
 8002338:	701a      	strb	r2, [r3, #0]
	aData[3]=My_PDO_Data.plug |My_PDO_Data.mode;
 800233a:	7fb9      	ldrb	r1, [r7, #30]
 800233c:	7ffa      	ldrb	r2, [r7, #31]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3303      	adds	r3, #3
 8002342:	430a      	orrs	r2, r1
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
	aData[4]=My_PDO_Data.slaveID;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002350:	701a      	strb	r2, [r3, #0]
	aData[5]=My_PDO_Data.type_of_value;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3305      	adds	r3, #5
 8002356:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800235a:	701a      	strb	r2, [r3, #0]

	uint16_t value;
	switch (My_PDO_Data.type_of_value)
 800235c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002360:	3b01      	subs	r3, #1
 8002362:	2b03      	cmp	r3, #3
 8002364:	d816      	bhi.n	8002394 <PDO_set_data_frame+0x7c>
 8002366:	a201      	add	r2, pc, #4	@ (adr r2, 800236c <PDO_set_data_frame+0x54>)
 8002368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236c:	0800237d 	.word	0x0800237d
 8002370:	08002383 	.word	0x08002383
 8002374:	08002389 	.word	0x08002389
 8002378:	0800238f 	.word	0x0800238f
	{
	case CHARGING_DATA_CURRENT:
		value=My_PDO_Data.current_value;
 800237c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800237e:	81fb      	strh	r3, [r7, #14]
		break;
 8002380:	e008      	b.n	8002394 <PDO_set_data_frame+0x7c>
	case CHARGING_DATA_VOLTAGE:
		value=My_PDO_Data.voltage_value;
 8002382:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002384:	81fb      	strh	r3, [r7, #14]
		break;
 8002386:	e005      	b.n	8002394 <PDO_set_data_frame+0x7c>
	case CHARGING_DATA_TEMPERATURE:
		value=My_PDO_Data.temperature_value;
 8002388:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800238a:	81fb      	strh	r3, [r7, #14]
		break;
 800238c:	e002      	b.n	8002394 <PDO_set_data_frame+0x7c>
	case CHARGING_DATA_TIME:
		value=My_PDO_Data.time_value;
 800238e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002390:	81fb      	strh	r3, [r7, #14]
		break;
 8002392:	bf00      	nop
	}
	aData[6]=(value >> 8) & 0xFF;
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3306      	adds	r3, #6
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]
	aData[7]=value & 0xFF;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3307      	adds	r3, #7
 80023a6:	89fa      	ldrh	r2, [r7, #14]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	b004      	add	sp, #16
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <deframe_PDO>:
  * @brief  Insert all data transmited into data Struct
  * @param  aData is Receive_data
  * @param  My_PDO_Data is struct that include all data
  */
void deframe_PDO(uint8_t* aData, SPDO_Data* SPDO_Data)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
	SPDO_Data->state=aData[1];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	785a      	ldrb	r2, [r3, #1]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	701a      	strb	r2, [r3, #0]
	SPDO_Data->function=aData[2];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	789a      	ldrb	r2, [r3, #2]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	705a      	strb	r2, [r3, #1]
	SPDO_Data->plug=aData[3]&0xF0;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3303      	adds	r3, #3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	f023 030f 	bic.w	r3, r3, #15
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	709a      	strb	r2, [r3, #2]
	SPDO_Data->mode=aData[3]&0x0F;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3303      	adds	r3, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	70da      	strb	r2, [r3, #3]
	SPDO_Data->slaveID=aData[4];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	791a      	ldrb	r2, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	711a      	strb	r2, [r3, #4]
	SPDO_Data->type_of_value=aData[5];
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	795a      	ldrb	r2, [r3, #5]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	715a      	strb	r2, [r3, #5]

	switch (aData[5])
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3305      	adds	r3, #5
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	2b03      	cmp	r3, #3
 8002410:	d846      	bhi.n	80024a0 <deframe_PDO+0xe4>
 8002412:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <deframe_PDO+0x5c>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	08002447 	.word	0x08002447
 8002420:	08002465 	.word	0x08002465
 8002424:	08002483 	.word	0x08002483
	{
	case CHARGING_DATA_CURRENT:
		SPDO_Data->current_value=(uint16_t)aData[6]<< 8 | aData[7];
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3306      	adds	r3, #6
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	b21a      	sxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3307      	adds	r3, #7
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b21b      	sxth	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b21b      	sxth	r3, r3
 800243e:	b29a      	uxth	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	811a      	strh	r2, [r3, #8]
		break;
 8002444:	e02c      	b.n	80024a0 <deframe_PDO+0xe4>
	case CHARGING_DATA_VOLTAGE:
		SPDO_Data->voltage_value=(uint16_t)aData[6]<< 8 | aData[7];
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3306      	adds	r3, #6
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	b21a      	sxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3307      	adds	r3, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b21b      	sxth	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	b21b      	sxth	r3, r3
 800245c:	b29a      	uxth	r2, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	80da      	strh	r2, [r3, #6]
		break;
 8002462:	e01d      	b.n	80024a0 <deframe_PDO+0xe4>
	case CHARGING_DATA_TEMPERATURE:
		SPDO_Data->temperature_value=(uint16_t)aData[6]<< 8 | aData[7];
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3306      	adds	r3, #6
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21a      	sxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3307      	adds	r3, #7
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21b      	sxth	r3, r3
 800247a:	b29a      	uxth	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	815a      	strh	r2, [r3, #10]
		break;
 8002480:	e00e      	b.n	80024a0 <deframe_PDO+0xe4>
	case CHARGING_DATA_TIME:
		SPDO_Data->time_value=(uint16_t)aData[6]<< 8 | aData[7];
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3306      	adds	r3, #6
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b21a      	sxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3307      	adds	r3, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b21b      	sxth	r3, r3
 8002494:	4313      	orrs	r3, r2
 8002496:	b21b      	sxth	r3, r3
 8002498:	b29a      	uxth	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	819a      	strh	r2, [r3, #12]
		break;
 800249e:	bf00      	nop
	}
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <changeTypeOfValue>:



void changeTypeOfValue(uint8_t* type_of_value)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    switch (*type_of_value)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d81a      	bhi.n	80024f4 <changeTypeOfValue+0x48>
 80024be:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <changeTypeOfValue+0x18>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024ed 	.word	0x080024ed
    {
        case CHARGING_DATA_CURRENT:
            *type_of_value = CHARGING_DATA_VOLTAGE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
            break;
 80024da:	e00b      	b.n	80024f4 <changeTypeOfValue+0x48>
        case CHARGING_DATA_VOLTAGE:
            *type_of_value = CHARGING_DATA_TEMPERATURE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	701a      	strb	r2, [r3, #0]
            break;
 80024e2:	e007      	b.n	80024f4 <changeTypeOfValue+0x48>
        case CHARGING_DATA_TEMPERATURE:
            *type_of_value = CHARGING_DATA_TIME;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2204      	movs	r2, #4
 80024e8:	701a      	strb	r2, [r3, #0]
            break;
 80024ea:	e003      	b.n	80024f4 <changeTypeOfValue+0x48>
        case CHARGING_DATA_TIME:
            *type_of_value = CHARGING_DATA_CURRENT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
            break;
 80024f2:	bf00      	nop
    }
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <UpdateCANMasterTxDesID>:

void UpdateCANMasterTxDesID(uint8_t firstID, uint8_t lastID, SPDO_Data *Tx_SPDO_Data,uint8_t aData[])
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60ba      	str	r2, [r7, #8]
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	460b      	mov	r3, r1
 8002510:	73bb      	strb	r3, [r7, #14]
	if (Tx_SPDO_Data->type_of_value == CHARGING_DATA_VOLTAGE)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	795b      	ldrb	r3, [r3, #5]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d10d      	bne.n	8002536 <UpdateCANMasterTxDesID+0x36>
	{
		aData[0]+=1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	3301      	adds	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	701a      	strb	r2, [r3, #0]
		if(aData[0]>lastID) aData[0]=firstID;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	7bba      	ldrb	r2, [r7, #14]
 800252c:	429a      	cmp	r2, r3
 800252e:	d202      	bcs.n	8002536 <UpdateCANMasterTxDesID+0x36>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	701a      	strb	r2, [r3, #0]
	}
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <Reset_Data>:

void Reset_Data(SPDO_Data *Tx_SPDO_Data)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
	Tx_SPDO_Data->current_value=0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	811a      	strh	r2, [r3, #8]
	Tx_SPDO_Data->temperature_value=0;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	815a      	strh	r2, [r3, #10]
	Tx_SPDO_Data->time_value=0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	819a      	strh	r2, [r3, #12]
	Tx_SPDO_Data->voltage_value=0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	80da      	strh	r2, [r3, #6]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <HAL_MspInit+0x44>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257a:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <HAL_MspInit+0x44>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6613      	str	r3, [r2, #96]	@ 0x60
 8002582:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <HAL_MspInit+0x44>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_MspInit+0x44>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <HAL_MspInit+0x44>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	@ 0x58
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_MspInit+0x44>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025a6:	f004 f855 	bl	8006654 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b09e      	sub	sp, #120	@ 0x78
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2254      	movs	r2, #84	@ 0x54
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f00a f97c 	bl	800c8d6 <memset>
  if(hadc->Instance==ADC1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025e6:	d13c      	bne.n	8002662 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025f2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f004 fd6f 	bl	80070dc <HAL_RCCEx_PeriphCLKConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002604:	f7ff fe82 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_ADC_MspInit+0xb4>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	4a17      	ldr	r2, [pc, #92]	@ (800266c <HAL_ADC_MspInit+0xb4>)
 800260e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002614:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_ADC_MspInit+0xb4>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_ADC_MspInit+0xb4>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	4a11      	ldr	r2, [pc, #68]	@ (800266c <HAL_ADC_MspInit+0xb4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_ADC_MspInit+0xb4>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002638:	2301      	movs	r3, #1
 800263a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263c:	2303      	movs	r3, #3
 800263e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002648:	4619      	mov	r1, r3
 800264a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800264e:	f003 fd91 	bl	8006174 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	2012      	movs	r0, #18
 8002658:	f002 f9cb 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800265c:	2012      	movs	r0, #18
 800265e:	f002 f9e2 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3778      	adds	r7, #120	@ 0x78
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b09e      	sub	sp, #120	@ 0x78
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	2254      	movs	r2, #84	@ 0x54
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f00a f920 	bl	800c8d6 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a23      	ldr	r2, [pc, #140]	@ (8002728 <HAL_FDCAN_MspInit+0xb8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d13f      	bne.n	8002720 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80026a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 fd13 	bl	80070dc <HAL_RCCEx_PeriphCLKConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80026bc:	f7ff fe26 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <HAL_FDCAN_MspInit+0xbc>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_FDCAN_MspInit+0xbc>)
 80026c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <HAL_FDCAN_MspInit+0xbc>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <HAL_FDCAN_MspInit+0xbc>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <HAL_FDCAN_MspInit+0xbc>)
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_FDCAN_MspInit+0xbc>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026f0:	2360      	movs	r3, #96	@ 0x60
 80026f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002700:	2309      	movs	r3, #9
 8002702:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002704:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002708:	4619      	mov	r1, r3
 800270a:	4809      	ldr	r0, [pc, #36]	@ (8002730 <HAL_FDCAN_MspInit+0xc0>)
 800270c:	f003 fd32 	bl	8006174 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	2056      	movs	r0, #86	@ 0x56
 8002716:	f002 f96c 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800271a:	2056      	movs	r0, #86	@ 0x56
 800271c:	f002 f983 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	3778      	adds	r7, #120	@ 0x78
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40006800 	.word	0x40006800
 800272c:	40021000 	.word	0x40021000
 8002730:	48000400 	.word	0x48000400

08002734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1b      	ldr	r2, [pc, #108]	@ (80027c0 <HAL_SPI_MspInit+0x8c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d130      	bne.n	80027b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002756:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_SPI_MspInit+0x90>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	4a1a      	ldr	r2, [pc, #104]	@ (80027c4 <HAL_SPI_MspInit+0x90>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002760:	6593      	str	r3, [r2, #88]	@ 0x58
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_SPI_MspInit+0x90>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_SPI_MspInit+0x90>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <HAL_SPI_MspInit+0x90>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800277a:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_SPI_MspInit+0x90>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002786:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800278a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002798:	2305      	movs	r3, #5
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	4809      	ldr	r0, [pc, #36]	@ (80027c8 <HAL_SPI_MspInit+0x94>)
 80027a4:	f003 fce6 	bl	8006174 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2024      	movs	r0, #36	@ 0x24
 80027ae:	f002 f920 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80027b2:	2024      	movs	r0, #36	@ 0x24
 80027b4:	f002 f937 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	@ 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40003800 	.word	0x40003800
 80027c4:	40021000 	.word	0x40021000
 80027c8:	48000400 	.word	0x48000400

080027cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <HAL_TIM_PWM_MspInit+0x64>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d123      	bne.n	8002826 <HAL_TIM_PWM_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_TIM_PWM_MspInit+0x68>)
 80027e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e2:	4a14      	ldr	r2, [pc, #80]	@ (8002834 <HAL_TIM_PWM_MspInit+0x68>)
 80027e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_TIM_PWM_MspInit+0x68>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2018      	movs	r0, #24
 80027fc:	f002 f8f9 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002800:	2018      	movs	r0, #24
 8002802:	f002 f910 	bl	8004a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	2019      	movs	r0, #25
 800280c:	f002 f8f1 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002810:	2019      	movs	r0, #25
 8002812:	f002 f908 	bl	8004a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	201a      	movs	r0, #26
 800281c:	f002 f8e9 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002820:	201a      	movs	r0, #26
 8002822:	f002 f900 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0d      	ldr	r2, [pc, #52]	@ (800287c <HAL_TIM_Base_MspInit+0x44>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d113      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <HAL_TIM_Base_MspInit+0x48>)
 800284c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284e:	4a0c      	ldr	r2, [pc, #48]	@ (8002880 <HAL_TIM_Base_MspInit+0x48>)
 8002850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002854:	6613      	str	r3, [r2, #96]	@ 0x60
 8002856:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_TIM_Base_MspInit+0x48>)
 8002858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	201a      	movs	r0, #26
 8002868:	f002 f8c3 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800286c:	201a      	movs	r0, #26
 800286e:	f002 f8da 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40014800 	.word	0x40014800
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a11      	ldr	r2, [pc, #68]	@ (80028e8 <HAL_TIM_MspPostInit+0x64>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d11b      	bne.n	80028de <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <HAL_TIM_MspPostInit+0x68>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	4a10      	ldr	r2, [pc, #64]	@ (80028ec <HAL_TIM_MspPostInit+0x68>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_TIM_MspPostInit+0x68>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028be:	2301      	movs	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028ce:	2302      	movs	r3, #2
 80028d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <HAL_TIM_MspPostInit+0x6c>)
 80028da:	f003 fc4b 	bl	8006174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028de:	bf00      	nop
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000800 	.word	0x48000800

080028f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0a4      	sub	sp, #144	@ 0x90
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800290c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002910:	2254      	movs	r2, #84	@ 0x54
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f009 ffde 	bl	800c8d6 <memset>
  if(huart->Instance==UART4)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4aab      	ldr	r2, [pc, #684]	@ (8002bcc <HAL_UART_MspInit+0x2d8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d164      	bne.n	80029ee <HAL_UART_MspInit+0xfa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002924:	2308      	movs	r3, #8
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800292c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002930:	4618      	mov	r0, r3
 8002932:	f004 fbd3 	bl	80070dc <HAL_RCCEx_PeriphCLKConfig>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800293c:	f7ff fce6 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002940:	4ba3      	ldr	r3, [pc, #652]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	4aa2      	ldr	r2, [pc, #648]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002946:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800294a:	6593      	str	r3, [r2, #88]	@ 0x58
 800294c:	4ba0      	ldr	r3, [pc, #640]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002958:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295c:	4a9c      	ldr	r2, [pc, #624]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002964:	4b9a      	ldr	r3, [pc, #616]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002970:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002974:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002988:	2305      	movs	r3, #5
 800298a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002992:	4619      	mov	r1, r3
 8002994:	488f      	ldr	r0, [pc, #572]	@ (8002bd4 <HAL_UART_MspInit+0x2e0>)
 8002996:	f003 fbed 	bl	8006174 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 800299a:	4b8f      	ldr	r3, [pc, #572]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 800299c:	4a8f      	ldr	r2, [pc, #572]	@ (8002bdc <HAL_UART_MspInit+0x2e8>)
 800299e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80029a0:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029a2:	221e      	movs	r2, #30
 80029a4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a6:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ac:	4b8a      	ldr	r3, [pc, #552]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b2:	4b89      	ldr	r3, [pc, #548]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029b4:	2280      	movs	r2, #128	@ 0x80
 80029b6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b8:	4b87      	ldr	r3, [pc, #540]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029be:	4b86      	ldr	r3, [pc, #536]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80029c4:	4b84      	ldr	r3, [pc, #528]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ca:	4b83      	ldr	r3, [pc, #524]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80029d0:	4881      	ldr	r0, [pc, #516]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029d2:	f002 f843 	bl	8004a5c <HAL_DMA_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80029dc:	f7ff fc96 	bl	800230c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029e4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029e6:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd8 <HAL_UART_MspInit+0x2e4>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029ec:	e0e9      	b.n	8002bc2 <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7b      	ldr	r2, [pc, #492]	@ (8002be0 <HAL_UART_MspInit+0x2ec>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d13a      	bne.n	8002a6e <HAL_UART_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f8:	2301      	movs	r3, #1
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fb69 	bl	80070dc <HAL_RCCEx_PeriphCLKConfig>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_MspInit+0x120>
      Error_Handler();
 8002a10:	f7ff fc7c 	bl	800230c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a14:	4b6e      	ldr	r3, [pc, #440]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a18:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a20:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	4b68      	ldr	r3, [pc, #416]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a30:	4a67      	ldr	r2, [pc, #412]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a38:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a44:	2330      	movs	r3, #48	@ 0x30
 8002a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a5a:	2307      	movs	r3, #7
 8002a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a60:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002a64:	4619      	mov	r1, r3
 8002a66:	485b      	ldr	r0, [pc, #364]	@ (8002bd4 <HAL_UART_MspInit+0x2e0>)
 8002a68:	f003 fb84 	bl	8006174 <HAL_GPIO_Init>
}
 8002a6c:	e0a9      	b.n	8002bc2 <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==USART2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a5c      	ldr	r2, [pc, #368]	@ (8002be4 <HAL_UART_MspInit+0x2f0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d13b      	bne.n	8002af0 <HAL_UART_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 fb29 	bl	80070dc <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002a90:	f7ff fc3c 	bl	800230c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a94:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	4b48      	ldr	r3, [pc, #288]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	4a47      	ldr	r2, [pc, #284]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab8:	4b45      	ldr	r3, [pc, #276]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ada:	2307      	movs	r3, #7
 8002adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aea:	f003 fb43 	bl	8006174 <HAL_GPIO_Init>
}
 8002aee:	e068      	b.n	8002bc2 <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==USART3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3c      	ldr	r2, [pc, #240]	@ (8002be8 <HAL_UART_MspInit+0x2f4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d163      	bne.n	8002bc2 <HAL_UART_MspInit+0x2ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002afa:	2304      	movs	r3, #4
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fae8 	bl	80070dc <HAL_RCCEx_PeriphCLKConfig>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_UART_MspInit+0x222>
      Error_Handler();
 8002b12:	f7ff fbfb 	bl	800230c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b16:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b22:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	4a27      	ldr	r2, [pc, #156]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b3a:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_UART_MspInit+0x2dc>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b5e:	2307      	movs	r3, #7
 8002b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b64:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4820      	ldr	r0, [pc, #128]	@ (8002bec <HAL_UART_MspInit+0x2f8>)
 8002b6c:	f003 fb02 	bl	8006174 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8002b70:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b72:	4a20      	ldr	r2, [pc, #128]	@ (8002bf4 <HAL_UART_MspInit+0x300>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b78:	221c      	movs	r2, #28
 8002b7a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b82:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b88:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ba6:	4812      	ldr	r0, [pc, #72]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002ba8:	f001 ff58 	bl	8004a5c <HAL_DMA_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_UART_MspInit+0x2c2>
      Error_Handler();
 8002bb2:	f7ff fbab 	bl	800230c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002bba:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf0 <HAL_UART_MspInit+0x2fc>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002bc2:	bf00      	nop
 8002bc4:	3790      	adds	r7, #144	@ 0x90
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40004c00 	.word	0x40004c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	200004e0 	.word	0x200004e0
 8002bdc:	40020008 	.word	0x40020008
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40004800 	.word	0x40004800
 8002bec:	48000400 	.word	0x48000400
 8002bf0:	20000540 	.word	0x20000540
 8002bf4:	4002001c 	.word	0x4002001c

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <NMI_Handler+0x4>

08002c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <HardFault_Handler+0x4>

08002c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <MemManage_Handler+0x4>

08002c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4e:	f000 f9b9 	bl	8002fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QCA_INT_Pin);
 8002c5a:	2002      	movs	r0, #2
 8002c5c:	f003 fc3e 	bl	80064dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <DMA1_Channel1_IRQHandler+0x10>)
 8002c6a:	f002 f881 	bl	8004d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200004e0 	.word	0x200004e0

08002c78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <DMA1_Channel2_IRQHandler+0x10>)
 8002c7e:	f002 f877 	bl	8004d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000540 	.word	0x20000540

08002c8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <ADC1_2_IRQHandler+0x10>)
 8002c92:	f000 fdb5 	bl	8003800 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200000d4 	.word	0x200000d4

08002ca0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002ca6:	f005 fbd7 	bl	8008458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000208 	.word	0x20000208

08002cb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002cba:	f005 fbcd 	bl	8008458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000208 	.word	0x20000208

08002cc8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ccc:	4803      	ldr	r0, [pc, #12]	@ (8002cdc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002cce:	f005 fbc3 	bl	8008458 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002cd2:	4803      	ldr	r0, [pc, #12]	@ (8002ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002cd4:	f005 fbc0 	bl	8008458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000208 	.word	0x20000208
 8002ce0:	20000254 	.word	0x20000254

08002ce4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <SPI2_IRQHandler+0x10>)
 8002cea:	f004 ff03 	bl	8007af4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200001a4 	.word	0x200001a4

08002cf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT_Pin);
 8002cfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d00:	f003 fbec 	bl	80064dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002d0c:	4802      	ldr	r0, [pc, #8]	@ (8002d18 <FDCAN2_IT0_IRQHandler+0x10>)
 8002d0e:	f002 fd05 	bl	800571c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000140 	.word	0x20000140

08002d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return 1;
 8002d20:	2301      	movs	r3, #1
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_kill>:

int _kill(int pid, int sig)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d36:	f009 fe1d 	bl	800c974 <__errno>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2216      	movs	r2, #22
 8002d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_exit>:

void _exit (int status)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ffe7 	bl	8002d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <_exit+0x12>

08002d62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e00a      	b.n	8002d8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d74:	f3af 8000 	nop.w
 8002d78:	4601      	mov	r1, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	60ba      	str	r2, [r7, #8]
 8002d80:	b2ca      	uxtb	r2, r1
 8002d82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3301      	adds	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	dbf0      	blt.n	8002d74 <_read+0x12>
  }

  return len;
 8002d92:	687b      	ldr	r3, [r7, #4]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e009      	b.n	8002dc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	60ba      	str	r2, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dbf1      	blt.n	8002dae <_write+0x12>
  }
  return len;
 8002dca:	687b      	ldr	r3, [r7, #4]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_close>:

int _close(int file)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_isatty>:

int _isatty(int file)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e44:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <_sbrk+0x5c>)
 8002e46:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <_sbrk+0x60>)
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <_sbrk+0x64>)
 8002e5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <_sbrk+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d207      	bcs.n	8002e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e6c:	f009 fd82 	bl	800c974 <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	220c      	movs	r2, #12
 8002e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e009      	b.n	8002e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <_sbrk+0x64>)
 8002e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20020000 	.word	0x20020000
 8002e9c:	00000400 	.word	0x00000400
 8002ea0:	20000700 	.word	0x20000700
 8002ea4:	20002450 	.word	0x20002450

08002ea8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <SystemInit+0x20>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	4a05      	ldr	r2, [pc, #20]	@ (8002ec8 <SystemInit+0x20>)
 8002eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ecc:	480d      	ldr	r0, [pc, #52]	@ (8002f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ece:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed0:	480d      	ldr	r0, [pc, #52]	@ (8002f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ed2:	490e      	ldr	r1, [pc, #56]	@ (8002f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8002f10 <LoopForever+0xe>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ed8:	e002      	b.n	8002ee0 <LoopCopyDataInit>

08002eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ede:	3304      	adds	r3, #4

08002ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee4:	d3f9      	bcc.n	8002eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8002f18 <LoopForever+0x16>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eec:	e001      	b.n	8002ef2 <LoopFillZerobss>

08002eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef0:	3204      	adds	r2, #4

08002ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef4:	d3fb      	bcc.n	8002eee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ef6:	f7ff ffd7 	bl	8002ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002efa:	f009 fd41 	bl	800c980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002efe:	f7fe f89b 	bl	8001038 <main>

08002f02 <LoopForever>:

LoopForever:
    b LoopForever
 8002f02:	e7fe      	b.n	8002f02 <LoopForever>
  ldr   r0, =_estack
 8002f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f0c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002f10:	0800e1f0 	.word	0x0800e1f0
  ldr r2, =_sbss
 8002f14:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002f18:	20002450 	.word	0x20002450

08002f1c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f1c:	e7fe      	b.n	8002f1c <ADC3_IRQHandler>

08002f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f001 fd57 	bl	80049dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f2e:	200f      	movs	r0, #15
 8002f30:	f000 f80e 	bl	8002f50 <HAL_InitTick>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	e001      	b.n	8002f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f40:	f7ff fb16 	bl	8002570 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f44:	79fb      	ldrb	r3, [r7, #7]

}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f5c:	4b16      	ldr	r3, [pc, #88]	@ (8002fb8 <HAL_InitTick+0x68>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d022      	beq.n	8002faa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f64:	4b15      	ldr	r3, [pc, #84]	@ (8002fbc <HAL_InitTick+0x6c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <HAL_InitTick+0x68>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 fd62 	bl	8004a42 <HAL_SYSTICK_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10f      	bne.n	8002fa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d809      	bhi.n	8002f9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f92:	f001 fd2e 	bl	80049f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f96:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <HAL_InitTick+0x70>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	e007      	b.n	8002fae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e004      	b.n	8002fae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e001      	b.n	8002fae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000010 	.word	0x20000010
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <HAL_IncTick+0x1c>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <HAL_IncTick+0x20>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a03      	ldr	r2, [pc, #12]	@ (8002fe0 <HAL_IncTick+0x1c>)
 8002fd4:	6013      	str	r3, [r2, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	20000704 	.word	0x20000704
 8002fe4:	20000010 	.word	0x20000010

08002fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return uwTick;
 8002fec:	4b03      	ldr	r3, [pc, #12]	@ (8002ffc <HAL_GetTick+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000704 	.word	0x20000704

08003000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff ffee 	bl	8002fe8 <HAL_GetTick>
 800300c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d004      	beq.n	8003024 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800301a:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_Delay+0x40>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003024:	bf00      	nop
 8003026:	f7ff ffdf 	bl	8002fe8 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	429a      	cmp	r2, r3
 8003034:	d8f7      	bhi.n	8003026 <HAL_Delay+0x26>
  {
  }
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000010 	.word	0x20000010

08003044 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3360      	adds	r3, #96	@ 0x60
 80030be:	461a      	mov	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <LL_ADC_SetOffset+0x44>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	4313      	orrs	r3, r2
 80030dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	03fff000 	.word	0x03fff000

080030f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3360      	adds	r3, #96	@ 0x60
 8003102:	461a      	mov	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3360      	adds	r3, #96	@ 0x60
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	431a      	orrs	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3360      	adds	r3, #96	@ 0x60
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	431a      	orrs	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3360      	adds	r3, #96	@ 0x60
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	615a      	str	r2, [r3, #20]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800320e:	b480      	push	{r7}
 8003210:	b087      	sub	sp, #28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3330      	adds	r3, #48	@ 0x30
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	4413      	add	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	211f      	movs	r1, #31
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	401a      	ands	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	f003 011f 	and.w	r1, r3, #31
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3314      	adds	r3, #20
 800329c:	461a      	mov	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	0e5b      	lsrs	r3, r3, #25
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	0d1b      	lsrs	r3, r3, #20
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2107      	movs	r1, #7
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	401a      	ands	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0d1b      	lsrs	r3, r3, #20
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	431a      	orrs	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003330 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10a      	bne.n	800330e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800330c:	e00a      	b.n	8003324 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	43db      	mvns	r3, r3
 800331c:	401a      	ands	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	407f0000 	.word	0x407f0000

08003334 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 031f 	and.w	r3, r3, #31
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800337c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6093      	str	r3, [r2, #8]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033a4:	d101      	bne.n	80033aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033f4:	d101      	bne.n	80033fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <LL_ADC_IsEnabled+0x18>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <LL_ADC_IsEnabled+0x1a>
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b04      	cmp	r3, #4
 8003440:	d101      	bne.n	8003446 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d101      	bne.n	800346c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b089      	sub	sp, #36	@ 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1af      	b.n	80037f6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff f887 	bl	80025b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff67 	bl	8003390 <LL_ADC_IsDeepPowerDownEnabled>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff4d 	bl	800336c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff82 	bl	80033e0 <LL_ADC_IsInternalRegulatorEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d115      	bne.n	800350e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff66 	bl	80033b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ec:	4b9f      	ldr	r3, [pc, #636]	@ (800376c <HAL_ADC_Init+0x2f0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	4a9f      	ldr	r2, [pc, #636]	@ (8003770 <HAL_ADC_Init+0x2f4>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	3301      	adds	r3, #1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003500:	e002      	b.n	8003508 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3b01      	subs	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f9      	bne.n	8003502 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff64 	bl	80033e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	f043 0210 	orr.w	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ff75 	bl	800342e <LL_ADC_REG_IsConversionOngoing>
 8003544:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8148 	bne.w	80037e4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8144 	bne.w	80037e4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003564:	f043 0202 	orr.w	r2, r3, #2
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff49 	bl	8003408 <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d141      	bne.n	8003600 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003584:	d004      	beq.n	8003590 <HAL_ADC_Init+0x114>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7a      	ldr	r2, [pc, #488]	@ (8003774 <HAL_ADC_Init+0x2f8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10f      	bne.n	80035b0 <HAL_ADC_Init+0x134>
 8003590:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003594:	f7ff ff38 	bl	8003408 <LL_ADC_IsEnabled>
 8003598:	4604      	mov	r4, r0
 800359a:	4876      	ldr	r0, [pc, #472]	@ (8003774 <HAL_ADC_Init+0x2f8>)
 800359c:	f7ff ff34 	bl	8003408 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4323      	orrs	r3, r4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e012      	b.n	80035d6 <HAL_ADC_Init+0x15a>
 80035b0:	4871      	ldr	r0, [pc, #452]	@ (8003778 <HAL_ADC_Init+0x2fc>)
 80035b2:	f7ff ff29 	bl	8003408 <LL_ADC_IsEnabled>
 80035b6:	4604      	mov	r4, r0
 80035b8:	4870      	ldr	r0, [pc, #448]	@ (800377c <HAL_ADC_Init+0x300>)
 80035ba:	f7ff ff25 	bl	8003408 <LL_ADC_IsEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	431c      	orrs	r4, r3
 80035c2:	486f      	ldr	r0, [pc, #444]	@ (8003780 <HAL_ADC_Init+0x304>)
 80035c4:	f7ff ff20 	bl	8003408 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4323      	orrs	r3, r4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Init+0x172>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a62      	ldr	r2, [pc, #392]	@ (8003774 <HAL_ADC_Init+0x2f8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_ADC_Init+0x176>
 80035ee:	4a65      	ldr	r2, [pc, #404]	@ (8003784 <HAL_ADC_Init+0x308>)
 80035f0:	e000      	b.n	80035f4 <HAL_ADC_Init+0x178>
 80035f2:	4a65      	ldr	r2, [pc, #404]	@ (8003788 <HAL_ADC_Init+0x30c>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7ff fd22 	bl	8003044 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7f5b      	ldrb	r3, [r3, #29]
 8003604:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800360a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003610:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003616:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800361e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800362a:	2b01      	cmp	r3, #1
 800362c:	d106      	bne.n	800363c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	045b      	lsls	r3, r3, #17
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	4b4b      	ldr	r3, [pc, #300]	@ (800378c <HAL_ADC_Init+0x310>)
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	430b      	orrs	r3, r1
 800366a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fed1 	bl	800342e <LL_ADC_REG_IsConversionOngoing>
 800368c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fede 	bl	8003454 <LL_ADC_INJ_IsConversionOngoing>
 8003698:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d17f      	bne.n	80037a0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d17c      	bne.n	80037a0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80036aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036c2:	f023 0302 	bic.w	r3, r3, #2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80036f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80036f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6911      	ldr	r1, [r2, #16]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	430b      	orrs	r3, r1
 8003702:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003706:	e013      	b.n	8003730 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003716:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800372c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003736:	2b01      	cmp	r3, #1
 8003738:	d12a      	bne.n	8003790 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800375c:	430a      	orrs	r2, r1
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	611a      	str	r2, [r3, #16]
 800376a:	e019      	b.n	80037a0 <HAL_ADC_Init+0x324>
 800376c:	20000008 	.word	0x20000008
 8003770:	053e2d63 	.word	0x053e2d63
 8003774:	50000100 	.word	0x50000100
 8003778:	50000400 	.word	0x50000400
 800377c:	50000500 	.word	0x50000500
 8003780:	50000600 	.word	0x50000600
 8003784:	50000300 	.word	0x50000300
 8003788:	50000700 	.word	0x50000700
 800378c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10c      	bne.n	80037c2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f023 010f 	bic.w	r1, r3, #15
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
 80037c0:	e007      	b.n	80037d2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 020f 	bic.w	r2, r2, #15
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037e2:	e007      	b.n	80037f4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f043 0210 	orr.w	r2, r3, #16
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	@ 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop

08003800 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003824:	d004      	beq.n	8003830 <HAL_ADC_IRQHandler+0x30>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a8e      	ldr	r2, [pc, #568]	@ (8003a64 <HAL_ADC_IRQHandler+0x264>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_ADC_IRQHandler+0x34>
 8003830:	4b8d      	ldr	r3, [pc, #564]	@ (8003a68 <HAL_ADC_IRQHandler+0x268>)
 8003832:	e000      	b.n	8003836 <HAL_ADC_IRQHandler+0x36>
 8003834:	4b8d      	ldr	r3, [pc, #564]	@ (8003a6c <HAL_ADC_IRQHandler+0x26c>)
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fd7c 	bl	8003334 <LL_ADC_GetMultimode>
 800383c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d017      	beq.n	8003878 <HAL_ADC_IRQHandler+0x78>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d012      	beq.n	8003878 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fed4 	bl	8004618 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_ADC_IRQHandler+0x8c>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8094 	beq.w	80039c0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 808e 	beq.w	80039c0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fc91 	bl	80031e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d072      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a64      	ldr	r2, [pc, #400]	@ (8003a64 <HAL_ADC_IRQHandler+0x264>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_ADC_IRQHandler+0xea>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a65      	ldr	r2, [pc, #404]	@ (8003a70 <HAL_ADC_IRQHandler+0x270>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d002      	beq.n	80038e6 <HAL_ADC_IRQHandler+0xe6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	e003      	b.n	80038ee <HAL_ADC_IRQHandler+0xee>
 80038e6:	4b63      	ldr	r3, [pc, #396]	@ (8003a74 <HAL_ADC_IRQHandler+0x274>)
 80038e8:	e001      	b.n	80038ee <HAL_ADC_IRQHandler+0xee>
 80038ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d008      	beq.n	8003908 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d002      	beq.n	8003908 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b09      	cmp	r3, #9
 8003906:	d104      	bne.n	8003912 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	623b      	str	r3, [r7, #32]
 8003910:	e014      	b.n	800393c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a53      	ldr	r2, [pc, #332]	@ (8003a64 <HAL_ADC_IRQHandler+0x264>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_ADC_IRQHandler+0x130>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a53      	ldr	r2, [pc, #332]	@ (8003a70 <HAL_ADC_IRQHandler+0x270>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d002      	beq.n	800392c <HAL_ADC_IRQHandler+0x12c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	e003      	b.n	8003934 <HAL_ADC_IRQHandler+0x134>
 800392c:	4b51      	ldr	r3, [pc, #324]	@ (8003a74 <HAL_ADC_IRQHandler+0x274>)
 800392e:	e001      	b.n	8003934 <HAL_ADC_IRQHandler+0x134>
 8003930:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003934:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d135      	bne.n	80039b2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b08      	cmp	r3, #8
 8003952:	d12e      	bne.n	80039b2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fd68 	bl	800342e <LL_ADC_REG_IsConversionOngoing>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11a      	bne.n	800399a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 020c 	bic.w	r2, r2, #12
 8003972:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d112      	bne.n	80039b2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003998:	e00b      	b.n	80039b2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f984 	bl	8003cc0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	220c      	movs	r2, #12
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x1d4>
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80b3 	beq.w	8003b46 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80ad 	beq.w	8003b46 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fc2c 	bl	8003266 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a0e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fbe7 	bl	80031e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a1a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <HAL_ADC_IRQHandler+0x264>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_ADC_IRQHandler+0x23a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a11      	ldr	r2, [pc, #68]	@ (8003a70 <HAL_ADC_IRQHandler+0x270>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d002      	beq.n	8003a36 <HAL_ADC_IRQHandler+0x236>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	e003      	b.n	8003a3e <HAL_ADC_IRQHandler+0x23e>
 8003a36:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <HAL_ADC_IRQHandler+0x274>)
 8003a38:	e001      	b.n	8003a3e <HAL_ADC_IRQHandler+0x23e>
 8003a3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d008      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d002      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b07      	cmp	r3, #7
 8003a56:	d10f      	bne.n	8003a78 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	e01f      	b.n	8003aa2 <HAL_ADC_IRQHandler+0x2a2>
 8003a62:	bf00      	nop
 8003a64:	50000100 	.word	0x50000100
 8003a68:	50000300 	.word	0x50000300
 8003a6c:	50000700 	.word	0x50000700
 8003a70:	50000500 	.word	0x50000500
 8003a74:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a8b      	ldr	r2, [pc, #556]	@ (8003cac <HAL_ADC_IRQHandler+0x4ac>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_ADC_IRQHandler+0x296>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a8a      	ldr	r2, [pc, #552]	@ (8003cb0 <HAL_ADC_IRQHandler+0x4b0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d002      	beq.n	8003a92 <HAL_ADC_IRQHandler+0x292>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	e003      	b.n	8003a9a <HAL_ADC_IRQHandler+0x29a>
 8003a92:	4b88      	ldr	r3, [pc, #544]	@ (8003cb4 <HAL_ADC_IRQHandler+0x4b4>)
 8003a94:	e001      	b.n	8003a9a <HAL_ADC_IRQHandler+0x29a>
 8003a96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d047      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_ADC_IRQHandler+0x2c2>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d03f      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d13a      	bne.n	8003b38 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d133      	bne.n	8003b38 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d12e      	bne.n	8003b38 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fcb8 	bl	8003454 <LL_ADC_INJ_IsConversionOngoing>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11a      	bne.n	8003b20 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003af8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d112      	bne.n	8003b38 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b1e:	e00b      	b.n	8003b38 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	f043 0210 	orr.w	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fd45 	bl	80045c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2260      	movs	r2, #96	@ 0x60
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d011      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x374>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8b4 	bl	8003cd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3a4>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fd2b 	bl	80045f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0x3d4>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fd1d 	bl	8004604 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d043      	beq.n	8003c66 <HAL_ADC_IRQHandler+0x466>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d03e      	beq.n	8003c66 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf4:	e021      	b.n	8003c3a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d015      	beq.n	8003c28 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c04:	d004      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x410>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a28      	ldr	r2, [pc, #160]	@ (8003cac <HAL_ADC_IRQHandler+0x4ac>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_IRQHandler+0x414>
 8003c10:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <HAL_ADC_IRQHandler+0x4b8>)
 8003c12:	e000      	b.n	8003c16 <HAL_ADC_IRQHandler+0x416>
 8003c14:	4b29      	ldr	r3, [pc, #164]	@ (8003cbc <HAL_ADC_IRQHandler+0x4bc>)
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fb9a 	bl	8003350 <LL_ADC_GetMultiDMATransfer>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003c22:	2301      	movs	r3, #1
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c26:	e008      	b.n	8003c3a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003c36:	2301      	movs	r3, #1
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10e      	bne.n	8003c5e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c44:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c50:	f043 0202 	orr.w	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f845 	bl	8003ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2210      	movs	r2, #16
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d018      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0x4a2>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d013      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8a:	f043 0208 	orr.w	r2, r3, #8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fc9d 	bl	80045dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003ca2:	bf00      	nop
 8003ca4:	3728      	adds	r7, #40	@ 0x28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	50000100 	.word	0x50000100
 8003cb0:	50000500 	.word	0x50000500
 8003cb4:	50000400 	.word	0x50000400
 8003cb8:	50000300 	.word	0x50000300
 8003cbc:	50000700 	.word	0x50000700

08003cc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0b6      	sub	sp, #216	@ 0xd8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x24>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	f000 bc13 	b.w	8004546 <HAL_ADC_ConfigChannel+0x84a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fb7e 	bl	800342e <LL_ADC_REG_IsConversionOngoing>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 83f3 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f7ff fa61 	bl	800320e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fb6c 	bl	800342e <LL_ADC_REG_IsConversionOngoing>
 8003d56:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fb78 	bl	8003454 <LL_ADC_INJ_IsConversionOngoing>
 8003d64:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 81d9 	bne.w	8004124 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 81d4 	bne.w	8004124 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d84:	d10f      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7ff fa7b 	bl	800328c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fa0f 	bl	80031c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003da4:	e00e      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7ff fa6a 	bl	800328c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f9ff 	bl	80031c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d022      	beq.n	8003e2c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003df6:	f7ff f959 	bl	80030ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7ff f9a5 	bl	8003156 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6919      	ldr	r1, [r3, #16]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	7f1b      	ldrb	r3, [r3, #28]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d102      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x126>
 8003e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e20:	e000      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x128>
 8003e22:	2300      	movs	r3, #0
 8003e24:	461a      	mov	r2, r3
 8003e26:	f7ff f9b1 	bl	800318c <LL_ADC_SetOffsetSaturation>
 8003e2a:	e17b      	b.n	8004124 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff f95e 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x15c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff f953 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	0e9b      	lsrs	r3, r3, #26
 8003e52:	f003 021f 	and.w	r2, r3, #31
 8003e56:	e01e      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x19a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f948 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e86:	2320      	movs	r3, #32
 8003e88:	e004      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x1b2>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0e9b      	lsrs	r3, r3, #26
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	e018      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x1e4>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	e004      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003ed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d106      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f917 	bl	8003120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff f8fb 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x222>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f8f0 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	0e9b      	lsrs	r3, r3, #26
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	e01e      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x260>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff f8e5 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003f3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	e004      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f54:	fab3 f383 	clz	r3, r3
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x278>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0e9b      	lsrs	r3, r3, #26
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	e018      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x2aa>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e004      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d106      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff f8b4 	bl	8003120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff f898 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x2e8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff f88d 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	0e9b      	lsrs	r3, r3, #26
 8003fde:	f003 021f 	and.w	r2, r3, #31
 8003fe2:	e01e      	b.n	8004022 <HAL_ADC_ConfigChannel+0x326>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff f882 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004002:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800400a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004012:	2320      	movs	r3, #32
 8004014:	e004      	b.n	8004020 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004016:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	2b00      	cmp	r3, #0
 800402c:	d105      	bne.n	800403a <HAL_ADC_ConfigChannel+0x33e>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0e9b      	lsrs	r3, r3, #26
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	e016      	b.n	8004068 <HAL_ADC_ConfigChannel+0x36c>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800404c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800404e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004052:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800405a:	2320      	movs	r3, #32
 800405c:	e004      	b.n	8004068 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800405e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004062:	fab3 f383 	clz	r3, r3
 8004066:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004068:	429a      	cmp	r2, r3
 800406a:	d106      	bne.n	800407a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2200      	movs	r2, #0
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff f853 	bl	8003120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2103      	movs	r1, #3
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f837 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 8004086:	4603      	mov	r3, r0
 8004088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x3aa>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2103      	movs	r1, #3
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff f82c 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	0e9b      	lsrs	r3, r3, #26
 80040a0:	f003 021f 	and.w	r2, r3, #31
 80040a4:	e017      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x3da>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2103      	movs	r1, #3
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff f821 	bl	80030f4 <LL_ADC_GetOffsetChannel>
 80040b2:	4603      	mov	r3, r0
 80040b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80040be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80040c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040c8:	2320      	movs	r3, #32
 80040ca:	e003      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x3f2>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	0e9b      	lsrs	r3, r3, #26
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	e011      	b.n	8004112 <HAL_ADC_ConfigChannel+0x416>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80040fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004106:	2320      	movs	r3, #32
 8004108:	e003      	b.n	8004112 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800410a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800410c:	fab3 f383 	clz	r3, r3
 8004110:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004112:	429a      	cmp	r2, r3
 8004114:	d106      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	2103      	movs	r1, #3
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fffe 	bl	8003120 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff f96d 	bl	8003408 <LL_ADC_IsEnabled>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 813d 	bne.w	80043b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	461a      	mov	r2, r3
 8004144:	f7ff f8ce 	bl	80032e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4aa2      	ldr	r2, [pc, #648]	@ (80043d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	f040 812e 	bne.w	80043b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <HAL_ADC_ConfigChannel+0x480>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0e9b      	lsrs	r3, r3, #26
 800416a:	3301      	adds	r3, #1
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2b09      	cmp	r3, #9
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e019      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x4b4>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800418a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800418c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800418e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004194:	2320      	movs	r3, #32
 8004196:	e003      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004198:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3301      	adds	r3, #1
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	bf94      	ite	ls
 80041aa:	2301      	movls	r3, #1
 80041ac:	2300      	movhi	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d079      	beq.n	80042a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x4d4>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0e9b      	lsrs	r3, r3, #26
 80041c6:	3301      	adds	r3, #1
 80041c8:	069b      	lsls	r3, r3, #26
 80041ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ce:	e015      	b.n	80041fc <HAL_ADC_ConfigChannel+0x500>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80041e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e003      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_ADC_ConfigChannel+0x520>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	0e9b      	lsrs	r3, r3, #26
 800420e:	3301      	adds	r3, #1
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	e017      	b.n	800424c <HAL_ADC_ConfigChannel+0x550>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800422a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800422c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800422e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004234:	2320      	movs	r3, #32
 8004236:	e003      	b.n	8004240 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3301      	adds	r3, #1
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	ea42 0103 	orr.w	r1, r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x576>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	3301      	adds	r3, #1
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	051b      	lsls	r3, r3, #20
 8004270:	e018      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x5a8>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800428a:	2320      	movs	r3, #32
 800428c:	e003      	b.n	8004296 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800428e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004290:	fab3 f383 	clz	r3, r3
 8004294:	b2db      	uxtb	r3, r3
 8004296:	3301      	adds	r3, #1
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a4:	430b      	orrs	r3, r1
 80042a6:	e07e      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x5c8>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0e9b      	lsrs	r3, r3, #26
 80042ba:	3301      	adds	r3, #1
 80042bc:	069b      	lsls	r3, r3, #26
 80042be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042c2:	e015      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x5f4>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	e003      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	069b      	lsls	r3, r3, #26
 80042ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x614>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0e9b      	lsrs	r3, r3, #26
 8004302:	3301      	adds	r3, #1
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	e017      	b.n	8004340 <HAL_ADC_ConfigChannel+0x644>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	61fb      	str	r3, [r7, #28]
  return result;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e003      	b.n	8004334 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3301      	adds	r3, #1
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	ea42 0103 	orr.w	r1, r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10d      	bne.n	800436c <HAL_ADC_ConfigChannel+0x670>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	3301      	adds	r3, #1
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	4613      	mov	r3, r2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4413      	add	r3, r2
 8004362:	3b1e      	subs	r3, #30
 8004364:	051b      	lsls	r3, r3, #20
 8004366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800436a:	e01b      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x6a8>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	613b      	str	r3, [r7, #16]
  return result;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004384:	2320      	movs	r3, #32
 8004386:	e003      	b.n	8004390 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f003 021f 	and.w	r2, r3, #31
 8004396:	4613      	mov	r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4413      	add	r3, r2
 800439c:	3b1e      	subs	r3, #30
 800439e:	051b      	lsls	r3, r3, #20
 80043a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043a4:	430b      	orrs	r3, r1
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	6892      	ldr	r2, [r2, #8]
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7fe ff6e 	bl	800328c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_ADC_ConfigChannel+0x6e0>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80be 	beq.w	800453a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043c6:	d004      	beq.n	80043d2 <HAL_ADC_ConfigChannel+0x6d6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10a      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x6ec>
 80043d2:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80043d4:	e009      	b.n	80043ea <HAL_ADC_ConfigChannel+0x6ee>
 80043d6:	bf00      	nop
 80043d8:	407f0000 	.word	0x407f0000
 80043dc:	80080000 	.word	0x80080000
 80043e0:	50000100 	.word	0x50000100
 80043e4:	50000300 	.word	0x50000300
 80043e8:	4b59      	ldr	r3, [pc, #356]	@ (8004550 <HAL_ADC_ConfigChannel+0x854>)
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fe50 	bl	8003090 <LL_ADC_GetCommonPathInternalCh>
 80043f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a56      	ldr	r2, [pc, #344]	@ (8004554 <HAL_ADC_ConfigChannel+0x858>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_ADC_ConfigChannel+0x70c>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a55      	ldr	r2, [pc, #340]	@ (8004558 <HAL_ADC_ConfigChannel+0x85c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d13a      	bne.n	800447e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800440c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d134      	bne.n	800447e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800441c:	d005      	beq.n	800442a <HAL_ADC_ConfigChannel+0x72e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4e      	ldr	r2, [pc, #312]	@ (800455c <HAL_ADC_ConfigChannel+0x860>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f040 8085 	bne.w	8004534 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004432:	d004      	beq.n	800443e <HAL_ADC_ConfigChannel+0x742>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a49      	ldr	r2, [pc, #292]	@ (8004560 <HAL_ADC_ConfigChannel+0x864>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x746>
 800443e:	4a49      	ldr	r2, [pc, #292]	@ (8004564 <HAL_ADC_ConfigChannel+0x868>)
 8004440:	e000      	b.n	8004444 <HAL_ADC_ConfigChannel+0x748>
 8004442:	4a43      	ldr	r2, [pc, #268]	@ (8004550 <HAL_ADC_ConfigChannel+0x854>)
 8004444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004448:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f7fe fe0b 	bl	800306a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004454:	4b44      	ldr	r3, [pc, #272]	@ (8004568 <HAL_ADC_ConfigChannel+0x86c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	4a44      	ldr	r2, [pc, #272]	@ (800456c <HAL_ADC_ConfigChannel+0x870>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800446e:	e002      	b.n	8004476 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3b01      	subs	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f9      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800447c:	e05a      	b.n	8004534 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3b      	ldr	r2, [pc, #236]	@ (8004570 <HAL_ADC_ConfigChannel+0x874>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d125      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x7d8>
 8004488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800448c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d11f      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a31      	ldr	r2, [pc, #196]	@ (8004560 <HAL_ADC_ConfigChannel+0x864>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d104      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x7ac>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a34      	ldr	r2, [pc, #208]	@ (8004574 <HAL_ADC_ConfigChannel+0x878>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d047      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044b0:	d004      	beq.n	80044bc <HAL_ADC_ConfigChannel+0x7c0>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004560 <HAL_ADC_ConfigChannel+0x864>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x7c4>
 80044bc:	4a29      	ldr	r2, [pc, #164]	@ (8004564 <HAL_ADC_ConfigChannel+0x868>)
 80044be:	e000      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x7c6>
 80044c0:	4a23      	ldr	r2, [pc, #140]	@ (8004550 <HAL_ADC_ConfigChannel+0x854>)
 80044c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fe fdcc 	bl	800306a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044d2:	e031      	b.n	8004538 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a27      	ldr	r2, [pc, #156]	@ (8004578 <HAL_ADC_ConfigChannel+0x87c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d12d      	bne.n	800453a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d127      	bne.n	800453a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004560 <HAL_ADC_ConfigChannel+0x864>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d022      	beq.n	800453a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044fc:	d004      	beq.n	8004508 <HAL_ADC_ConfigChannel+0x80c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a17      	ldr	r2, [pc, #92]	@ (8004560 <HAL_ADC_ConfigChannel+0x864>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d101      	bne.n	800450c <HAL_ADC_ConfigChannel+0x810>
 8004508:	4a16      	ldr	r2, [pc, #88]	@ (8004564 <HAL_ADC_ConfigChannel+0x868>)
 800450a:	e000      	b.n	800450e <HAL_ADC_ConfigChannel+0x812>
 800450c:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <HAL_ADC_ConfigChannel+0x854>)
 800450e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004512:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7fe fda6 	bl	800306a <LL_ADC_SetCommonPathInternalCh>
 800451e:	e00c      	b.n	800453a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004532:	e002      	b.n	800453a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004538:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004542:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004546:	4618      	mov	r0, r3
 8004548:	37d8      	adds	r7, #216	@ 0xd8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	50000700 	.word	0x50000700
 8004554:	c3210000 	.word	0xc3210000
 8004558:	90c00010 	.word	0x90c00010
 800455c:	50000600 	.word	0x50000600
 8004560:	50000100 	.word	0x50000100
 8004564:	50000300 	.word	0x50000300
 8004568:	20000008 	.word	0x20000008
 800456c:	053e2d63 	.word	0x053e2d63
 8004570:	c7520000 	.word	0xc7520000
 8004574:	50000500 	.word	0x50000500
 8004578:	cb840000 	.word	0xcb840000

0800457c <LL_ADC_IsEnabled>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <LL_ADC_IsEnabled+0x18>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <LL_ADC_IsEnabled+0x1a>
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d101      	bne.n	80045ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b0a1      	sub	sp, #132	@ 0x84
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004646:	2302      	movs	r3, #2
 8004648:	e0e7      	b.n	800481a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004652:	2300      	movs	r3, #0
 8004654:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004656:	2300      	movs	r3, #0
 8004658:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004662:	d102      	bne.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004664:	4b6f      	ldr	r3, [pc, #444]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	e009      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6e      	ldr	r2, [pc, #440]	@ (8004828 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d102      	bne.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004674:	4b6d      	ldr	r3, [pc, #436]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	e001      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0be      	b.n	800481a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff7f 	bl	80045a2 <LL_ADC_REG_IsConversionOngoing>
 80046a4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff ff79 	bl	80045a2 <LL_ADC_REG_IsConversionOngoing>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 80a0 	bne.w	80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 809c 	bne.w	80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046c8:	d004      	beq.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a55      	ldr	r2, [pc, #340]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d101      	bne.n	80046d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80046d4:	4b56      	ldr	r3, [pc, #344]	@ (8004830 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80046d6:	e000      	b.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80046d8:	4b56      	ldr	r3, [pc, #344]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80046da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d04b      	beq.n	800477c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046f6:	035b      	lsls	r3, r3, #13
 80046f8:	430b      	orrs	r3, r1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004708:	d004      	beq.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a45      	ldr	r2, [pc, #276]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10f      	bne.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004714:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004718:	f7ff ff30 	bl	800457c <LL_ADC_IsEnabled>
 800471c:	4604      	mov	r4, r0
 800471e:	4841      	ldr	r0, [pc, #260]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004720:	f7ff ff2c 	bl	800457c <LL_ADC_IsEnabled>
 8004724:	4603      	mov	r3, r0
 8004726:	4323      	orrs	r3, r4
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e012      	b.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004734:	483c      	ldr	r0, [pc, #240]	@ (8004828 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004736:	f7ff ff21 	bl	800457c <LL_ADC_IsEnabled>
 800473a:	4604      	mov	r4, r0
 800473c:	483b      	ldr	r0, [pc, #236]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800473e:	f7ff ff1d 	bl	800457c <LL_ADC_IsEnabled>
 8004742:	4603      	mov	r3, r0
 8004744:	431c      	orrs	r4, r3
 8004746:	483c      	ldr	r0, [pc, #240]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004748:	f7ff ff18 	bl	800457c <LL_ADC_IsEnabled>
 800474c:	4603      	mov	r3, r0
 800474e:	4323      	orrs	r3, r4
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d056      	beq.n	800480c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800475e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004766:	f023 030f 	bic.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	6811      	ldr	r1, [r2, #0]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	6892      	ldr	r2, [r2, #8]
 8004772:	430a      	orrs	r2, r1
 8004774:	431a      	orrs	r2, r3
 8004776:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004778:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800477a:	e047      	b.n	800480c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800477c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004786:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004790:	d004      	beq.n	800479c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a23      	ldr	r2, [pc, #140]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d10f      	bne.n	80047bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800479c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047a0:	f7ff feec 	bl	800457c <LL_ADC_IsEnabled>
 80047a4:	4604      	mov	r4, r0
 80047a6:	481f      	ldr	r0, [pc, #124]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047a8:	f7ff fee8 	bl	800457c <LL_ADC_IsEnabled>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4323      	orrs	r3, r4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e012      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80047bc:	481a      	ldr	r0, [pc, #104]	@ (8004828 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047be:	f7ff fedd 	bl	800457c <LL_ADC_IsEnabled>
 80047c2:	4604      	mov	r4, r0
 80047c4:	4819      	ldr	r0, [pc, #100]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047c6:	f7ff fed9 	bl	800457c <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	431c      	orrs	r4, r3
 80047ce:	481a      	ldr	r0, [pc, #104]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047d0:	f7ff fed4 	bl	800457c <LL_ADC_IsEnabled>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4323      	orrs	r3, r4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047ee:	f023 030f 	bic.w	r3, r3, #15
 80047f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80047f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047f6:	e009      	b.n	800480c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800480a:	e000      	b.n	800480e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800480c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004816:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800481a:	4618      	mov	r0, r3
 800481c:	3784      	adds	r7, #132	@ 0x84
 800481e:	46bd      	mov	sp, r7
 8004820:	bd90      	pop	{r4, r7, pc}
 8004822:	bf00      	nop
 8004824:	50000100 	.word	0x50000100
 8004828:	50000400 	.word	0x50000400
 800482c:	50000500 	.word	0x50000500
 8004830:	50000300 	.word	0x50000300
 8004834:	50000700 	.word	0x50000700
 8004838:	50000600 	.word	0x50000600

0800483c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800484c:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <__NVIC_SetPriorityGrouping+0x44>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004858:	4013      	ands	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800486c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800486e:	4a04      	ldr	r2, [pc, #16]	@ (8004880 <__NVIC_SetPriorityGrouping+0x44>)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	60d3      	str	r3, [r2, #12]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004888:	4b04      	ldr	r3, [pc, #16]	@ (800489c <__NVIC_GetPriorityGrouping+0x18>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f003 0307 	and.w	r3, r3, #7
}
 8004892:	4618      	mov	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	db0b      	blt.n	80048ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	4907      	ldr	r1, [pc, #28]	@ (80048d8 <__NVIC_EnableIRQ+0x38>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2001      	movs	r0, #1
 80048c2:	fa00 f202 	lsl.w	r2, r0, r2
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db0a      	blt.n	8004906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	490c      	ldr	r1, [pc, #48]	@ (8004928 <__NVIC_SetPriority+0x4c>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	440b      	add	r3, r1
 8004900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004904:	e00a      	b.n	800491c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4908      	ldr	r1, [pc, #32]	@ (800492c <__NVIC_SetPriority+0x50>)
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3b04      	subs	r3, #4
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	440b      	add	r3, r1
 800491a:	761a      	strb	r2, [r3, #24]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000e100 	.word	0xe000e100
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	@ 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f1c3 0307 	rsb	r3, r3, #7
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf28      	it	cs
 800494e:	2304      	movcs	r3, #4
 8004950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3304      	adds	r3, #4
 8004956:	2b06      	cmp	r3, #6
 8004958:	d902      	bls.n	8004960 <NVIC_EncodePriority+0x30>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3b03      	subs	r3, #3
 800495e:	e000      	b.n	8004962 <NVIC_EncodePriority+0x32>
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	401a      	ands	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004978:	f04f 31ff 	mov.w	r1, #4294967295
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	43d9      	mvns	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	4313      	orrs	r3, r2
         );
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	@ 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049a8:	d301      	bcc.n	80049ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00f      	b.n	80049ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ae:	4a0a      	ldr	r2, [pc, #40]	@ (80049d8 <SysTick_Config+0x40>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049b6:	210f      	movs	r1, #15
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	f7ff ff8e 	bl	80048dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <SysTick_Config+0x40>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c6:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <SysTick_Config+0x40>)
 80049c8:	2207      	movs	r2, #7
 80049ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000e010 	.word	0xe000e010

080049dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff29 	bl	800483c <__NVIC_SetPriorityGrouping>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a00:	f7ff ff40 	bl	8004884 <__NVIC_GetPriorityGrouping>
 8004a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f7ff ff90 	bl	8004930 <NVIC_EncodePriority>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff5f 	bl	80048dc <__NVIC_SetPriority>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff33 	bl	80048a0 <__NVIC_EnableIRQ>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ffa4 	bl	8004998 <SysTick_Config>
 8004a50:	4603      	mov	r3, r0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e08d      	b.n	8004b8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b47      	ldr	r3, [pc, #284]	@ (8004b94 <HAL_DMA_Init+0x138>)
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d80f      	bhi.n	8004a9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4b45      	ldr	r3, [pc, #276]	@ (8004b98 <HAL_DMA_Init+0x13c>)
 8004a82:	4413      	add	r3, r2
 8004a84:	4a45      	ldr	r2, [pc, #276]	@ (8004b9c <HAL_DMA_Init+0x140>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a42      	ldr	r2, [pc, #264]	@ (8004ba0 <HAL_DMA_Init+0x144>)
 8004a96:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a98:	e00e      	b.n	8004ab8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4b40      	ldr	r3, [pc, #256]	@ (8004ba4 <HAL_DMA_Init+0x148>)
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4a3d      	ldr	r2, [pc, #244]	@ (8004b9c <HAL_DMA_Init+0x140>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	009a      	lsls	r2, r3, #2
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba8 <HAL_DMA_Init+0x14c>)
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa1e 	bl	8004f4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b18:	d102      	bne.n	8004b20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b34:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <HAL_DMA_Init+0x104>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d80c      	bhi.n	8004b60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa3e 	bl	8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e008      	b.n	8004b72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40020407 	.word	0x40020407
 8004b98:	bffdfff8 	.word	0xbffdfff8
 8004b9c:	cccccccd 	.word	0xcccccccd
 8004ba0:	40020000 	.word	0x40020000
 8004ba4:	bffdfbf8 	.word	0xbffdfbf8
 8004ba8:	40020400 	.word	0x40020400

08004bac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_DMA_Start_IT+0x20>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e066      	b.n	8004c9a <HAL_DMA_Start_IT+0xee>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d155      	bne.n	8004c8c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f962 	bl	8004ece <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 020e 	orr.w	r2, r2, #14
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e00f      	b.n	8004c44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0204 	bic.w	r2, r2, #4
 8004c32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 020a 	orr.w	r2, r2, #10
 8004c42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c60:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e005      	b.n	8004c98 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
 8004c96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	e047      	b.n	8004d66 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 020e 	bic.w	r2, r2, #14
 8004ce4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0201 	bic.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0a:	f003 021f 	and.w	r2, r3, #31
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	2101      	movs	r1, #1
 8004d14:	fa01 f202 	lsl.w	r2, r1, r2
 8004d18:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00c      	beq.n	8004d46 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
    }
  }
  return status;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	2204      	movs	r2, #4
 8004d92:	409a      	lsls	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d026      	beq.n	8004dea <HAL_DMA_IRQHandler+0x7a>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d021      	beq.n	8004dea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0204 	bic.w	r2, r2, #4
 8004dc2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc8:	f003 021f 	and.w	r2, r3, #31
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2104      	movs	r1, #4
 8004dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d071      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004de8:	e06c      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2202      	movs	r2, #2
 8004df4:	409a      	lsls	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02e      	beq.n	8004e5c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d029      	beq.n	8004e5c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 020a 	bic.w	r2, r2, #10
 8004e24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f003 021f 	and.w	r2, r3, #31
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d038      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e5a:	e033      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2208      	movs	r2, #8
 8004e66:	409a      	lsls	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02a      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d025      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 020e 	bic.w	r2, r2, #14
 8004e88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f003 021f 	and.w	r2, r3, #31
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2101      	movs	r1, #1
 8004e98:	fa01 f202 	lsl.w	r2, r1, r2
 8004e9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
}
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ee4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efc:	f003 021f 	and.w	r2, r3, #31
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	2101      	movs	r1, #1
 8004f06:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d108      	bne.n	8004f2e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f2c:	e007      	b.n	8004f3e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b16      	ldr	r3, [pc, #88]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d802      	bhi.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f60:	4b15      	ldr	r3, [pc, #84]	@ (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e001      	b.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004f66:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004f68:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	3b08      	subs	r3, #8
 8004f76:	4a12      	ldr	r2, [pc, #72]	@ (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	009a      	lsls	r2, r3, #2
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a0b      	ldr	r2, [pc, #44]	@ (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004f96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40020407 	.word	0x40020407
 8004fb8:	40020800 	.word	0x40020800
 8004fbc:	40020820 	.word	0x40020820
 8004fc0:	cccccccd 	.word	0xcccccccd
 8004fc4:	40020880 	.word	0x40020880

08004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a08      	ldr	r2, [pc, #32]	@ (800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004fea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	1000823f 	.word	0x1000823f
 800500c:	40020940 	.word	0x40020940

08005010 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e147      	b.n	80052b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd fb1a 	bl	8002670 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0210 	bic.w	r2, r2, #16
 800504a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800504c:	f7fd ffcc 	bl	8002fe8 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005052:	e012      	b.n	800507a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005054:	f7fd ffc8 	bl	8002fe8 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b0a      	cmp	r3, #10
 8005060:	d90b      	bls.n	800507a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2203      	movs	r2, #3
 8005072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e11b      	b.n	80052b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d0e5      	beq.n	8005054 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005098:	f7fd ffa6 	bl	8002fe8 <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800509e:	e012      	b.n	80050c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050a0:	f7fd ffa2 	bl	8002fe8 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b0a      	cmp	r3, #10
 80050ac:	d90b      	bls.n	80050c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	f043 0201 	orr.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2203      	movs	r2, #3
 80050be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0f5      	b.n	80052b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0e5      	beq.n	80050a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0202 	orr.w	r2, r2, #2
 80050e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a74      	ldr	r2, [pc, #464]	@ (80052bc <HAL_FDCAN_Init+0x2ac>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d103      	bne.n	80050f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80050ee:	4a74      	ldr	r2, [pc, #464]	@ (80052c0 <HAL_FDCAN_Init+0x2b0>)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7c1b      	ldrb	r3, [r3, #16]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d108      	bne.n	8005110 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800510c:	619a      	str	r2, [r3, #24]
 800510e:	e007      	b.n	8005120 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800511e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7c5b      	ldrb	r3, [r3, #17]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d108      	bne.n	800513a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005136:	619a      	str	r2, [r3, #24]
 8005138:	e007      	b.n	800514a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005148:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	7c9b      	ldrb	r3, [r3, #18]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d108      	bne.n	8005164 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005160:	619a      	str	r2, [r3, #24]
 8005162:	e007      	b.n	8005174 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005172:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005198:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0210 	bic.w	r2, r2, #16
 80051a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d108      	bne.n	80051c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0204 	orr.w	r2, r2, #4
 80051c0:	619a      	str	r2, [r3, #24]
 80051c2:	e02c      	b.n	800521e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d028      	beq.n	800521e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d01c      	beq.n	800520e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80051e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0210 	orr.w	r2, r2, #16
 80051f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d110      	bne.n	800521e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0220 	orr.w	r2, r2, #32
 800520a:	619a      	str	r2, [r3, #24]
 800520c:	e007      	b.n	800521e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0220 	orr.w	r2, r2, #32
 800521c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	3b01      	subs	r3, #1
 8005224:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	3b01      	subs	r3, #1
 800522c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800522e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005236:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	3b01      	subs	r3, #1
 8005240:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005246:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005248:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005252:	d115      	bne.n	8005280 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	3b01      	subs	r3, #1
 8005260:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005262:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005268:	3b01      	subs	r3, #1
 800526a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800526c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	3b01      	subs	r3, #1
 8005276:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800527c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800527e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fbe2 	bl	8005a60 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40006400 	.word	0x40006400
 80052c0:	40006500 	.word	0x40006500

080052c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d110      	bne.n	80052fa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e006      	b.n	8005308 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fe:	f043 0204 	orr.w	r2, r3, #4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d12c      	bne.n	8005386 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005340:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e023      	b.n	8005394 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fbe8 	bl	8005b38 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2101      	movs	r1, #1
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	fa01 f202 	lsl.w	r2, r1, r2
 8005374:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005378:	2201      	movs	r2, #1
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	409a      	lsls	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	e006      	b.n	8005394 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800538a:	f043 0208 	orr.w	r2, r3, #8
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
  }
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800539c:	b480      	push	{r7}
 800539e:	b08b      	sub	sp, #44	@ 0x2c
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80053b2:	7efb      	ldrb	r3, [r7, #27]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	f040 80bc 	bne.w	8005532 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b40      	cmp	r3, #64	@ 0x40
 80053be:	d121      	bne.n	8005404 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d107      	bne.n	80053e0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0af      	b.n	8005540 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	4613      	mov	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	4413      	add	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	440b      	add	r3, r1
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
 8005402:	e020      	b.n	8005446 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005418:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e08d      	b.n	8005540 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800542c:	0a1b      	lsrs	r3, r3, #8
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	4613      	mov	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	0c9b      	lsrs	r3, r3, #18
 8005460:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e005      	b.n	8005476 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	3304      	adds	r3, #4
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b29a      	uxth	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	0e1b      	lsrs	r3, r3, #24
 80054c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	0fda      	lsrs	r2, r3, #31
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	3304      	adds	r3, #4
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80054e4:	2300      	movs	r3, #0
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	e00a      	b.n	8005500 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	441a      	add	r2, r3
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	440b      	add	r3, r1
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	3301      	adds	r3, #1
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	4a11      	ldr	r2, [pc, #68]	@ (800554c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8005508:	5cd3      	ldrb	r3, [r2, r3]
 800550a:	461a      	mov	r2, r3
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	4293      	cmp	r3, r2
 8005510:	d3eb      	bcc.n	80054ea <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b40      	cmp	r3, #64	@ 0x40
 8005516:	d105      	bne.n	8005524 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005522:	e004      	b.n	800552e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e006      	b.n	8005540 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005536:	f043 0208 	orr.w	r2, r3, #8
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	372c      	adds	r7, #44	@ 0x2c
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	0800e0c8 	.word	0x0800e0c8

08005550 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005562:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d003      	beq.n	8005572 <HAL_FDCAN_ActivateNotification+0x22>
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b02      	cmp	r3, #2
 800556e:	f040 80c8 	bne.w	8005702 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005578:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d03b      	beq.n	8005606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d031      	beq.n	8005606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d027      	beq.n	8005606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01d      	beq.n	8005606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d013      	beq.n	8005606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00c      	beq.n	8005616 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0201 	orr.w	r2, r2, #1
 8005614:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d13b      	bne.n	80056a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d131      	bne.n	80056a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d127      	bne.n	80056a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11d      	bne.n	80056a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b00      	cmp	r3, #0
 8005678:	d113      	bne.n	80056a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0202 	orr.w	r2, r2, #2
 80056b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d009      	beq.n	80056d0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e006      	b.n	8005710 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005706:	f043 0202 	orr.w	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
  }
}
 8005710:	4618      	mov	r0, r3
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	@ 0x28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	4013      	ands	r3, r2
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574e:	6a3a      	ldr	r2, [r7, #32]
 8005750:	4013      	ands	r3, r2
 8005752:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800575e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	4013      	ands	r3, r2
 800576a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005772:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005776:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4013      	ands	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800578e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4013      	ands	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d006      	beq.n	80057c6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2240      	movs	r2, #64	@ 0x40
 80057be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f92e 	bl	8005a22 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d014      	beq.n	800580c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057ea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005802:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005804:	6939      	ldr	r1, [r7, #16]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8ec 	bl	80059e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005818:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800581a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f8b6 	bl	800598e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6a3a      	ldr	r2, [r7, #32]
 800582e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005830:	6a39      	ldr	r1, [r7, #32]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb faca 	bl	8000dcc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005846:	69f9      	ldr	r1, [r7, #28]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f8ab 	bl	80059a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005872:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8a0 	bl	80059ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d013      	beq.n	80058be <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800589e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4013      	ands	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2280      	movs	r2, #128	@ 0x80
 80058b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f888 	bl	80059ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f888 	bl	80059fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00e      	beq.n	8005916 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800590e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f87c 	bl	8005a0e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d011      	beq.n	8005948 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800593a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005940:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f876 	bl	8005a4a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f858 	bl	8005a36 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005986:	bf00      	nop
 8005988:	3728      	adds	r7, #40	@ 0x28
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005a68:	4b30      	ldr	r3, [pc, #192]	@ (8005b2c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005a6a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2f      	ldr	r2, [pc, #188]	@ (8005b30 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d103      	bne.n	8005a7e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005a7c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a2c      	ldr	r2, [pc, #176]	@ (8005b34 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d103      	bne.n	8005a90 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005a8e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a9e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa6:	041a      	lsls	r2, r3, #16
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005acc:	061a      	lsls	r2, r3, #24
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e005      	b.n	8005b12 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3f3      	bcc.n	8005b06 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	4000a400 	.word	0x4000a400
 8005b30:	40006800 	.word	0x40006800
 8005b34:	40006c00 	.word	0x40006c00

08005b38 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	@ 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005b56:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	e00a      	b.n	8005b7a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005b6c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005b72:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b78:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b84:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005b8a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005b90:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	440b      	add	r3, r1
 8005baa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e020      	b.n	8005c0c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	3303      	adds	r3, #3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	3302      	adds	r3, #2
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	440b      	add	r3, r1
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005be2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3301      	adds	r3, #1
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	440b      	add	r3, r1
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005bf0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005bfa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	3304      	adds	r3, #4
 8005c04:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	4a06      	ldr	r2, [pc, #24]	@ (8005c2c <FDCAN_CopyMessageToRAM+0xf4>)
 8005c14:	5cd3      	ldrb	r3, [r2, r3]
 8005c16:	461a      	mov	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d3d5      	bcc.n	8005bca <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	3724      	adds	r7, #36	@ 0x24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	0800e0c8 	.word	0x0800e0c8

08005c30 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c42:	4b24      	ldr	r3, [pc, #144]	@ (8005cd4 <HAL_FLASH_Program+0xa4>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_FLASH_Program+0x1e>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e03e      	b.n	8005ccc <HAL_FLASH_Program+0x9c>
 8005c4e:	4b21      	ldr	r3, [pc, #132]	@ (8005cd4 <HAL_FLASH_Program+0xa4>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c58:	f000 f87c 	bl	8005d54 <FLASH_WaitForLastOperation>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d12e      	bne.n	8005cc4 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c66:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd4 <HAL_FLASH_Program+0xa4>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c76:	68b8      	ldr	r0, [r7, #8]
 8005c78:	f000 f8be 	bl	8005df8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	e010      	b.n	8005ca4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d002      	beq.n	8005c8e <HAL_FLASH_Program+0x5e>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d10a      	bne.n	8005ca4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	4619      	mov	r1, r3
 8005c92:	68b8      	ldr	r0, [r7, #8]
 8005c94:	f000 f8d6 	bl	8005e44 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d102      	bne.n	8005ca4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005c9e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005ca2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ca4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ca8:	f000 f854 	bl	8005d54 <FLASH_WaitForLastOperation>
 8005cac:	4603      	mov	r3, r0
 8005cae:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d006      	beq.n	8005cc4 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005cb6:	4b08      	ldr	r3, [pc, #32]	@ (8005cd8 <HAL_FLASH_Program+0xa8>)
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	4906      	ldr	r1, [pc, #24]	@ (8005cd8 <HAL_FLASH_Program+0xa8>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005cc4:	4b03      	ldr	r3, [pc, #12]	@ (8005cd4 <HAL_FLASH_Program+0xa4>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20000014 	.word	0x20000014
 8005cd8:	40022000 	.word	0x40022000

08005cdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d14 <HAL_FLASH_Unlock+0x38>)
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da0b      	bge.n	8005d06 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cee:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <HAL_FLASH_Unlock+0x38>)
 8005cf0:	4a09      	ldr	r2, [pc, #36]	@ (8005d18 <HAL_FLASH_Unlock+0x3c>)
 8005cf2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cf4:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <HAL_FLASH_Unlock+0x38>)
 8005cf6:	4a09      	ldr	r2, [pc, #36]	@ (8005d1c <HAL_FLASH_Unlock+0x40>)
 8005cf8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005cfa:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_FLASH_Unlock+0x38>)
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da01      	bge.n	8005d06 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005d06:	79fb      	ldrb	r3, [r7, #7]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40022000 	.word	0x40022000
 8005d18:	45670123 	.word	0x45670123
 8005d1c:	cdef89ab 	.word	0xcdef89ab

08005d20 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d2a:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <HAL_FLASH_Lock+0x30>)
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	4a08      	ldr	r2, [pc, #32]	@ (8005d50 <HAL_FLASH_Lock+0x30>)
 8005d30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d34:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005d36:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <HAL_FLASH_Lock+0x30>)
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da01      	bge.n	8005d42 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d42:	79fb      	ldrb	r3, [r7, #7]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40022000 	.word	0x40022000

08005d54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7fd f944 	bl	8002fe8 <HAL_GetTick>
 8005d60:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d62:	e009      	b.n	8005d78 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005d64:	f7fd f940 	bl	8002fe8 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d201      	bcs.n	8005d78 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e037      	b.n	8005de8 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d78:	4b1d      	ldr	r3, [pc, #116]	@ (8005df0 <FLASH_WaitForLastOperation+0x9c>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d84:	d0ee      	beq.n	8005d64 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <FLASH_WaitForLastOperation+0x9c>)
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01d      	beq.n	8005dd4 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8005d98:	4b16      	ldr	r3, [pc, #88]	@ (8005df4 <FLASH_WaitForLastOperation+0xa0>)
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	4a14      	ldr	r2, [pc, #80]	@ (8005df4 <FLASH_WaitForLastOperation+0xa0>)
 8005da2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005daa:	d307      	bcc.n	8005dbc <FLASH_WaitForLastOperation+0x68>
 8005dac:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <FLASH_WaitForLastOperation+0x9c>)
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005db6:	490e      	ldr	r1, [pc, #56]	@ (8005df0 <FLASH_WaitForLastOperation+0x9c>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	618b      	str	r3, [r1, #24]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <FLASH_WaitForLastOperation+0x7c>
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005df0 <FLASH_WaitForLastOperation+0x9c>)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005dce:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e009      	b.n	8005de8 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005dd4:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <FLASH_WaitForLastOperation+0x9c>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d102      	bne.n	8005de6 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005de0:	4b03      	ldr	r3, [pc, #12]	@ (8005df0 <FLASH_WaitForLastOperation+0x9c>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40022000 	.word	0x40022000
 8005df4:	20000014 	.word	0x20000014

08005df8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005e04:	4b0e      	ldr	r3, [pc, #56]	@ (8005e40 <FLASH_Program_DoubleWord+0x48>)
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	4a0d      	ldr	r2, [pc, #52]	@ (8005e40 <FLASH_Program_DoubleWord+0x48>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005e16:	f3bf 8f6f 	isb	sy
}
 8005e1a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	000a      	movs	r2, r1
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	3104      	adds	r1, #4
 8005e30:	4613      	mov	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	40022000 	.word	0x40022000

08005e44 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	@ 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005e4e:	2340      	movs	r3, #64	@ 0x40
 8005e50:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005e5a:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <FLASH_Program_Fast+0x68>)
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	4a13      	ldr	r2, [pc, #76]	@ (8005eac <FLASH_Program_Fast+0x68>)
 8005e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e66:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e6c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e70:	b672      	cpsid	i
}
 8005e72:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	3304      	adds	r3, #4
 8005e86:	617b      	str	r3, [r7, #20]
    row_index--;
 8005e88:	7ffb      	ldrb	r3, [r7, #31]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005e8e:	7ffb      	ldrb	r3, [r7, #31]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ef      	bne.n	8005e74 <FLASH_Program_Fast+0x30>
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f383 8810 	msr	PRIMASK, r3
}
 8005e9e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005ea0:	bf00      	nop
 8005ea2:	3724      	adds	r7, #36	@ 0x24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40022000 	.word	0x40022000

08005eb0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005eba:	4b49      	ldr	r3, [pc, #292]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_FLASHEx_Erase+0x16>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e087      	b.n	8005fd6 <HAL_FLASHEx_Erase+0x126>
 8005ec6:	4b46      	ldr	r3, [pc, #280]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ecc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ed0:	f7ff ff40 	bl	8005d54 <FLASH_WaitForLastOperation>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d177      	bne.n	8005fce <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ede:	4b40      	ldr	r3, [pc, #256]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d013      	beq.n	8005f18 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005ef0:	4b3c      	ldr	r3, [pc, #240]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005efc:	4b39      	ldr	r3, [pc, #228]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a38      	ldr	r2, [pc, #224]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f06:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005f08:	4b35      	ldr	r3, [pc, #212]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	771a      	strb	r2, [r3, #28]
 8005f0e:	e016      	b.n	8005f3e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005f10:	4b33      	ldr	r3, [pc, #204]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	771a      	strb	r2, [r3, #28]
 8005f16:	e012      	b.n	8005f3e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f18:	4b32      	ldr	r3, [pc, #200]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f24:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f2e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005f30:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005f32:	2202      	movs	r2, #2
 8005f34:	771a      	strb	r2, [r3, #28]
 8005f36:	e002      	b.n	8005f3e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005f38:	4b29      	ldr	r3, [pc, #164]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d113      	bne.n	8005f6e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f84c 	bl	8005fe8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f54:	f7ff fefe 	bl	8005d54 <FLASH_WaitForLastOperation>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005f5c:	4b21      	ldr	r3, [pc, #132]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	4a20      	ldr	r2, [pc, #128]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f66:	f023 0304 	bic.w	r3, r3, #4
 8005f6a:	6153      	str	r3, [r2, #20]
 8005f6c:	e02d      	b.n	8005fca <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	e01d      	b.n	8005fba <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4619      	mov	r1, r3
 8005f84:	68b8      	ldr	r0, [r7, #8]
 8005f86:	f000 f867 	bl	8006058 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f8e:	f7ff fee1 	bl	8005d54 <FLASH_WaitForLastOperation>
 8005f92:	4603      	mov	r3, r0
 8005f94:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005f96:	4b13      	ldr	r3, [pc, #76]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	4a12      	ldr	r2, [pc, #72]	@ (8005fe4 <HAL_FLASHEx_Erase+0x134>)
 8005f9c:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005fa0:	f023 0302 	bic.w	r3, r3, #2
 8005fa4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	601a      	str	r2, [r3, #0]
          break;
 8005fb2:	e00a      	b.n	8005fca <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d3d9      	bcc.n	8005f7e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005fca:	f000 f889 	bl	80060e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fce:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <HAL_FLASHEx_Erase+0x130>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]

  return status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000014 	.word	0x20000014
 8005fe4:	40022000 	.word	0x40022000

08005fe8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8005ff0:	4b18      	ldr	r3, [pc, #96]	@ (8006054 <FLASH_MassErase+0x6c>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d016      	beq.n	800602a <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006006:	4b13      	ldr	r3, [pc, #76]	@ (8006054 <FLASH_MassErase+0x6c>)
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	4a12      	ldr	r2, [pc, #72]	@ (8006054 <FLASH_MassErase+0x6c>)
 800600c:	f043 0304 	orr.w	r3, r3, #4
 8006010:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00e      	beq.n	800603a <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800601c:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <FLASH_MassErase+0x6c>)
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	4a0c      	ldr	r2, [pc, #48]	@ (8006054 <FLASH_MassErase+0x6c>)
 8006022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006026:	6153      	str	r3, [r2, #20]
 8006028:	e007      	b.n	800603a <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800602a:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <FLASH_MassErase+0x6c>)
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4a09      	ldr	r2, [pc, #36]	@ (8006054 <FLASH_MassErase+0x6c>)
 8006030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800603a:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <FLASH_MassErase+0x6c>)
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	4a05      	ldr	r2, [pc, #20]	@ (8006054 <FLASH_MassErase+0x6c>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006044:	6153      	str	r3, [r2, #20]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40022000 	.word	0x40022000

08006058 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8006062:	4b1e      	ldr	r3, [pc, #120]	@ (80060dc <FLASH_PageErase+0x84>)
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800606e:	4b1b      	ldr	r3, [pc, #108]	@ (80060dc <FLASH_PageErase+0x84>)
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <FLASH_PageErase+0x84>)
 8006074:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006078:	6153      	str	r3, [r2, #20]
 800607a:	e011      	b.n	80060a0 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d006      	beq.n	8006094 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006086:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <FLASH_PageErase+0x84>)
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	4a14      	ldr	r2, [pc, #80]	@ (80060dc <FLASH_PageErase+0x84>)
 800608c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006090:	6153      	str	r3, [r2, #20]
 8006092:	e005      	b.n	80060a0 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006094:	4b11      	ldr	r3, [pc, #68]	@ (80060dc <FLASH_PageErase+0x84>)
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	4a10      	ldr	r2, [pc, #64]	@ (80060dc <FLASH_PageErase+0x84>)
 800609a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800609e:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80060a0:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <FLASH_PageErase+0x84>)
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80060b0:	490a      	ldr	r1, [pc, #40]	@ (80060dc <FLASH_PageErase+0x84>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80060b6:	4b09      	ldr	r3, [pc, #36]	@ (80060dc <FLASH_PageErase+0x84>)
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	4a08      	ldr	r2, [pc, #32]	@ (80060dc <FLASH_PageErase+0x84>)
 80060bc:	f043 0302 	orr.w	r3, r3, #2
 80060c0:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80060c2:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <FLASH_PageErase+0x84>)
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	4a05      	ldr	r2, [pc, #20]	@ (80060dc <FLASH_PageErase+0x84>)
 80060c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060cc:	6153      	str	r3, [r2, #20]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40022000 	.word	0x40022000

080060e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80060e6:	4b21      	ldr	r3, [pc, #132]	@ (800616c <FLASH_FlushCaches+0x8c>)
 80060e8:	7f1b      	ldrb	r3, [r3, #28]
 80060ea:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d002      	beq.n	80060f8 <FLASH_FlushCaches+0x18>
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d117      	bne.n	8006128 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <FLASH_FlushCaches+0x90>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006170 <FLASH_FlushCaches+0x90>)
 80060fe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006102:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006104:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <FLASH_FlushCaches+0x90>)
 800610a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a16      	ldr	r2, [pc, #88]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006116:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800611a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800611c:	4b14      	ldr	r3, [pc, #80]	@ (8006170 <FLASH_FlushCaches+0x90>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a13      	ldr	r2, [pc, #76]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006122:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006126:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d002      	beq.n	8006134 <FLASH_FlushCaches+0x54>
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d111      	bne.n	8006158 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006134:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a0d      	ldr	r2, [pc, #52]	@ (8006170 <FLASH_FlushCaches+0x90>)
 800613a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a0a      	ldr	r2, [pc, #40]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006146:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800614a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800614c:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <FLASH_FlushCaches+0x90>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a07      	ldr	r2, [pc, #28]	@ (8006170 <FLASH_FlushCaches+0x90>)
 8006152:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006156:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006158:	4b04      	ldr	r3, [pc, #16]	@ (800616c <FLASH_FlushCaches+0x8c>)
 800615a:	2200      	movs	r2, #0
 800615c:	771a      	strb	r2, [r3, #28]
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000014 	.word	0x20000014
 8006170:	40022000 	.word	0x40022000

08006174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006182:	e15a      	b.n	800643a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	2101      	movs	r1, #1
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	4013      	ands	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 814c 	beq.w	8006434 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d005      	beq.n	80061b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d130      	bne.n	8006216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	2203      	movs	r2, #3
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4013      	ands	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061ea:	2201      	movs	r2, #1
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4013      	ands	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	091b      	lsrs	r3, r3, #4
 8006200:	f003 0201 	and.w	r2, r3, #1
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b03      	cmp	r3, #3
 8006220:	d017      	beq.n	8006252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	2203      	movs	r2, #3
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d123      	bne.n	80062a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	08da      	lsrs	r2, r3, #3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3208      	adds	r2, #8
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	220f      	movs	r2, #15
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	43db      	mvns	r3, r3
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4013      	ands	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	08da      	lsrs	r2, r3, #3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3208      	adds	r2, #8
 80062a0:	6939      	ldr	r1, [r7, #16]
 80062a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	2203      	movs	r2, #3
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4013      	ands	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f003 0203 	and.w	r2, r3, #3
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 80a6 	beq.w	8006434 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062e8:	4b5b      	ldr	r3, [pc, #364]	@ (8006458 <HAL_GPIO_Init+0x2e4>)
 80062ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ec:	4a5a      	ldr	r2, [pc, #360]	@ (8006458 <HAL_GPIO_Init+0x2e4>)
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80062f4:	4b58      	ldr	r3, [pc, #352]	@ (8006458 <HAL_GPIO_Init+0x2e4>)
 80062f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	60bb      	str	r3, [r7, #8]
 80062fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006300:	4a56      	ldr	r2, [pc, #344]	@ (800645c <HAL_GPIO_Init+0x2e8>)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	089b      	lsrs	r3, r3, #2
 8006306:	3302      	adds	r3, #2
 8006308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800630c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	220f      	movs	r2, #15
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	43db      	mvns	r3, r3
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4013      	ands	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800632a:	d01f      	beq.n	800636c <HAL_GPIO_Init+0x1f8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a4c      	ldr	r2, [pc, #304]	@ (8006460 <HAL_GPIO_Init+0x2ec>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d019      	beq.n	8006368 <HAL_GPIO_Init+0x1f4>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a4b      	ldr	r2, [pc, #300]	@ (8006464 <HAL_GPIO_Init+0x2f0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_GPIO_Init+0x1f0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a4a      	ldr	r2, [pc, #296]	@ (8006468 <HAL_GPIO_Init+0x2f4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00d      	beq.n	8006360 <HAL_GPIO_Init+0x1ec>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a49      	ldr	r2, [pc, #292]	@ (800646c <HAL_GPIO_Init+0x2f8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <HAL_GPIO_Init+0x1e8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a48      	ldr	r2, [pc, #288]	@ (8006470 <HAL_GPIO_Init+0x2fc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d101      	bne.n	8006358 <HAL_GPIO_Init+0x1e4>
 8006354:	2305      	movs	r3, #5
 8006356:	e00a      	b.n	800636e <HAL_GPIO_Init+0x1fa>
 8006358:	2306      	movs	r3, #6
 800635a:	e008      	b.n	800636e <HAL_GPIO_Init+0x1fa>
 800635c:	2304      	movs	r3, #4
 800635e:	e006      	b.n	800636e <HAL_GPIO_Init+0x1fa>
 8006360:	2303      	movs	r3, #3
 8006362:	e004      	b.n	800636e <HAL_GPIO_Init+0x1fa>
 8006364:	2302      	movs	r3, #2
 8006366:	e002      	b.n	800636e <HAL_GPIO_Init+0x1fa>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <HAL_GPIO_Init+0x1fa>
 800636c:	2300      	movs	r3, #0
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	f002 0203 	and.w	r2, r2, #3
 8006374:	0092      	lsls	r2, r2, #2
 8006376:	4093      	lsls	r3, r2
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800637e:	4937      	ldr	r1, [pc, #220]	@ (800645c <HAL_GPIO_Init+0x2e8>)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	3302      	adds	r3, #2
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800638c:	4b39      	ldr	r3, [pc, #228]	@ (8006474 <HAL_GPIO_Init+0x300>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	43db      	mvns	r3, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4013      	ands	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063b0:	4a30      	ldr	r2, [pc, #192]	@ (8006474 <HAL_GPIO_Init+0x300>)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006474 <HAL_GPIO_Init+0x300>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	43db      	mvns	r3, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4013      	ands	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063da:	4a26      	ldr	r2, [pc, #152]	@ (8006474 <HAL_GPIO_Init+0x300>)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063e0:	4b24      	ldr	r3, [pc, #144]	@ (8006474 <HAL_GPIO_Init+0x300>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	43db      	mvns	r3, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4013      	ands	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006404:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <HAL_GPIO_Init+0x300>)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800640a:	4b1a      	ldr	r3, [pc, #104]	@ (8006474 <HAL_GPIO_Init+0x300>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	43db      	mvns	r3, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4013      	ands	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800642e:	4a11      	ldr	r2, [pc, #68]	@ (8006474 <HAL_GPIO_Init+0x300>)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	3301      	adds	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	f47f ae9d 	bne.w	8006184 <HAL_GPIO_Init+0x10>
  }
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	40021000 	.word	0x40021000
 800645c:	40010000 	.word	0x40010000
 8006460:	48000400 	.word	0x48000400
 8006464:	48000800 	.word	0x48000800
 8006468:	48000c00 	.word	0x48000c00
 800646c:	48001000 	.word	0x48001000
 8006470:	48001400 	.word	0x48001400
 8006474:	40010400 	.word	0x40010400

08006478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	807b      	strh	r3, [r7, #2]
 8006484:	4613      	mov	r3, r2
 8006486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006488:	787b      	ldrb	r3, [r7, #1]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800648e:	887a      	ldrh	r2, [r7, #2]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006494:	e002      	b.n	800649c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006496:	887a      	ldrh	r2, [r7, #2]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80064ba:	887a      	ldrh	r2, [r7, #2]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4013      	ands	r3, r2
 80064c0:	041a      	lsls	r2, r3, #16
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	43d9      	mvns	r1, r3
 80064c6:	887b      	ldrh	r3, [r7, #2]
 80064c8:	400b      	ands	r3, r1
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	619a      	str	r2, [r3, #24]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064e6:	4b08      	ldr	r3, [pc, #32]	@ (8006508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064e8:	695a      	ldr	r2, [r3, #20]
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d006      	beq.n	8006500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064f2:	4a05      	ldr	r2, [pc, #20]	@ (8006508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fa fc58 	bl	8000db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40010400 	.word	0x40010400

0800650c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d141      	bne.n	800659e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800651a:	4b4b      	ldr	r3, [pc, #300]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006526:	d131      	bne.n	800658c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006528:	4b47      	ldr	r3, [pc, #284]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800652a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800652e:	4a46      	ldr	r2, [pc, #280]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006538:	4b43      	ldr	r3, [pc, #268]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006540:	4a41      	ldr	r2, [pc, #260]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006546:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006548:	4b40      	ldr	r3, [pc, #256]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2232      	movs	r2, #50	@ 0x32
 800654e:	fb02 f303 	mul.w	r3, r2, r3
 8006552:	4a3f      	ldr	r2, [pc, #252]	@ (8006650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	0c9b      	lsrs	r3, r3, #18
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800655e:	e002      	b.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3b01      	subs	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006566:	4b38      	ldr	r3, [pc, #224]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800656e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006572:	d102      	bne.n	800657a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f2      	bne.n	8006560 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800657a:	4b33      	ldr	r3, [pc, #204]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006586:	d158      	bne.n	800663a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e057      	b.n	800663c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800658c:	4b2e      	ldr	r3, [pc, #184]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800658e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006592:	4a2d      	ldr	r2, [pc, #180]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800659c:	e04d      	b.n	800663a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a4:	d141      	bne.n	800662a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065a6:	4b28      	ldr	r3, [pc, #160]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80065ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b2:	d131      	bne.n	8006618 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065b4:	4b24      	ldr	r3, [pc, #144]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ba:	4a23      	ldr	r2, [pc, #140]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065c4:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065d4:	4b1d      	ldr	r3, [pc, #116]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2232      	movs	r2, #50	@ 0x32
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	4a1c      	ldr	r2, [pc, #112]	@ (8006650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	0c9b      	lsrs	r3, r3, #18
 80065e6:	3301      	adds	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ea:	e002      	b.n	80065f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065f2:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065fe:	d102      	bne.n	8006606 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f2      	bne.n	80065ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006606:	4b10      	ldr	r3, [pc, #64]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006612:	d112      	bne.n	800663a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e011      	b.n	800663c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006618:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800661a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661e:	4a0a      	ldr	r2, [pc, #40]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006628:	e007      	b.n	800663a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800662a:	4b07      	ldr	r3, [pc, #28]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006632:	4a05      	ldr	r2, [pc, #20]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006634:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006638:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40007000 	.word	0x40007000
 800664c:	20000008 	.word	0x20000008
 8006650:	431bde83 	.word	0x431bde83

08006654 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4a04      	ldr	r2, [pc, #16]	@ (8006670 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800665e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006662:	6093      	str	r3, [r2, #8]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40007000 	.word	0x40007000

08006674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e306      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d075      	beq.n	800677e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006692:	4b97      	ldr	r3, [pc, #604]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800669c:	4b94      	ldr	r3, [pc, #592]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d102      	bne.n	80066b2 <HAL_RCC_OscConfig+0x3e>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d002      	beq.n	80066b8 <HAL_RCC_OscConfig+0x44>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d10b      	bne.n	80066d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b8:	4b8d      	ldr	r3, [pc, #564]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d05b      	beq.n	800677c <HAL_RCC_OscConfig+0x108>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d157      	bne.n	800677c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e2e1      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d8:	d106      	bne.n	80066e8 <HAL_RCC_OscConfig+0x74>
 80066da:	4b85      	ldr	r3, [pc, #532]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a84      	ldr	r2, [pc, #528]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e01d      	b.n	8006724 <HAL_RCC_OscConfig+0xb0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066f0:	d10c      	bne.n	800670c <HAL_RCC_OscConfig+0x98>
 80066f2:	4b7f      	ldr	r3, [pc, #508]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a7e      	ldr	r2, [pc, #504]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80066f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4b7c      	ldr	r3, [pc, #496]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a7b      	ldr	r2, [pc, #492]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e00b      	b.n	8006724 <HAL_RCC_OscConfig+0xb0>
 800670c:	4b78      	ldr	r3, [pc, #480]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a77      	ldr	r2, [pc, #476]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	4b75      	ldr	r3, [pc, #468]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a74      	ldr	r2, [pc, #464]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800671e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d013      	beq.n	8006754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fc fc5c 	bl	8002fe8 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006734:	f7fc fc58 	bl	8002fe8 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	@ 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e2a6      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006746:	4b6a      	ldr	r3, [pc, #424]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCC_OscConfig+0xc0>
 8006752:	e014      	b.n	800677e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fc fc48 	bl	8002fe8 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800675c:	f7fc fc44 	bl	8002fe8 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b64      	cmp	r3, #100	@ 0x64
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e292      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800676e:	4b60      	ldr	r3, [pc, #384]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0xe8>
 800677a:	e000      	b.n	800677e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800677c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d075      	beq.n	8006876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678a:	4b59      	ldr	r3, [pc, #356]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 030c 	and.w	r3, r3, #12
 8006792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006794:	4b56      	ldr	r3, [pc, #344]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d102      	bne.n	80067aa <HAL_RCC_OscConfig+0x136>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d002      	beq.n	80067b0 <HAL_RCC_OscConfig+0x13c>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d11f      	bne.n	80067f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067b0:	4b4f      	ldr	r3, [pc, #316]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_RCC_OscConfig+0x154>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e265      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c8:	4b49      	ldr	r3, [pc, #292]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	061b      	lsls	r3, r3, #24
 80067d6:	4946      	ldr	r1, [pc, #280]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067dc:	4b45      	ldr	r3, [pc, #276]	@ (80068f4 <HAL_RCC_OscConfig+0x280>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fc fbb5 	bl	8002f50 <HAL_InitTick>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d043      	beq.n	8006874 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e251      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d023      	beq.n	8006840 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067f8:	4b3d      	ldr	r3, [pc, #244]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a3c      	ldr	r2, [pc, #240]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80067fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fc fbf0 	bl	8002fe8 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800680c:	f7fc fbec 	bl	8002fe8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e23a      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800681e:	4b34      	ldr	r3, [pc, #208]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f0      	beq.n	800680c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800682a:	4b31      	ldr	r3, [pc, #196]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	492d      	ldr	r1, [pc, #180]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800683a:	4313      	orrs	r3, r2
 800683c:	604b      	str	r3, [r1, #4]
 800683e:	e01a      	b.n	8006876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006840:	4b2b      	ldr	r3, [pc, #172]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2a      	ldr	r2, [pc, #168]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800684a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fc fbcc 	bl	8002fe8 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006854:	f7fc fbc8 	bl	8002fe8 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e216      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006866:	4b22      	ldr	r3, [pc, #136]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0x1e0>
 8006872:	e000      	b.n	8006876 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006874:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d041      	beq.n	8006906 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01c      	beq.n	80068c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800688a:	4b19      	ldr	r3, [pc, #100]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 800688c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006890:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689a:	f7fc fba5 	bl	8002fe8 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a2:	f7fc fba1 	bl	8002fe8 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e1ef      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068b4:	4b0e      	ldr	r3, [pc, #56]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80068b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ef      	beq.n	80068a2 <HAL_RCC_OscConfig+0x22e>
 80068c2:	e020      	b.n	8006906 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80068c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ca:	4a09      	ldr	r2, [pc, #36]	@ (80068f0 <HAL_RCC_OscConfig+0x27c>)
 80068cc:	f023 0301 	bic.w	r3, r3, #1
 80068d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d4:	f7fc fb88 	bl	8002fe8 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068da:	e00d      	b.n	80068f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068dc:	f7fc fb84 	bl	8002fe8 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d906      	bls.n	80068f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e1d2      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
 80068ee:	bf00      	nop
 80068f0:	40021000 	.word	0x40021000
 80068f4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068f8:	4b8c      	ldr	r3, [pc, #560]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80068fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ea      	bne.n	80068dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80a6 	beq.w	8006a60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006914:	2300      	movs	r3, #0
 8006916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006918:	4b84      	ldr	r3, [pc, #528]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 800691a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_RCC_OscConfig+0x2b4>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_RCC_OscConfig+0x2b6>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00d      	beq.n	800694a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800692e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006932:	4a7e      	ldr	r2, [pc, #504]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006938:	6593      	str	r3, [r2, #88]	@ 0x58
 800693a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 800693c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006946:	2301      	movs	r3, #1
 8006948:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800694a:	4b79      	ldr	r3, [pc, #484]	@ (8006b30 <HAL_RCC_OscConfig+0x4bc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006952:	2b00      	cmp	r3, #0
 8006954:	d118      	bne.n	8006988 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006956:	4b76      	ldr	r3, [pc, #472]	@ (8006b30 <HAL_RCC_OscConfig+0x4bc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a75      	ldr	r2, [pc, #468]	@ (8006b30 <HAL_RCC_OscConfig+0x4bc>)
 800695c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006962:	f7fc fb41 	bl	8002fe8 <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800696a:	f7fc fb3d 	bl	8002fe8 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e18b      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800697c:	4b6c      	ldr	r3, [pc, #432]	@ (8006b30 <HAL_RCC_OscConfig+0x4bc>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0f0      	beq.n	800696a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d108      	bne.n	80069a2 <HAL_RCC_OscConfig+0x32e>
 8006990:	4b66      	ldr	r3, [pc, #408]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006996:	4a65      	ldr	r2, [pc, #404]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069a0:	e024      	b.n	80069ec <HAL_RCC_OscConfig+0x378>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d110      	bne.n	80069cc <HAL_RCC_OscConfig+0x358>
 80069aa:	4b60      	ldr	r3, [pc, #384]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b0:	4a5e      	ldr	r2, [pc, #376]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069b2:	f043 0304 	orr.w	r3, r3, #4
 80069b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069ba:	4b5c      	ldr	r3, [pc, #368]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c0:	4a5a      	ldr	r2, [pc, #360]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069ca:	e00f      	b.n	80069ec <HAL_RCC_OscConfig+0x378>
 80069cc:	4b57      	ldr	r3, [pc, #348]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d2:	4a56      	ldr	r2, [pc, #344]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069dc:	4b53      	ldr	r3, [pc, #332]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e2:	4a52      	ldr	r2, [pc, #328]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 80069e4:	f023 0304 	bic.w	r3, r3, #4
 80069e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d016      	beq.n	8006a22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fc faf8 	bl	8002fe8 <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fc:	f7fc faf4 	bl	8002fe8 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e140      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a12:	4b46      	ldr	r3, [pc, #280]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0ed      	beq.n	80069fc <HAL_RCC_OscConfig+0x388>
 8006a20:	e015      	b.n	8006a4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a22:	f7fc fae1 	bl	8002fe8 <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a28:	e00a      	b.n	8006a40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a2a:	f7fc fadd 	bl	8002fe8 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e129      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a40:	4b3a      	ldr	r3, [pc, #232]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1ed      	bne.n	8006a2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a4e:	7ffb      	ldrb	r3, [r7, #31]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d105      	bne.n	8006a60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a54:	4b35      	ldr	r3, [pc, #212]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a58:	4a34      	ldr	r2, [pc, #208]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d03c      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01c      	beq.n	8006aae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a74:	4b2d      	ldr	r3, [pc, #180]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a84:	f7fc fab0 	bl	8002fe8 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a8c:	f7fc faac 	bl	8002fe8 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e0fa      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a9e:	4b23      	ldr	r3, [pc, #140]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0ef      	beq.n	8006a8c <HAL_RCC_OscConfig+0x418>
 8006aac:	e01b      	b.n	8006ae6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006aae:	4b1f      	ldr	r3, [pc, #124]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abe:	f7fc fa93 	bl	8002fe8 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ac6:	f7fc fa8f 	bl	8002fe8 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e0dd      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ad8:	4b14      	ldr	r3, [pc, #80]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1ef      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80d1 	beq.w	8006c92 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006af0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 030c 	and.w	r3, r3, #12
 8006af8:	2b0c      	cmp	r3, #12
 8006afa:	f000 808b 	beq.w	8006c14 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d15e      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b06:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a08      	ldr	r2, [pc, #32]	@ (8006b2c <HAL_RCC_OscConfig+0x4b8>)
 8006b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fc fa69 	bl	8002fe8 <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b18:	e00c      	b.n	8006b34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b1a:	f7fc fa65 	bl	8002fe8 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d905      	bls.n	8006b34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e0b3      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b34:	4b59      	ldr	r3, [pc, #356]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1ec      	bne.n	8006b1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b40:	4b56      	ldr	r3, [pc, #344]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	4b56      	ldr	r3, [pc, #344]	@ (8006ca0 <HAL_RCC_OscConfig+0x62c>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6a11      	ldr	r1, [r2, #32]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b50:	3a01      	subs	r2, #1
 8006b52:	0112      	lsls	r2, r2, #4
 8006b54:	4311      	orrs	r1, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b5a:	0212      	lsls	r2, r2, #8
 8006b5c:	4311      	orrs	r1, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b62:	0852      	lsrs	r2, r2, #1
 8006b64:	3a01      	subs	r2, #1
 8006b66:	0552      	lsls	r2, r2, #21
 8006b68:	4311      	orrs	r1, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b6e:	0852      	lsrs	r2, r2, #1
 8006b70:	3a01      	subs	r2, #1
 8006b72:	0652      	lsls	r2, r2, #25
 8006b74:	4311      	orrs	r1, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b7a:	06d2      	lsls	r2, r2, #27
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	4947      	ldr	r1, [pc, #284]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b84:	4b45      	ldr	r3, [pc, #276]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a44      	ldr	r2, [pc, #272]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b90:	4b42      	ldr	r3, [pc, #264]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a41      	ldr	r2, [pc, #260]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9c:	f7fc fa24 	bl	8002fe8 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba4:	f7fc fa20 	bl	8002fe8 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e06e      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bb6:	4b39      	ldr	r3, [pc, #228]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x530>
 8006bc2:	e066      	b.n	8006c92 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc4:	4b35      	ldr	r3, [pc, #212]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a34      	ldr	r2, [pc, #208]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006bd0:	4b32      	ldr	r3, [pc, #200]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	4a31      	ldr	r2, [pc, #196]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a2e      	ldr	r2, [pc, #184]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006be2:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8006be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bec:	f7fc f9fc 	bl	8002fe8 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fc f9f8 	bl	8002fe8 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e046      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c06:	4b25      	ldr	r3, [pc, #148]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x580>
 8006c12:	e03e      	b.n	8006c92 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e039      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006c20:	4b1e      	ldr	r3, [pc, #120]	@ (8006c9c <HAL_RCC_OscConfig+0x628>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0203 	and.w	r2, r3, #3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d12c      	bne.n	8006c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d123      	bne.n	8006c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d11b      	bne.n	8006c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d113      	bne.n	8006c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	3b01      	subs	r3, #1
 8006c74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d109      	bne.n	8006c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c84:	085b      	lsrs	r3, r3, #1
 8006c86:	3b01      	subs	r3, #1
 8006c88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d001      	beq.n	8006c92 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	019f800c 	.word	0x019f800c

08006ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e11e      	b.n	8006efa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cbc:	4b91      	ldr	r3, [pc, #580]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d910      	bls.n	8006cec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cca:	4b8e      	ldr	r3, [pc, #568]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 020f 	bic.w	r2, r3, #15
 8006cd2:	498c      	ldr	r1, [pc, #560]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cda:	4b8a      	ldr	r3, [pc, #552]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d001      	beq.n	8006cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e106      	b.n	8006efa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d073      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d129      	bne.n	8006d54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d00:	4b81      	ldr	r3, [pc, #516]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0f4      	b.n	8006efa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006d10:	f000 f99e 	bl	8007050 <RCC_GetSysClockFreqFromPLLSource>
 8006d14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4a7c      	ldr	r2, [pc, #496]	@ (8006f0c <HAL_RCC_ClockConfig+0x268>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d93f      	bls.n	8006d9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d033      	beq.n	8006d9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d12f      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d3e:	4b72      	ldr	r3, [pc, #456]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d46:	4a70      	ldr	r2, [pc, #448]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d4e:	2380      	movs	r3, #128	@ 0x80
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	e024      	b.n	8006d9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0c6      	b.n	8006efa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d6c:	4b66      	ldr	r3, [pc, #408]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0be      	b.n	8006efa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d7c:	f000 f8ce 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 8006d80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4a61      	ldr	r2, [pc, #388]	@ (8006f0c <HAL_RCC_ClockConfig+0x268>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d909      	bls.n	8006d9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d92:	4a5d      	ldr	r2, [pc, #372]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d9a:	2380      	movs	r3, #128	@ 0x80
 8006d9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f023 0203 	bic.w	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	4957      	ldr	r1, [pc, #348]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db0:	f7fc f91a 	bl	8002fe8 <HAL_GetTick>
 8006db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db8:	f7fc f916 	bl	8002fe8 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e095      	b.n	8006efa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dce:	4b4e      	ldr	r3, [pc, #312]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 020c 	and.w	r2, r3, #12
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d1eb      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d023      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006df8:	4b43      	ldr	r3, [pc, #268]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	4a42      	ldr	r2, [pc, #264]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e10:	4b3d      	ldr	r3, [pc, #244]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e18:	4a3b      	ldr	r2, [pc, #236]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006e1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e20:	4b39      	ldr	r3, [pc, #228]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4936      	ldr	r1, [pc, #216]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	608b      	str	r3, [r1, #8]
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2b80      	cmp	r3, #128	@ 0x80
 8006e38:	d105      	bne.n	8006e46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006e3a:	4b33      	ldr	r3, [pc, #204]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4a32      	ldr	r2, [pc, #200]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006e40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e46:	4b2f      	ldr	r3, [pc, #188]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d21d      	bcs.n	8006e90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e54:	4b2b      	ldr	r3, [pc, #172]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f023 020f 	bic.w	r2, r3, #15
 8006e5c:	4929      	ldr	r1, [pc, #164]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e64:	f7fc f8c0 	bl	8002fe8 <HAL_GetTick>
 8006e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e6c:	f7fc f8bc 	bl	8002fe8 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e03b      	b.n	8006efa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e82:	4b20      	ldr	r3, [pc, #128]	@ (8006f04 <HAL_RCC_ClockConfig+0x260>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1ed      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4917      	ldr	r1, [pc, #92]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eba:	4b13      	ldr	r3, [pc, #76]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	490f      	ldr	r1, [pc, #60]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ece:	f000 f825 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f08 <HAL_RCC_ClockConfig+0x264>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	490c      	ldr	r1, [pc, #48]	@ (8006f10 <HAL_RCC_ClockConfig+0x26c>)
 8006ee0:	5ccb      	ldrb	r3, [r1, r3]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eea:	4a0a      	ldr	r2, [pc, #40]	@ (8006f14 <HAL_RCC_ClockConfig+0x270>)
 8006eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006eee:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <HAL_RCC_ClockConfig+0x274>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fc f82c 	bl	8002f50 <HAL_InitTick>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40022000 	.word	0x40022000
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	04c4b400 	.word	0x04c4b400
 8006f10:	0800e0b0 	.word	0x0800e0b0
 8006f14:	20000008 	.word	0x20000008
 8006f18:	2000000c 	.word	0x2000000c

08006f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f22:	4b2c      	ldr	r3, [pc, #176]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 030c 	and.w	r3, r3, #12
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d102      	bne.n	8006f34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e047      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006f34:	4b27      	ldr	r3, [pc, #156]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f40:	4b26      	ldr	r3, [pc, #152]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e03e      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006f46:	4b23      	ldr	r3, [pc, #140]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 030c 	and.w	r3, r3, #12
 8006f4e:	2b0c      	cmp	r3, #12
 8006f50:	d136      	bne.n	8006fc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f52:	4b20      	ldr	r3, [pc, #128]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	3301      	adds	r3, #1
 8006f68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d10c      	bne.n	8006f8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f70:	4a1a      	ldr	r2, [pc, #104]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	4a16      	ldr	r2, [pc, #88]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f7a:	68d2      	ldr	r2, [r2, #12]
 8006f7c:	0a12      	lsrs	r2, r2, #8
 8006f7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	617b      	str	r3, [r7, #20]
      break;
 8006f88:	e00c      	b.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f8a:	4a13      	ldr	r2, [pc, #76]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	4a10      	ldr	r2, [pc, #64]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f94:	68d2      	ldr	r2, [r2, #12]
 8006f96:	0a12      	lsrs	r2, r2, #8
 8006f98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f9c:	fb02 f303 	mul.w	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
      break;
 8006fa2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	0e5b      	lsrs	r3, r3, #25
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	3301      	adds	r3, #1
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006fc4:	693b      	ldr	r3, [r7, #16]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	00f42400 	.word	0x00f42400
 8006fdc:	007a1200 	.word	0x007a1200

08006fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fe4:	4b03      	ldr	r3, [pc, #12]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000008 	.word	0x20000008

08006ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ffc:	f7ff fff0 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b06      	ldr	r3, [pc, #24]	@ (800701c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4904      	ldr	r1, [pc, #16]	@ (8007020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007018:	4618      	mov	r0, r3
 800701a:	bd80      	pop	{r7, pc}
 800701c:	40021000 	.word	0x40021000
 8007020:	0800e0c0 	.word	0x0800e0c0

08007024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007028:	f7ff ffda 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 800702c:	4602      	mov	r2, r0
 800702e:	4b06      	ldr	r3, [pc, #24]	@ (8007048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	0adb      	lsrs	r3, r3, #11
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	4904      	ldr	r1, [pc, #16]	@ (800704c <HAL_RCC_GetPCLK2Freq+0x28>)
 800703a:	5ccb      	ldrb	r3, [r1, r3]
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007044:	4618      	mov	r0, r3
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40021000 	.word	0x40021000
 800704c:	0800e0c0 	.word	0x0800e0c0

08007050 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007056:	4b1e      	ldr	r3, [pc, #120]	@ (80070d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007060:	4b1b      	ldr	r3, [pc, #108]	@ (80070d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b03      	cmp	r3, #3
 8007072:	d10c      	bne.n	800708e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007074:	4a17      	ldr	r2, [pc, #92]	@ (80070d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	4a14      	ldr	r2, [pc, #80]	@ (80070d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800707e:	68d2      	ldr	r2, [r2, #12]
 8007080:	0a12      	lsrs	r2, r2, #8
 8007082:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007086:	fb02 f303 	mul.w	r3, r2, r3
 800708a:	617b      	str	r3, [r7, #20]
    break;
 800708c:	e00c      	b.n	80070a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800708e:	4a12      	ldr	r2, [pc, #72]	@ (80070d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	fbb2 f3f3 	udiv	r3, r2, r3
 8007096:	4a0e      	ldr	r2, [pc, #56]	@ (80070d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007098:	68d2      	ldr	r2, [r2, #12]
 800709a:	0a12      	lsrs	r2, r2, #8
 800709c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070a0:	fb02 f303 	mul.w	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]
    break;
 80070a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070a8:	4b09      	ldr	r3, [pc, #36]	@ (80070d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	0e5b      	lsrs	r3, r3, #25
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	3301      	adds	r3, #1
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80070c2:	687b      	ldr	r3, [r7, #4]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	40021000 	.word	0x40021000
 80070d4:	007a1200 	.word	0x007a1200
 80070d8:	00f42400 	.word	0x00f42400

080070dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070e4:	2300      	movs	r3, #0
 80070e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070e8:	2300      	movs	r3, #0
 80070ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 8098 	beq.w	800722a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070fa:	2300      	movs	r3, #0
 80070fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070fe:	4b43      	ldr	r3, [pc, #268]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10d      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800710a:	4b40      	ldr	r3, [pc, #256]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800710c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800710e:	4a3f      	ldr	r2, [pc, #252]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007114:	6593      	str	r3, [r2, #88]	@ 0x58
 8007116:	4b3d      	ldr	r3, [pc, #244]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800711a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007122:	2301      	movs	r3, #1
 8007124:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007126:	4b3a      	ldr	r3, [pc, #232]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a39      	ldr	r2, [pc, #228]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800712c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007130:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007132:	f7fb ff59 	bl	8002fe8 <HAL_GetTick>
 8007136:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007138:	e009      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800713a:	f7fb ff55 	bl	8002fe8 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d902      	bls.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	74fb      	strb	r3, [r7, #19]
        break;
 800714c:	e005      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800714e:	4b30      	ldr	r3, [pc, #192]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0ef      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800715a:	7cfb      	ldrb	r3, [r7, #19]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d159      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007160:	4b2a      	ldr	r3, [pc, #168]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800716a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01e      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	429a      	cmp	r2, r3
 800717a:	d019      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800717c:	4b23      	ldr	r3, [pc, #140]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007186:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007188:	4b20      	ldr	r3, [pc, #128]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800718a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718e:	4a1f      	ldr	r2, [pc, #124]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007198:	4b1c      	ldr	r3, [pc, #112]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719e:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071a8:	4a18      	ldr	r2, [pc, #96]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ba:	f7fb ff15 	bl	8002fe8 <HAL_GetTick>
 80071be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071c0:	e00b      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c2:	f7fb ff11 	bl	8002fe8 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d902      	bls.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	74fb      	strb	r3, [r7, #19]
            break;
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071da:	4b0c      	ldr	r3, [pc, #48]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ec      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80071e8:	7cfb      	ldrb	r3, [r7, #19]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071ee:	4b07      	ldr	r3, [pc, #28]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071fc:	4903      	ldr	r1, [pc, #12]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007204:	e008      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007206:	7cfb      	ldrb	r3, [r7, #19]
 8007208:	74bb      	strb	r3, [r7, #18]
 800720a:	e005      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800720c:	40021000 	.word	0x40021000
 8007210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	7cfb      	ldrb	r3, [r7, #19]
 8007216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007218:	7c7b      	ldrb	r3, [r7, #17]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d105      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800721e:	4ba7      	ldr	r3, [pc, #668]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007222:	4aa6      	ldr	r2, [pc, #664]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007228:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007236:	4ba1      	ldr	r3, [pc, #644]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723c:	f023 0203 	bic.w	r2, r3, #3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	499d      	ldr	r1, [pc, #628]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007258:	4b98      	ldr	r3, [pc, #608]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	f023 020c 	bic.w	r2, r3, #12
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	4995      	ldr	r1, [pc, #596]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007268:	4313      	orrs	r3, r2
 800726a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800727a:	4b90      	ldr	r3, [pc, #576]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007280:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	498c      	ldr	r1, [pc, #560]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800729c:	4b87      	ldr	r3, [pc, #540]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	4984      	ldr	r1, [pc, #528]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072be:	4b7f      	ldr	r3, [pc, #508]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	497b      	ldr	r1, [pc, #492]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072e0:	4b76      	ldr	r3, [pc, #472]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	4973      	ldr	r1, [pc, #460]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007302:	4b6e      	ldr	r3, [pc, #440]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007308:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	496a      	ldr	r1, [pc, #424]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007324:	4b65      	ldr	r3, [pc, #404]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	4962      	ldr	r1, [pc, #392]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007346:	4b5d      	ldr	r3, [pc, #372]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	4959      	ldr	r1, [pc, #356]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007368:	4b54      	ldr	r3, [pc, #336]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800736e:	f023 0203 	bic.w	r2, r3, #3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	4951      	ldr	r1, [pc, #324]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800738a:	4b4c      	ldr	r3, [pc, #304]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007390:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007398:	4948      	ldr	r1, [pc, #288]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d015      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073ac:	4b43      	ldr	r3, [pc, #268]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ba:	4940      	ldr	r1, [pc, #256]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ca:	d105      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073cc:	4b3b      	ldr	r3, [pc, #236]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	4a3a      	ldr	r2, [pc, #232]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d015      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073e4:	4b35      	ldr	r3, [pc, #212]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f2:	4932      	ldr	r1, [pc, #200]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007402:	d105      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007404:	4b2d      	ldr	r3, [pc, #180]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4a2c      	ldr	r2, [pc, #176]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800740a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800740e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d015      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800741c:	4b27      	ldr	r3, [pc, #156]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800741e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007422:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	4924      	ldr	r1, [pc, #144]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800742c:	4313      	orrs	r3, r2
 800742e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800743a:	d105      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800743c:	4b1f      	ldr	r3, [pc, #124]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	4a1e      	ldr	r2, [pc, #120]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007446:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d015      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007454:	4b19      	ldr	r3, [pc, #100]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007462:	4916      	ldr	r1, [pc, #88]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007464:	4313      	orrs	r3, r2
 8007466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007472:	d105      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007474:	4b11      	ldr	r3, [pc, #68]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	4a10      	ldr	r2, [pc, #64]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800747a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800747e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d019      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800748c:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007492:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	4908      	ldr	r1, [pc, #32]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074aa:	d109      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074ac:	4b03      	ldr	r3, [pc, #12]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4a02      	ldr	r2, [pc, #8]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074b6:	60d3      	str	r3, [r2, #12]
 80074b8:	e002      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80074ba:	bf00      	nop
 80074bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d015      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80074cc:	4b29      	ldr	r3, [pc, #164]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074da:	4926      	ldr	r1, [pc, #152]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ea:	d105      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074ec:	4b21      	ldr	r3, [pc, #132]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4a20      	ldr	r2, [pc, #128]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d015      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007504:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007512:	4918      	ldr	r1, [pc, #96]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007522:	d105      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007524:	4b13      	ldr	r3, [pc, #76]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	4a12      	ldr	r2, [pc, #72]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800752a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800752e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d015      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800753c:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800753e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007542:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800754a:	490a      	ldr	r1, [pc, #40]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007556:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800755a:	d105      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	4a04      	ldr	r2, [pc, #16]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007566:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007568:	7cbb      	ldrb	r3, [r7, #18]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40021000 	.word	0x40021000

08007578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e09d      	b.n	80076c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d108      	bne.n	80075a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800759a:	d009      	beq.n	80075b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	61da      	str	r2, [r3, #28]
 80075a2:	e005      	b.n	80075b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fb f8b2 	bl	8002734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075f0:	d902      	bls.n	80075f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	e002      	b.n	80075fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007606:	d007      	beq.n	8007618 <HAL_SPI_Init+0xa0>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007610:	d002      	beq.n	8007618 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765a:	ea42 0103 	orr.w	r1, r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007662:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	f003 0204 	and.w	r2, r3, #4
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007694:	ea42 0103 	orr.w	r1, r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b08a      	sub	sp, #40	@ 0x28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076dc:	2301      	movs	r3, #1
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_SPI_TransmitReceive+0x26>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e1fb      	b.n	8007aec <HAL_SPI_TransmitReceive+0x41e>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076fc:	f7fb fc74 	bl	8002fe8 <HAL_GetTick>
 8007700:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007708:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007710:	887b      	ldrh	r3, [r7, #2]
 8007712:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007718:	7efb      	ldrb	r3, [r7, #27]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d00e      	beq.n	800773c <HAL_SPI_TransmitReceive+0x6e>
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007724:	d106      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x66>
 800772e:	7efb      	ldrb	r3, [r7, #27]
 8007730:	2b04      	cmp	r3, #4
 8007732:	d003      	beq.n	800773c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007734:	2302      	movs	r3, #2
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800773a:	e1cd      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <HAL_SPI_TransmitReceive+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_SPI_TransmitReceive+0x80>
 8007748:	887b      	ldrh	r3, [r7, #2]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007754:	e1c0      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b04      	cmp	r3, #4
 8007760:	d003      	beq.n	800776a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2205      	movs	r2, #5
 8007766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	887a      	ldrh	r2, [r7, #2]
 800777a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	887a      	ldrh	r2, [r7, #2]
 8007782:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	887a      	ldrh	r2, [r7, #2]
 8007790:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	887a      	ldrh	r2, [r7, #2]
 8007796:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077ac:	d802      	bhi.n	80077b4 <HAL_SPI_TransmitReceive+0xe6>
 80077ae:	8a3b      	ldrh	r3, [r7, #16]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d908      	bls.n	80077c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077c2:	605a      	str	r2, [r3, #4]
 80077c4:	e007      	b.n	80077d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e0:	2b40      	cmp	r3, #64	@ 0x40
 80077e2:	d007      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077fc:	d97c      	bls.n	80078f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_SPI_TransmitReceive+0x13e>
 8007806:	8a7b      	ldrh	r3, [r7, #18]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d169      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781c:	1c9a      	adds	r2, r3, #2
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007830:	e056      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d11b      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x1aa>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d016      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x1aa>
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	2b01      	cmp	r3, #1
 800784e:	d113      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007854:	881a      	ldrh	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007860:	1c9a      	adds	r2, r3, #2
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b01      	cmp	r3, #1
 8007884:	d11c      	bne.n	80078c0 <HAL_SPI_TransmitReceive+0x1f2>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	b292      	uxth	r2, r2
 800789e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	1c9a      	adds	r2, r3, #2
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078bc:	2301      	movs	r3, #1
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078c0:	f7fb fb92 	bl	8002fe8 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d807      	bhi.n	80078e0 <HAL_SPI_TransmitReceive+0x212>
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d003      	beq.n	80078e0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80078de:	e0fb      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1a3      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x164>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d19d      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x164>
 80078f6:	e0df      	b.n	8007ab8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <HAL_SPI_TransmitReceive+0x23a>
 8007900:	8a7b      	ldrh	r3, [r7, #18]
 8007902:	2b01      	cmp	r3, #1
 8007904:	f040 80cb 	bne.w	8007a9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	d912      	bls.n	8007938 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007922:	1c9a      	adds	r2, r3, #2
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b02      	subs	r3, #2
 8007930:	b29a      	uxth	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007936:	e0b2      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	7812      	ldrb	r2, [r2, #0]
 8007944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800795e:	e09e      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b02      	cmp	r3, #2
 800796c:	d134      	bne.n	80079d8 <HAL_SPI_TransmitReceive+0x30a>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007972:	b29b      	uxth	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d02f      	beq.n	80079d8 <HAL_SPI_TransmitReceive+0x30a>
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	2b01      	cmp	r3, #1
 800797c:	d12c      	bne.n	80079d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d912      	bls.n	80079ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	881a      	ldrh	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007998:	1c9a      	adds	r2, r3, #2
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	3b02      	subs	r3, #2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079ac:	e012      	b.n	80079d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d148      	bne.n	8007a78 <HAL_SPI_TransmitReceive+0x3aa>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d042      	beq.n	8007a78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d923      	bls.n	8007a46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	b292      	uxth	r2, r2
 8007a0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a10:	1c9a      	adds	r2, r3, #2
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b02      	subs	r3, #2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d81f      	bhi.n	8007a74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a42:	605a      	str	r2, [r3, #4]
 8007a44:	e016      	b.n	8007a74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f103 020c 	add.w	r2, r3, #12
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a74:	2301      	movs	r3, #1
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a78:	f7fb fab6 	bl	8002fe8 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d803      	bhi.n	8007a90 <HAL_SPI_TransmitReceive+0x3c2>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8e:	d102      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x3c8>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d103      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8007a9c:	e01c      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f47f af5b 	bne.w	8007960 <HAL_SPI_TransmitReceive+0x292>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f47f af54 	bne.w	8007960 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 fa4b 	bl	8007f58 <SPI_EndRxTxTransaction>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d006      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ad4:	e000      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007ad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3728      	adds	r7, #40	@ 0x28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10e      	bne.n	8007b34 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d009      	beq.n	8007b34 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
    return;
 8007b32:	e0ce      	b.n	8007cd2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <HAL_SPI_IRQHandler+0x5e>
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
    return;
 8007b50:	e0bf      	b.n	8007cd2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <HAL_SPI_IRQHandler+0x7e>
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d105      	bne.n	8007b72 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 80b0 	beq.w	8007cd2 <HAL_SPI_IRQHandler+0x1de>
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80aa 	beq.w	8007cd2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d023      	beq.n	8007bd0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d011      	beq.n	8007bb8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b98:	f043 0204 	orr.w	r2, r3, #4
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	e00b      	b.n	8007bd0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bb8:	2300      	movs	r3, #0
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	613b      	str	r3, [r7, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	693b      	ldr	r3, [r7, #16]
        return;
 8007bce:	e080      	b.n	8007cd2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d014      	beq.n	8007c04 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bde:	f043 0201 	orr.w	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00c      	beq.n	8007c28 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c12:	f043 0208 	orr.w	r2, r3, #8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60bb      	str	r3, [r7, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d04f      	beq.n	8007cd0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c3e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <HAL_SPI_IRQHandler+0x168>
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d034      	beq.n	8007cc6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0203 	bic.w	r2, r2, #3
 8007c6a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d011      	beq.n	8007c98 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c78:	4a17      	ldr	r2, [pc, #92]	@ (8007cd8 <HAL_SPI_IRQHandler+0x1e4>)
 8007c7a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fd f80e 	bl	8004ca2 <HAL_DMA_Abort_IT>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d016      	beq.n	8007cce <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8007cd8 <HAL_SPI_IRQHandler+0x1e4>)
 8007ca6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fc fff8 	bl	8004ca2 <HAL_DMA_Abort_IT>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007cc4:	e003      	b.n	8007cce <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f808 	bl	8007cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ccc:	e000      	b.n	8007cd0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007cce:	bf00      	nop
    return;
 8007cd0:	bf00      	nop
  }
}
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	08007cf1 	.word	0x08007cf1

08007cdc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff ffe5 	bl	8007cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d2c:	f7fb f95c 	bl	8002fe8 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4413      	add	r3, r2
 8007d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d3c:	f7fb f954 	bl	8002fe8 <HAL_GetTick>
 8007d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d42:	4b39      	ldr	r3, [pc, #228]	@ (8007e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	015b      	lsls	r3, r3, #5
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d52:	e054      	b.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5a:	d050      	beq.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d5c:	f7fb f944 	bl	8002fe8 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d902      	bls.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d13d      	bne.n	8007dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d8a:	d111      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d94:	d004      	beq.n	8007da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d9e:	d107      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db8:	d10f      	bne.n	8007dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e017      	b.n	8007e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4013      	ands	r3, r2
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	bf0c      	ite	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	2300      	movne	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d19b      	bne.n	8007d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000008 	.word	0x20000008

08007e2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	@ 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e3e:	f7fb f8d3 	bl	8002fe8 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007e4e:	f7fb f8cb 	bl	8002fe8 <HAL_GetTick>
 8007e52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8007f54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	00da      	lsls	r2, r3, #3
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	0d1b      	lsrs	r3, r3, #20
 8007e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
 8007e72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e74:	e060      	b.n	8007f38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e7c:	d107      	bne.n	8007e8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e94:	d050      	beq.n	8007f38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e96:	f7fb f8a7 	bl	8002fe8 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d902      	bls.n	8007eac <SPI_WaitFifoStateUntilTimeout+0x80>
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d13d      	bne.n	8007f28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007eba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ec4:	d111      	bne.n	8007eea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ece:	d004      	beq.n	8007eda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed8:	d107      	bne.n	8007eea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ee8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef2:	d10f      	bne.n	8007f14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e010      	b.n	8007f4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	4013      	ands	r3, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d196      	bne.n	8007e76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3728      	adds	r7, #40	@ 0x28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000008 	.word	0x20000008

08007f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7ff ff5b 	bl	8007e2c <SPI_WaitFifoStateUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e027      	b.n	8007fdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	2180      	movs	r1, #128	@ 0x80
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff fec0 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa6:	f043 0220 	orr.w	r2, r3, #32
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e014      	b.n	8007fdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff ff34 	bl	8007e2c <SPI_WaitFifoStateUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e000      	b.n	8007fdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e049      	b.n	800808a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fa fc14 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3304      	adds	r3, #4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f000 fcd4 	bl	80089d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d001      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e054      	b.n	8008156 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0201 	orr.w	r2, r2, #1
 80080c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a26      	ldr	r2, [pc, #152]	@ (8008164 <HAL_TIM_Base_Start_IT+0xd0>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d022      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x80>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d6:	d01d      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x80>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a22      	ldr	r2, [pc, #136]	@ (8008168 <HAL_TIM_Base_Start_IT+0xd4>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d018      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x80>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a21      	ldr	r2, [pc, #132]	@ (800816c <HAL_TIM_Base_Start_IT+0xd8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d013      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x80>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008170 <HAL_TIM_Base_Start_IT+0xdc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00e      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x80>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008174 <HAL_TIM_Base_Start_IT+0xe0>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d009      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x80>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1c      	ldr	r2, [pc, #112]	@ (8008178 <HAL_TIM_Base_Start_IT+0xe4>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x80>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1b      	ldr	r2, [pc, #108]	@ (800817c <HAL_TIM_Base_Start_IT+0xe8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d115      	bne.n	8008140 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	4b19      	ldr	r3, [pc, #100]	@ (8008180 <HAL_TIM_Base_Start_IT+0xec>)
 800811c:	4013      	ands	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b06      	cmp	r3, #6
 8008124:	d015      	beq.n	8008152 <HAL_TIM_Base_Start_IT+0xbe>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800812c:	d011      	beq.n	8008152 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	e008      	b.n	8008152 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	e000      	b.n	8008154 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40013400 	.word	0x40013400
 8008178:	40014000 	.word	0x40014000
 800817c:	40015000 	.word	0x40015000
 8008180:	00010007 	.word	0x00010007

08008184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e049      	b.n	800822a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fa fb0e 	bl	80027cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f000 fc04 	bl	80089d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <HAL_TIM_PWM_Start+0x24>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b01      	cmp	r3, #1
 800824e:	bf14      	ite	ne
 8008250:	2301      	movne	r3, #1
 8008252:	2300      	moveq	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	e03c      	b.n	80082d2 <HAL_TIM_PWM_Start+0x9e>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b04      	cmp	r3, #4
 800825c:	d109      	bne.n	8008272 <HAL_TIM_PWM_Start+0x3e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b01      	cmp	r3, #1
 8008268:	bf14      	ite	ne
 800826a:	2301      	movne	r3, #1
 800826c:	2300      	moveq	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	e02f      	b.n	80082d2 <HAL_TIM_PWM_Start+0x9e>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b08      	cmp	r3, #8
 8008276:	d109      	bne.n	800828c <HAL_TIM_PWM_Start+0x58>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b01      	cmp	r3, #1
 8008282:	bf14      	ite	ne
 8008284:	2301      	movne	r3, #1
 8008286:	2300      	moveq	r3, #0
 8008288:	b2db      	uxtb	r3, r3
 800828a:	e022      	b.n	80082d2 <HAL_TIM_PWM_Start+0x9e>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b0c      	cmp	r3, #12
 8008290:	d109      	bne.n	80082a6 <HAL_TIM_PWM_Start+0x72>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b01      	cmp	r3, #1
 800829c:	bf14      	ite	ne
 800829e:	2301      	movne	r3, #1
 80082a0:	2300      	moveq	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	e015      	b.n	80082d2 <HAL_TIM_PWM_Start+0x9e>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b10      	cmp	r3, #16
 80082aa:	d109      	bne.n	80082c0 <HAL_TIM_PWM_Start+0x8c>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	bf14      	ite	ne
 80082b8:	2301      	movne	r3, #1
 80082ba:	2300      	moveq	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	e008      	b.n	80082d2 <HAL_TIM_PWM_Start+0x9e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	bf14      	ite	ne
 80082cc:	2301      	movne	r3, #1
 80082ce:	2300      	moveq	r3, #0
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e0a6      	b.n	8008428 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <HAL_TIM_PWM_Start+0xb6>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082e8:	e023      	b.n	8008332 <HAL_TIM_PWM_Start+0xfe>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d104      	bne.n	80082fa <HAL_TIM_PWM_Start+0xc6>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082f8:	e01b      	b.n	8008332 <HAL_TIM_PWM_Start+0xfe>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d104      	bne.n	800830a <HAL_TIM_PWM_Start+0xd6>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008308:	e013      	b.n	8008332 <HAL_TIM_PWM_Start+0xfe>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b0c      	cmp	r3, #12
 800830e:	d104      	bne.n	800831a <HAL_TIM_PWM_Start+0xe6>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008318:	e00b      	b.n	8008332 <HAL_TIM_PWM_Start+0xfe>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b10      	cmp	r3, #16
 800831e:	d104      	bne.n	800832a <HAL_TIM_PWM_Start+0xf6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008328:	e003      	b.n	8008332 <HAL_TIM_PWM_Start+0xfe>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2201      	movs	r2, #1
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f000 ff1a 	bl	8009174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a3a      	ldr	r2, [pc, #232]	@ (8008430 <HAL_TIM_PWM_Start+0x1fc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <HAL_TIM_PWM_Start+0x148>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a39      	ldr	r2, [pc, #228]	@ (8008434 <HAL_TIM_PWM_Start+0x200>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <HAL_TIM_PWM_Start+0x148>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a37      	ldr	r2, [pc, #220]	@ (8008438 <HAL_TIM_PWM_Start+0x204>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <HAL_TIM_PWM_Start+0x148>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a36      	ldr	r2, [pc, #216]	@ (800843c <HAL_TIM_PWM_Start+0x208>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_TIM_PWM_Start+0x148>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a34      	ldr	r2, [pc, #208]	@ (8008440 <HAL_TIM_PWM_Start+0x20c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIM_PWM_Start+0x148>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a33      	ldr	r2, [pc, #204]	@ (8008444 <HAL_TIM_PWM_Start+0x210>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d101      	bne.n	8008380 <HAL_TIM_PWM_Start+0x14c>
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <HAL_TIM_PWM_Start+0x14e>
 8008380:	2300      	movs	r3, #0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008394:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a25      	ldr	r2, [pc, #148]	@ (8008430 <HAL_TIM_PWM_Start+0x1fc>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d022      	beq.n	80083e6 <HAL_TIM_PWM_Start+0x1b2>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a8:	d01d      	beq.n	80083e6 <HAL_TIM_PWM_Start+0x1b2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a26      	ldr	r2, [pc, #152]	@ (8008448 <HAL_TIM_PWM_Start+0x214>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d018      	beq.n	80083e6 <HAL_TIM_PWM_Start+0x1b2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a24      	ldr	r2, [pc, #144]	@ (800844c <HAL_TIM_PWM_Start+0x218>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <HAL_TIM_PWM_Start+0x1b2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a23      	ldr	r2, [pc, #140]	@ (8008450 <HAL_TIM_PWM_Start+0x21c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_TIM_PWM_Start+0x1b2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a19      	ldr	r2, [pc, #100]	@ (8008434 <HAL_TIM_PWM_Start+0x200>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d009      	beq.n	80083e6 <HAL_TIM_PWM_Start+0x1b2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a18      	ldr	r2, [pc, #96]	@ (8008438 <HAL_TIM_PWM_Start+0x204>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_TIM_PWM_Start+0x1b2>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a18      	ldr	r2, [pc, #96]	@ (8008444 <HAL_TIM_PWM_Start+0x210>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d115      	bne.n	8008412 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	4b19      	ldr	r3, [pc, #100]	@ (8008454 <HAL_TIM_PWM_Start+0x220>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b06      	cmp	r3, #6
 80083f6:	d015      	beq.n	8008424 <HAL_TIM_PWM_Start+0x1f0>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083fe:	d011      	beq.n	8008424 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0201 	orr.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008410:	e008      	b.n	8008424 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0201 	orr.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e000      	b.n	8008426 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008424:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40013400 	.word	0x40013400
 8008438:	40014000 	.word	0x40014000
 800843c:	40014400 	.word	0x40014400
 8008440:	40014800 	.word	0x40014800
 8008444:	40015000 	.word	0x40015000
 8008448:	40000400 	.word	0x40000400
 800844c:	40000800 	.word	0x40000800
 8008450:	40000c00 	.word	0x40000c00
 8008454:	00010007 	.word	0x00010007

08008458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b02      	cmp	r3, #2
 800846c:	d122      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d11b      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f06f 0202 	mvn.w	r2, #2
 8008484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa7a 	bl	8008994 <HAL_TIM_IC_CaptureCallback>
 80084a0:	e005      	b.n	80084ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa6c 	bl	8008980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fa7d 	bl	80089a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d122      	bne.n	8008508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d11b      	bne.n	8008508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0204 	mvn.w	r2, #4
 80084d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa50 	bl	8008994 <HAL_TIM_IC_CaptureCallback>
 80084f4:	e005      	b.n	8008502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa42 	bl	8008980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fa53 	bl	80089a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b08      	cmp	r3, #8
 8008514:	d122      	bne.n	800855c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b08      	cmp	r3, #8
 8008522:	d11b      	bne.n	800855c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0208 	mvn.w	r2, #8
 800852c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2204      	movs	r2, #4
 8008532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa26 	bl	8008994 <HAL_TIM_IC_CaptureCallback>
 8008548:	e005      	b.n	8008556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa18 	bl	8008980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa29 	bl	80089a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0310 	and.w	r3, r3, #16
 8008566:	2b10      	cmp	r3, #16
 8008568:	d122      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0310 	and.w	r3, r3, #16
 8008574:	2b10      	cmp	r3, #16
 8008576:	d11b      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0210 	mvn.w	r2, #16
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2208      	movs	r2, #8
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9fc 	bl	8008994 <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f9ee 	bl	8008980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9ff 	bl	80089a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d10e      	bne.n	80085dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d107      	bne.n	80085dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0201 	mvn.w	r2, #1
 80085d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7f8 fa2e 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e6:	2b80      	cmp	r3, #128	@ 0x80
 80085e8:	d10e      	bne.n	8008608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f4:	2b80      	cmp	r3, #128	@ 0x80
 80085f6:	d107      	bne.n	8008608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 ff2e 	bl	8009464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008616:	d10e      	bne.n	8008636 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008622:	2b80      	cmp	r3, #128	@ 0x80
 8008624:	d107      	bne.n	8008636 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800862e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 ff21 	bl	8009478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008640:	2b40      	cmp	r3, #64	@ 0x40
 8008642:	d10e      	bne.n	8008662 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864e:	2b40      	cmp	r3, #64	@ 0x40
 8008650:	d107      	bne.n	8008662 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800865a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9ad 	bl	80089bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b20      	cmp	r3, #32
 800866e:	d10e      	bne.n	800868e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b20      	cmp	r3, #32
 800867c:	d107      	bne.n	800868e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f06f 0220 	mvn.w	r2, #32
 8008686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fee1 	bl	8009450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800869c:	d10f      	bne.n	80086be <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ac:	d107      	bne.n	80086be <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80086b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fee7 	bl	800948c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086cc:	d10f      	bne.n	80086ee <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086dc:	d107      	bne.n	80086ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80086e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fed9 	bl	80094a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086fc:	d10f      	bne.n	800871e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800870c:	d107      	bne.n	800871e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fecb 	bl	80094b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008728:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800872c:	d10f      	bne.n	800874e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800873c:	d107      	bne.n	800874e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 febd 	bl	80094c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008772:	2302      	movs	r3, #2
 8008774:	e0ff      	b.n	8008976 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b14      	cmp	r3, #20
 8008782:	f200 80f0 	bhi.w	8008966 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087e1 	.word	0x080087e1
 8008790:	08008967 	.word	0x08008967
 8008794:	08008967 	.word	0x08008967
 8008798:	08008967 	.word	0x08008967
 800879c:	08008821 	.word	0x08008821
 80087a0:	08008967 	.word	0x08008967
 80087a4:	08008967 	.word	0x08008967
 80087a8:	08008967 	.word	0x08008967
 80087ac:	08008863 	.word	0x08008863
 80087b0:	08008967 	.word	0x08008967
 80087b4:	08008967 	.word	0x08008967
 80087b8:	08008967 	.word	0x08008967
 80087bc:	080088a3 	.word	0x080088a3
 80087c0:	08008967 	.word	0x08008967
 80087c4:	08008967 	.word	0x08008967
 80087c8:	08008967 	.word	0x08008967
 80087cc:	080088e5 	.word	0x080088e5
 80087d0:	08008967 	.word	0x08008967
 80087d4:	08008967 	.word	0x08008967
 80087d8:	08008967 	.word	0x08008967
 80087dc:	08008925 	.word	0x08008925
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f99a 	bl	8008b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0208 	orr.w	r2, r2, #8
 80087fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0204 	bic.w	r2, r2, #4
 800880a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6999      	ldr	r1, [r3, #24]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	619a      	str	r2, [r3, #24]
      break;
 800881e:	e0a5      	b.n	800896c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fa14 	bl	8008c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800883a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800884a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6999      	ldr	r1, [r3, #24]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	021a      	lsls	r2, r3, #8
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	619a      	str	r2, [r3, #24]
      break;
 8008860:	e084      	b.n	800896c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 fa87 	bl	8008d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0208 	orr.w	r2, r2, #8
 800887c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0204 	bic.w	r2, r2, #4
 800888c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69d9      	ldr	r1, [r3, #28]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	61da      	str	r2, [r3, #28]
      break;
 80088a0:	e064      	b.n	800896c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 faf9 	bl	8008ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69d9      	ldr	r1, [r3, #28]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	021a      	lsls	r2, r3, #8
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	61da      	str	r2, [r3, #28]
      break;
 80088e2:	e043      	b.n	800896c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68b9      	ldr	r1, [r7, #8]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fb6c 	bl	8008fc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0208 	orr.w	r2, r2, #8
 80088fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0204 	bic.w	r2, r2, #4
 800890e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	691a      	ldr	r2, [r3, #16]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008922:	e023      	b.n	800896c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fbb6 	bl	800909c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800893e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800894e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	021a      	lsls	r2, r3, #8
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008964:	e002      	b.n	800896c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	75fb      	strb	r3, [r7, #23]
      break;
 800896a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop

08008980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a46      	ldr	r2, [pc, #280]	@ (8008afc <TIM_Base_SetConfig+0x12c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d017      	beq.n	8008a18 <TIM_Base_SetConfig+0x48>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ee:	d013      	beq.n	8008a18 <TIM_Base_SetConfig+0x48>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a43      	ldr	r2, [pc, #268]	@ (8008b00 <TIM_Base_SetConfig+0x130>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00f      	beq.n	8008a18 <TIM_Base_SetConfig+0x48>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a42      	ldr	r2, [pc, #264]	@ (8008b04 <TIM_Base_SetConfig+0x134>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <TIM_Base_SetConfig+0x48>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a41      	ldr	r2, [pc, #260]	@ (8008b08 <TIM_Base_SetConfig+0x138>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_Base_SetConfig+0x48>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a40      	ldr	r2, [pc, #256]	@ (8008b0c <TIM_Base_SetConfig+0x13c>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_Base_SetConfig+0x48>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a3f      	ldr	r2, [pc, #252]	@ (8008b10 <TIM_Base_SetConfig+0x140>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d108      	bne.n	8008a2a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a33      	ldr	r2, [pc, #204]	@ (8008afc <TIM_Base_SetConfig+0x12c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d023      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a38:	d01f      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a30      	ldr	r2, [pc, #192]	@ (8008b00 <TIM_Base_SetConfig+0x130>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d01b      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a2f      	ldr	r2, [pc, #188]	@ (8008b04 <TIM_Base_SetConfig+0x134>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d017      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8008b08 <TIM_Base_SetConfig+0x138>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d013      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a2d      	ldr	r2, [pc, #180]	@ (8008b0c <TIM_Base_SetConfig+0x13c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00f      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8008b14 <TIM_Base_SetConfig+0x144>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00b      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a2c      	ldr	r2, [pc, #176]	@ (8008b18 <TIM_Base_SetConfig+0x148>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d007      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8008b1c <TIM_Base_SetConfig+0x14c>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_Base_SetConfig+0xaa>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a26      	ldr	r2, [pc, #152]	@ (8008b10 <TIM_Base_SetConfig+0x140>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d108      	bne.n	8008a8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a12      	ldr	r2, [pc, #72]	@ (8008afc <TIM_Base_SetConfig+0x12c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d013      	beq.n	8008ae0 <TIM_Base_SetConfig+0x110>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a14      	ldr	r2, [pc, #80]	@ (8008b0c <TIM_Base_SetConfig+0x13c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <TIM_Base_SetConfig+0x110>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a14      	ldr	r2, [pc, #80]	@ (8008b14 <TIM_Base_SetConfig+0x144>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_Base_SetConfig+0x110>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a13      	ldr	r2, [pc, #76]	@ (8008b18 <TIM_Base_SetConfig+0x148>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_Base_SetConfig+0x110>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a12      	ldr	r2, [pc, #72]	@ (8008b1c <TIM_Base_SetConfig+0x14c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_Base_SetConfig+0x110>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a0d      	ldr	r2, [pc, #52]	@ (8008b10 <TIM_Base_SetConfig+0x140>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d103      	bne.n	8008ae8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	615a      	str	r2, [r3, #20]
}
 8008aee:	bf00      	nop
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40000800 	.word	0x40000800
 8008b08:	40000c00 	.word	0x40000c00
 8008b0c:	40013400 	.word	0x40013400
 8008b10:	40015000 	.word	0x40015000
 8008b14:	40014000 	.word	0x40014000
 8008b18:	40014400 	.word	0x40014400
 8008b1c:	40014800 	.word	0x40014800

08008b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f023 0201 	bic.w	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 0303 	bic.w	r3, r3, #3
 8008b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f023 0302 	bic.w	r3, r3, #2
 8008b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a30      	ldr	r2, [pc, #192]	@ (8008c3c <TIM_OC1_SetConfig+0x11c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d013      	beq.n	8008ba8 <TIM_OC1_SetConfig+0x88>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a2f      	ldr	r2, [pc, #188]	@ (8008c40 <TIM_OC1_SetConfig+0x120>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00f      	beq.n	8008ba8 <TIM_OC1_SetConfig+0x88>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8008c44 <TIM_OC1_SetConfig+0x124>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00b      	beq.n	8008ba8 <TIM_OC1_SetConfig+0x88>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a2d      	ldr	r2, [pc, #180]	@ (8008c48 <TIM_OC1_SetConfig+0x128>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d007      	beq.n	8008ba8 <TIM_OC1_SetConfig+0x88>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008c4c <TIM_OC1_SetConfig+0x12c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_OC1_SetConfig+0x88>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8008c50 <TIM_OC1_SetConfig+0x130>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d10c      	bne.n	8008bc2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f023 0308 	bic.w	r3, r3, #8
 8008bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f023 0304 	bic.w	r3, r3, #4
 8008bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c3c <TIM_OC1_SetConfig+0x11c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d013      	beq.n	8008bf2 <TIM_OC1_SetConfig+0xd2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8008c40 <TIM_OC1_SetConfig+0x120>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00f      	beq.n	8008bf2 <TIM_OC1_SetConfig+0xd2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c44 <TIM_OC1_SetConfig+0x124>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00b      	beq.n	8008bf2 <TIM_OC1_SetConfig+0xd2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c48 <TIM_OC1_SetConfig+0x128>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d007      	beq.n	8008bf2 <TIM_OC1_SetConfig+0xd2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <TIM_OC1_SetConfig+0x12c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d003      	beq.n	8008bf2 <TIM_OC1_SetConfig+0xd2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a18      	ldr	r2, [pc, #96]	@ (8008c50 <TIM_OC1_SetConfig+0x130>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d111      	bne.n	8008c16 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	621a      	str	r2, [r3, #32]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800
 8008c50:	40015000 	.word	0x40015000

08008c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f023 0210 	bic.w	r2, r3, #16
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f023 0320 	bic.w	r3, r3, #32
 8008ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8008d64 <TIM_OC2_SetConfig+0x110>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_OC2_SetConfig+0x74>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a2b      	ldr	r2, [pc, #172]	@ (8008d68 <TIM_OC2_SetConfig+0x114>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_OC2_SetConfig+0x74>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d6c <TIM_OC2_SetConfig+0x118>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d10d      	bne.n	8008ce4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	011b      	lsls	r3, r3, #4
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d64 <TIM_OC2_SetConfig+0x110>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d013      	beq.n	8008d14 <TIM_OC2_SetConfig+0xc0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a1e      	ldr	r2, [pc, #120]	@ (8008d68 <TIM_OC2_SetConfig+0x114>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00f      	beq.n	8008d14 <TIM_OC2_SetConfig+0xc0>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d70 <TIM_OC2_SetConfig+0x11c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00b      	beq.n	8008d14 <TIM_OC2_SetConfig+0xc0>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8008d74 <TIM_OC2_SetConfig+0x120>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <TIM_OC2_SetConfig+0xc0>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a1c      	ldr	r2, [pc, #112]	@ (8008d78 <TIM_OC2_SetConfig+0x124>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC2_SetConfig+0xc0>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a17      	ldr	r2, [pc, #92]	@ (8008d6c <TIM_OC2_SetConfig+0x118>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d113      	bne.n	8008d3c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40012c00 	.word	0x40012c00
 8008d68:	40013400 	.word	0x40013400
 8008d6c:	40015000 	.word	0x40015000
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40014400 	.word	0x40014400
 8008d78:	40014800 	.word	0x40014800

08008d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8008e88 <TIM_OC3_SetConfig+0x10c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d007      	beq.n	8008dee <TIM_OC3_SetConfig+0x72>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2a      	ldr	r2, [pc, #168]	@ (8008e8c <TIM_OC3_SetConfig+0x110>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d003      	beq.n	8008dee <TIM_OC3_SetConfig+0x72>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a29      	ldr	r2, [pc, #164]	@ (8008e90 <TIM_OC3_SetConfig+0x114>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d10d      	bne.n	8008e0a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8008e88 <TIM_OC3_SetConfig+0x10c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d013      	beq.n	8008e3a <TIM_OC3_SetConfig+0xbe>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1d      	ldr	r2, [pc, #116]	@ (8008e8c <TIM_OC3_SetConfig+0x110>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00f      	beq.n	8008e3a <TIM_OC3_SetConfig+0xbe>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e94 <TIM_OC3_SetConfig+0x118>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00b      	beq.n	8008e3a <TIM_OC3_SetConfig+0xbe>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1c      	ldr	r2, [pc, #112]	@ (8008e98 <TIM_OC3_SetConfig+0x11c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d007      	beq.n	8008e3a <TIM_OC3_SetConfig+0xbe>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008e9c <TIM_OC3_SetConfig+0x120>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d003      	beq.n	8008e3a <TIM_OC3_SetConfig+0xbe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a16      	ldr	r2, [pc, #88]	@ (8008e90 <TIM_OC3_SetConfig+0x114>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d113      	bne.n	8008e62 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	621a      	str	r2, [r3, #32]
}
 8008e7c:	bf00      	nop
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	40012c00 	.word	0x40012c00
 8008e8c:	40013400 	.word	0x40013400
 8008e90:	40015000 	.word	0x40015000
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	021b      	lsls	r3, r3, #8
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	031b      	lsls	r3, r3, #12
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a2c      	ldr	r2, [pc, #176]	@ (8008fb0 <TIM_OC4_SetConfig+0x110>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d007      	beq.n	8008f14 <TIM_OC4_SetConfig+0x74>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb4 <TIM_OC4_SetConfig+0x114>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_OC4_SetConfig+0x74>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fb8 <TIM_OC4_SetConfig+0x118>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d10d      	bne.n	8008f30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	031b      	lsls	r3, r3, #12
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1f      	ldr	r2, [pc, #124]	@ (8008fb0 <TIM_OC4_SetConfig+0x110>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d013      	beq.n	8008f60 <TIM_OC4_SetConfig+0xc0>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb4 <TIM_OC4_SetConfig+0x114>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00f      	beq.n	8008f60 <TIM_OC4_SetConfig+0xc0>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a1e      	ldr	r2, [pc, #120]	@ (8008fbc <TIM_OC4_SetConfig+0x11c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00b      	beq.n	8008f60 <TIM_OC4_SetConfig+0xc0>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc0 <TIM_OC4_SetConfig+0x120>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d007      	beq.n	8008f60 <TIM_OC4_SetConfig+0xc0>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1c      	ldr	r2, [pc, #112]	@ (8008fc4 <TIM_OC4_SetConfig+0x124>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_OC4_SetConfig+0xc0>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a17      	ldr	r2, [pc, #92]	@ (8008fb8 <TIM_OC4_SetConfig+0x118>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d113      	bne.n	8008f88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	019b      	lsls	r3, r3, #6
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	019b      	lsls	r3, r3, #6
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	621a      	str	r2, [r3, #32]
}
 8008fa2:	bf00      	nop
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	40012c00 	.word	0x40012c00
 8008fb4:	40013400 	.word	0x40013400
 8008fb8:	40015000 	.word	0x40015000
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	40014400 	.word	0x40014400
 8008fc4:	40014800 	.word	0x40014800

08008fc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800900c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	041b      	lsls	r3, r3, #16
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a19      	ldr	r2, [pc, #100]	@ (8009084 <TIM_OC5_SetConfig+0xbc>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d013      	beq.n	800904a <TIM_OC5_SetConfig+0x82>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a18      	ldr	r2, [pc, #96]	@ (8009088 <TIM_OC5_SetConfig+0xc0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00f      	beq.n	800904a <TIM_OC5_SetConfig+0x82>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a17      	ldr	r2, [pc, #92]	@ (800908c <TIM_OC5_SetConfig+0xc4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00b      	beq.n	800904a <TIM_OC5_SetConfig+0x82>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a16      	ldr	r2, [pc, #88]	@ (8009090 <TIM_OC5_SetConfig+0xc8>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d007      	beq.n	800904a <TIM_OC5_SetConfig+0x82>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a15      	ldr	r2, [pc, #84]	@ (8009094 <TIM_OC5_SetConfig+0xcc>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_OC5_SetConfig+0x82>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a14      	ldr	r2, [pc, #80]	@ (8009098 <TIM_OC5_SetConfig+0xd0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d109      	bne.n	800905e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009050:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	021b      	lsls	r3, r3, #8
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	621a      	str	r2, [r3, #32]
}
 8009078:	bf00      	nop
 800907a:	371c      	adds	r7, #28
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40013400 	.word	0x40013400
 800908c:	40014000 	.word	0x40014000
 8009090:	40014400 	.word	0x40014400
 8009094:	40014800 	.word	0x40014800
 8009098:	40015000 	.word	0x40015000

0800909c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80090e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	051b      	lsls	r3, r3, #20
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a1a      	ldr	r2, [pc, #104]	@ (800915c <TIM_OC6_SetConfig+0xc0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d013      	beq.n	8009120 <TIM_OC6_SetConfig+0x84>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a19      	ldr	r2, [pc, #100]	@ (8009160 <TIM_OC6_SetConfig+0xc4>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d00f      	beq.n	8009120 <TIM_OC6_SetConfig+0x84>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a18      	ldr	r2, [pc, #96]	@ (8009164 <TIM_OC6_SetConfig+0xc8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00b      	beq.n	8009120 <TIM_OC6_SetConfig+0x84>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a17      	ldr	r2, [pc, #92]	@ (8009168 <TIM_OC6_SetConfig+0xcc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <TIM_OC6_SetConfig+0x84>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a16      	ldr	r2, [pc, #88]	@ (800916c <TIM_OC6_SetConfig+0xd0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d003      	beq.n	8009120 <TIM_OC6_SetConfig+0x84>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a15      	ldr	r2, [pc, #84]	@ (8009170 <TIM_OC6_SetConfig+0xd4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d109      	bne.n	8009134 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009126:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	029b      	lsls	r3, r3, #10
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	4313      	orrs	r3, r2
 8009132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	621a      	str	r2, [r3, #32]
}
 800914e:	bf00      	nop
 8009150:	371c      	adds	r7, #28
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40012c00 	.word	0x40012c00
 8009160:	40013400 	.word	0x40013400
 8009164:	40014000 	.word	0x40014000
 8009168:	40014400 	.word	0x40014400
 800916c:	40014800 	.word	0x40014800
 8009170:	40015000 	.word	0x40015000

08009174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f003 031f 	and.w	r3, r3, #31
 8009186:	2201      	movs	r2, #1
 8009188:	fa02 f303 	lsl.w	r3, r2, r3
 800918c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1a      	ldr	r2, [r3, #32]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	43db      	mvns	r3, r3
 8009196:	401a      	ands	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1a      	ldr	r2, [r3, #32]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 031f 	and.w	r3, r3, #31
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ac:	431a      	orrs	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	621a      	str	r2, [r3, #32]
}
 80091b2:	bf00      	nop
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
	...

080091c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d101      	bne.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091d4:	2302      	movs	r3, #2
 80091d6:	e074      	b.n	80092c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a34      	ldr	r2, [pc, #208]	@ (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a33      	ldr	r2, [pc, #204]	@ (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a31      	ldr	r2, [pc, #196]	@ (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d108      	bne.n	8009228 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800921c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800922e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a21      	ldr	r2, [pc, #132]	@ (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d022      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009258:	d01d      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1f      	ldr	r2, [pc, #124]	@ (80092dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d018      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a1d      	ldr	r2, [pc, #116]	@ (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d013      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a1c      	ldr	r2, [pc, #112]	@ (80092e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00e      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a15      	ldr	r2, [pc, #84]	@ (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d009      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a18      	ldr	r2, [pc, #96]	@ (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d004      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a11      	ldr	r2, [pc, #68]	@ (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d10c      	bne.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800929c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40012c00 	.word	0x40012c00
 80092d4:	40013400 	.word	0x40013400
 80092d8:	40015000 	.word	0x40015000
 80092dc:	40000400 	.word	0x40000400
 80092e0:	40000800 	.word	0x40000800
 80092e4:	40000c00 	.word	0x40000c00
 80092e8:	40014000 	.word	0x40014000

080092ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009304:	2302      	movs	r3, #2
 8009306:	e096      	b.n	8009436 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	4313      	orrs	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	4313      	orrs	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	041b      	lsls	r3, r3, #16
 800937e:	4313      	orrs	r3, r2
 8009380:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a2f      	ldr	r2, [pc, #188]	@ (8009444 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d009      	beq.n	80093a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a2d      	ldr	r2, [pc, #180]	@ (8009448 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d004      	beq.n	80093a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a2c      	ldr	r2, [pc, #176]	@ (800944c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d106      	bne.n	80093ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a24      	ldr	r2, [pc, #144]	@ (8009444 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d009      	beq.n	80093cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a22      	ldr	r2, [pc, #136]	@ (8009448 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d004      	beq.n	80093cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a21      	ldr	r2, [pc, #132]	@ (800944c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d12b      	bne.n	8009424 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d6:	051b      	lsls	r3, r3, #20
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	4313      	orrs	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a11      	ldr	r2, [pc, #68]	@ (8009444 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d009      	beq.n	8009416 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a10      	ldr	r2, [pc, #64]	@ (8009448 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d004      	beq.n	8009416 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a0e      	ldr	r2, [pc, #56]	@ (800944c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d106      	bne.n	8009424 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40012c00 	.word	0x40012c00
 8009448:	40013400 	.word	0x40013400
 800944c:	40015000 	.word	0x40015000

08009450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e042      	b.n	8009574 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7f9 f9f7 	bl	80028f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2224      	movs	r2, #36	@ 0x24
 800950a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f938 	bl	8009794 <UART_SetConfig>
 8009524:	4603      	mov	r3, r0
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e022      	b.n	8009574 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fc28 	bl	8009d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800954a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800955a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f042 0201 	orr.w	r2, r2, #1
 800956a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fcaf 	bl	8009ed0 <UART_CheckIdleState>
 8009572:	4603      	mov	r3, r0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	@ 0x28
 8009580:	af02      	add	r7, sp, #8
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	4613      	mov	r3, r2
 800958a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009592:	2b20      	cmp	r3, #32
 8009594:	f040 8083 	bne.w	800969e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <HAL_UART_Transmit+0x28>
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e07b      	b.n	80096a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_UART_Transmit+0x3a>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e074      	b.n	80096a0 <HAL_UART_Transmit+0x124>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2221      	movs	r2, #33	@ 0x21
 80095ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095ce:	f7f9 fd0b 	bl	8002fe8 <HAL_GetTick>
 80095d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	88fa      	ldrh	r2, [r7, #6]
 80095d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ec:	d108      	bne.n	8009600 <HAL_UART_Transmit+0x84>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d104      	bne.n	8009600 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	61bb      	str	r3, [r7, #24]
 80095fe:	e003      	b.n	8009608 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009604:	2300      	movs	r3, #0
 8009606:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8009610:	e02c      	b.n	800966c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2200      	movs	r2, #0
 800961a:	2180      	movs	r1, #128	@ 0x80
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fca2 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e039      	b.n	80096a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10b      	bne.n	800964a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009640:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	3302      	adds	r3, #2
 8009646:	61bb      	str	r3, [r7, #24]
 8009648:	e007      	b.n	800965a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	781a      	ldrb	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	3301      	adds	r3, #1
 8009658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009672:	b29b      	uxth	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1cc      	bne.n	8009612 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2200      	movs	r2, #0
 8009680:	2140      	movs	r1, #64	@ 0x40
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fc6f 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e006      	b.n	80096a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	e000      	b.n	80096a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800969e:	2302      	movs	r3, #2
  }
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3720      	adds	r7, #32
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08a      	sub	sp, #40	@ 0x28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4613      	mov	r3, r2
 80096b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d142      	bne.n	8009746 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <HAL_UART_Receive_DMA+0x24>
 80096c6:	88fb      	ldrh	r3, [r7, #6]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e03b      	b.n	8009748 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <HAL_UART_Receive_DMA+0x36>
 80096da:	2302      	movs	r3, #2
 80096dc:	e034      	b.n	8009748 <HAL_UART_Receive_DMA+0xa0>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a17      	ldr	r2, [pc, #92]	@ (8009750 <HAL_UART_Receive_DMA+0xa8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01f      	beq.n	8009736 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d018      	beq.n	8009736 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	613b      	str	r3, [r7, #16]
   return(result);
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009722:	623b      	str	r3, [r7, #32]
 8009724:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	69f9      	ldr	r1, [r7, #28]
 8009728:	6a3a      	ldr	r2, [r7, #32]
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e6      	bne.n	8009704 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	461a      	mov	r2, r3
 800973a:	68b9      	ldr	r1, [r7, #8]
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 fcdb 	bl	800a0f8 <UART_Start_Receive_DMA>
 8009742:	4603      	mov	r3, r0
 8009744:	e000      	b.n	8009748 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009746:	2302      	movs	r3, #2
  }
}
 8009748:	4618      	mov	r0, r3
 800974a:	3728      	adds	r7, #40	@ 0x28
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40008000 	.word	0x40008000

08009754 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009798:	b08c      	sub	sp, #48	@ 0x30
 800979a:	af00      	add	r7, sp, #0
 800979c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	431a      	orrs	r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	431a      	orrs	r2, r3
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4baa      	ldr	r3, [pc, #680]	@ (8009a6c <UART_SetConfig+0x2d8>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	6812      	ldr	r2, [r2, #0]
 80097ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097cc:	430b      	orrs	r3, r1
 80097ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a9f      	ldr	r2, [pc, #636]	@ (8009a70 <UART_SetConfig+0x2dc>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d004      	beq.n	8009800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097fc:	4313      	orrs	r3, r2
 80097fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800980a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	6812      	ldr	r2, [r2, #0]
 8009812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009814:	430b      	orrs	r3, r1
 8009816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	f023 010f 	bic.w	r1, r3, #15
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a90      	ldr	r2, [pc, #576]	@ (8009a74 <UART_SetConfig+0x2e0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d125      	bne.n	8009884 <UART_SetConfig+0xf0>
 8009838:	4b8f      	ldr	r3, [pc, #572]	@ (8009a78 <UART_SetConfig+0x2e4>)
 800983a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d81a      	bhi.n	800987c <UART_SetConfig+0xe8>
 8009846:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <UART_SetConfig+0xb8>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	0800985d 	.word	0x0800985d
 8009850:	0800986d 	.word	0x0800986d
 8009854:	08009865 	.word	0x08009865
 8009858:	08009875 	.word	0x08009875
 800985c:	2301      	movs	r3, #1
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009862:	e116      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009864:	2302      	movs	r3, #2
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986a:	e112      	b.n	8009a92 <UART_SetConfig+0x2fe>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009872:	e10e      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987a:	e10a      	b.n	8009a92 <UART_SetConfig+0x2fe>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009882:	e106      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a7c      	ldr	r2, [pc, #496]	@ (8009a7c <UART_SetConfig+0x2e8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d138      	bne.n	8009900 <UART_SetConfig+0x16c>
 800988e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a78 <UART_SetConfig+0x2e4>)
 8009890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009894:	f003 030c 	and.w	r3, r3, #12
 8009898:	2b0c      	cmp	r3, #12
 800989a:	d82d      	bhi.n	80098f8 <UART_SetConfig+0x164>
 800989c:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <UART_SetConfig+0x110>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	080098d9 	.word	0x080098d9
 80098a8:	080098f9 	.word	0x080098f9
 80098ac:	080098f9 	.word	0x080098f9
 80098b0:	080098f9 	.word	0x080098f9
 80098b4:	080098e9 	.word	0x080098e9
 80098b8:	080098f9 	.word	0x080098f9
 80098bc:	080098f9 	.word	0x080098f9
 80098c0:	080098f9 	.word	0x080098f9
 80098c4:	080098e1 	.word	0x080098e1
 80098c8:	080098f9 	.word	0x080098f9
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	080098f9 	.word	0x080098f9
 80098d4:	080098f1 	.word	0x080098f1
 80098d8:	2300      	movs	r3, #0
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098de:	e0d8      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80098e0:	2302      	movs	r3, #2
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e6:	e0d4      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80098e8:	2304      	movs	r3, #4
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ee:	e0d0      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80098f0:	2308      	movs	r3, #8
 80098f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098f6:	e0cc      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098fe:	e0c8      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a5e      	ldr	r2, [pc, #376]	@ (8009a80 <UART_SetConfig+0x2ec>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d125      	bne.n	8009956 <UART_SetConfig+0x1c2>
 800990a:	4b5b      	ldr	r3, [pc, #364]	@ (8009a78 <UART_SetConfig+0x2e4>)
 800990c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009910:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009914:	2b30      	cmp	r3, #48	@ 0x30
 8009916:	d016      	beq.n	8009946 <UART_SetConfig+0x1b2>
 8009918:	2b30      	cmp	r3, #48	@ 0x30
 800991a:	d818      	bhi.n	800994e <UART_SetConfig+0x1ba>
 800991c:	2b20      	cmp	r3, #32
 800991e:	d00a      	beq.n	8009936 <UART_SetConfig+0x1a2>
 8009920:	2b20      	cmp	r3, #32
 8009922:	d814      	bhi.n	800994e <UART_SetConfig+0x1ba>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <UART_SetConfig+0x19a>
 8009928:	2b10      	cmp	r3, #16
 800992a:	d008      	beq.n	800993e <UART_SetConfig+0x1aa>
 800992c:	e00f      	b.n	800994e <UART_SetConfig+0x1ba>
 800992e:	2300      	movs	r3, #0
 8009930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009934:	e0ad      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009936:	2302      	movs	r3, #2
 8009938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993c:	e0a9      	b.n	8009a92 <UART_SetConfig+0x2fe>
 800993e:	2304      	movs	r3, #4
 8009940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009944:	e0a5      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009946:	2308      	movs	r3, #8
 8009948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800994c:	e0a1      	b.n	8009a92 <UART_SetConfig+0x2fe>
 800994e:	2310      	movs	r3, #16
 8009950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009954:	e09d      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a4a      	ldr	r2, [pc, #296]	@ (8009a84 <UART_SetConfig+0x2f0>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d125      	bne.n	80099ac <UART_SetConfig+0x218>
 8009960:	4b45      	ldr	r3, [pc, #276]	@ (8009a78 <UART_SetConfig+0x2e4>)
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009966:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800996a:	2bc0      	cmp	r3, #192	@ 0xc0
 800996c:	d016      	beq.n	800999c <UART_SetConfig+0x208>
 800996e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009970:	d818      	bhi.n	80099a4 <UART_SetConfig+0x210>
 8009972:	2b80      	cmp	r3, #128	@ 0x80
 8009974:	d00a      	beq.n	800998c <UART_SetConfig+0x1f8>
 8009976:	2b80      	cmp	r3, #128	@ 0x80
 8009978:	d814      	bhi.n	80099a4 <UART_SetConfig+0x210>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <UART_SetConfig+0x1f0>
 800997e:	2b40      	cmp	r3, #64	@ 0x40
 8009980:	d008      	beq.n	8009994 <UART_SetConfig+0x200>
 8009982:	e00f      	b.n	80099a4 <UART_SetConfig+0x210>
 8009984:	2300      	movs	r3, #0
 8009986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800998a:	e082      	b.n	8009a92 <UART_SetConfig+0x2fe>
 800998c:	2302      	movs	r3, #2
 800998e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009992:	e07e      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009994:	2304      	movs	r3, #4
 8009996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800999a:	e07a      	b.n	8009a92 <UART_SetConfig+0x2fe>
 800999c:	2308      	movs	r3, #8
 800999e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099a2:	e076      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80099a4:	2310      	movs	r3, #16
 80099a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099aa:	e072      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a35      	ldr	r2, [pc, #212]	@ (8009a88 <UART_SetConfig+0x2f4>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d12a      	bne.n	8009a0c <UART_SetConfig+0x278>
 80099b6:	4b30      	ldr	r3, [pc, #192]	@ (8009a78 <UART_SetConfig+0x2e4>)
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099c4:	d01a      	beq.n	80099fc <UART_SetConfig+0x268>
 80099c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099ca:	d81b      	bhi.n	8009a04 <UART_SetConfig+0x270>
 80099cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099d0:	d00c      	beq.n	80099ec <UART_SetConfig+0x258>
 80099d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099d6:	d815      	bhi.n	8009a04 <UART_SetConfig+0x270>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <UART_SetConfig+0x250>
 80099dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099e0:	d008      	beq.n	80099f4 <UART_SetConfig+0x260>
 80099e2:	e00f      	b.n	8009a04 <UART_SetConfig+0x270>
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ea:	e052      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80099ec:	2302      	movs	r3, #2
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099f2:	e04e      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80099f4:	2304      	movs	r3, #4
 80099f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099fa:	e04a      	b.n	8009a92 <UART_SetConfig+0x2fe>
 80099fc:	2308      	movs	r3, #8
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a02:	e046      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009a04:	2310      	movs	r3, #16
 8009a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a0a:	e042      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a17      	ldr	r2, [pc, #92]	@ (8009a70 <UART_SetConfig+0x2dc>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d13a      	bne.n	8009a8c <UART_SetConfig+0x2f8>
 8009a16:	4b18      	ldr	r3, [pc, #96]	@ (8009a78 <UART_SetConfig+0x2e4>)
 8009a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a24:	d01a      	beq.n	8009a5c <UART_SetConfig+0x2c8>
 8009a26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a2a:	d81b      	bhi.n	8009a64 <UART_SetConfig+0x2d0>
 8009a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a30:	d00c      	beq.n	8009a4c <UART_SetConfig+0x2b8>
 8009a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a36:	d815      	bhi.n	8009a64 <UART_SetConfig+0x2d0>
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <UART_SetConfig+0x2b0>
 8009a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a40:	d008      	beq.n	8009a54 <UART_SetConfig+0x2c0>
 8009a42:	e00f      	b.n	8009a64 <UART_SetConfig+0x2d0>
 8009a44:	2300      	movs	r3, #0
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4a:	e022      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a52:	e01e      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a5a:	e01a      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a62:	e016      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a6a:	e012      	b.n	8009a92 <UART_SetConfig+0x2fe>
 8009a6c:	cfff69f3 	.word	0xcfff69f3
 8009a70:	40008000 	.word	0x40008000
 8009a74:	40013800 	.word	0x40013800
 8009a78:	40021000 	.word	0x40021000
 8009a7c:	40004400 	.word	0x40004400
 8009a80:	40004800 	.word	0x40004800
 8009a84:	40004c00 	.word	0x40004c00
 8009a88:	40005000 	.word	0x40005000
 8009a8c:	2310      	movs	r3, #16
 8009a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4aae      	ldr	r2, [pc, #696]	@ (8009d50 <UART_SetConfig+0x5bc>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	f040 8097 	bne.w	8009bcc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d823      	bhi.n	8009aee <UART_SetConfig+0x35a>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <UART_SetConfig+0x318>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009aef 	.word	0x08009aef
 8009ab4:	08009ad9 	.word	0x08009ad9
 8009ab8:	08009aef 	.word	0x08009aef
 8009abc:	08009adf 	.word	0x08009adf
 8009ac0:	08009aef 	.word	0x08009aef
 8009ac4:	08009aef 	.word	0x08009aef
 8009ac8:	08009aef 	.word	0x08009aef
 8009acc:	08009ae7 	.word	0x08009ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad0:	f7fd fa92 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8009ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ad6:	e010      	b.n	8009afa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ad8:	4b9e      	ldr	r3, [pc, #632]	@ (8009d54 <UART_SetConfig+0x5c0>)
 8009ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009adc:	e00d      	b.n	8009afa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ade:	f7fd fa1d 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 8009ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ae4:	e009      	b.n	8009afa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009aec:	e005      	b.n	8009afa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 8130 	beq.w	8009d62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b06:	4a94      	ldr	r2, [pc, #592]	@ (8009d58 <UART_SetConfig+0x5c4>)
 8009b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	4413      	add	r3, r2
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d305      	bcc.n	8009b32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d903      	bls.n	8009b3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b38:	e113      	b.n	8009d62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	60bb      	str	r3, [r7, #8]
 8009b40:	60fa      	str	r2, [r7, #12]
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b46:	4a84      	ldr	r2, [pc, #528]	@ (8009d58 <UART_SetConfig+0x5c4>)
 8009b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	2200      	movs	r2, #0
 8009b50:	603b      	str	r3, [r7, #0]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b5c:	f7f6 fbb8 	bl	80002d0 <__aeabi_uldivmod>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4610      	mov	r0, r2
 8009b66:	4619      	mov	r1, r3
 8009b68:	f04f 0200 	mov.w	r2, #0
 8009b6c:	f04f 0300 	mov.w	r3, #0
 8009b70:	020b      	lsls	r3, r1, #8
 8009b72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b76:	0202      	lsls	r2, r0, #8
 8009b78:	6979      	ldr	r1, [r7, #20]
 8009b7a:	6849      	ldr	r1, [r1, #4]
 8009b7c:	0849      	lsrs	r1, r1, #1
 8009b7e:	2000      	movs	r0, #0
 8009b80:	460c      	mov	r4, r1
 8009b82:	4605      	mov	r5, r0
 8009b84:	eb12 0804 	adds.w	r8, r2, r4
 8009b88:	eb43 0905 	adc.w	r9, r3, r5
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	469a      	mov	sl, r3
 8009b94:	4693      	mov	fp, r2
 8009b96:	4652      	mov	r2, sl
 8009b98:	465b      	mov	r3, fp
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	f7f6 fb97 	bl	80002d0 <__aeabi_uldivmod>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bb0:	d308      	bcc.n	8009bc4 <UART_SetConfig+0x430>
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bb8:	d204      	bcs.n	8009bc4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6a3a      	ldr	r2, [r7, #32]
 8009bc0:	60da      	str	r2, [r3, #12]
 8009bc2:	e0ce      	b.n	8009d62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bca:	e0ca      	b.n	8009d62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd4:	d166      	bne.n	8009ca4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bda:	2b08      	cmp	r3, #8
 8009bdc:	d827      	bhi.n	8009c2e <UART_SetConfig+0x49a>
 8009bde:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <UART_SetConfig+0x450>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009c09 	.word	0x08009c09
 8009be8:	08009c11 	.word	0x08009c11
 8009bec:	08009c19 	.word	0x08009c19
 8009bf0:	08009c2f 	.word	0x08009c2f
 8009bf4:	08009c1f 	.word	0x08009c1f
 8009bf8:	08009c2f 	.word	0x08009c2f
 8009bfc:	08009c2f 	.word	0x08009c2f
 8009c00:	08009c2f 	.word	0x08009c2f
 8009c04:	08009c27 	.word	0x08009c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c08:	f7fd f9f6 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8009c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c0e:	e014      	b.n	8009c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c10:	f7fd fa08 	bl	8007024 <HAL_RCC_GetPCLK2Freq>
 8009c14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c16:	e010      	b.n	8009c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c18:	4b4e      	ldr	r3, [pc, #312]	@ (8009d54 <UART_SetConfig+0x5c0>)
 8009c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c1c:	e00d      	b.n	8009c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c1e:	f7fd f97d 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 8009c22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c24:	e009      	b.n	8009c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c2c:	e005      	b.n	8009c3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 8090 	beq.w	8009d62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c46:	4a44      	ldr	r2, [pc, #272]	@ (8009d58 <UART_SetConfig+0x5c4>)
 8009c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c54:	005a      	lsls	r2, r3, #1
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	085b      	lsrs	r3, r3, #1
 8009c5c:	441a      	add	r2, r3
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	2b0f      	cmp	r3, #15
 8009c6c:	d916      	bls.n	8009c9c <UART_SetConfig+0x508>
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c74:	d212      	bcs.n	8009c9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	f023 030f 	bic.w	r3, r3, #15
 8009c7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	8bfb      	ldrh	r3, [r7, #30]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	8bfa      	ldrh	r2, [r7, #30]
 8009c98:	60da      	str	r2, [r3, #12]
 8009c9a:	e062      	b.n	8009d62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ca2:	e05e      	b.n	8009d62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d828      	bhi.n	8009cfe <UART_SetConfig+0x56a>
 8009cac:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <UART_SetConfig+0x520>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009ce1 	.word	0x08009ce1
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	08009cff 	.word	0x08009cff
 8009cc4:	08009cef 	.word	0x08009cef
 8009cc8:	08009cff 	.word	0x08009cff
 8009ccc:	08009cff 	.word	0x08009cff
 8009cd0:	08009cff 	.word	0x08009cff
 8009cd4:	08009cf7 	.word	0x08009cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cd8:	f7fd f98e 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8009cdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cde:	e014      	b.n	8009d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ce0:	f7fd f9a0 	bl	8007024 <HAL_RCC_GetPCLK2Freq>
 8009ce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ce6:	e010      	b.n	8009d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8009d54 <UART_SetConfig+0x5c0>)
 8009cea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cec:	e00d      	b.n	8009d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cee:	f7fd f915 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 8009cf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cf4:	e009      	b.n	8009d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cfc:	e005      	b.n	8009d0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d08:	bf00      	nop
    }

    if (pclk != 0U)
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d028      	beq.n	8009d62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d14:	4a10      	ldr	r2, [pc, #64]	@ (8009d58 <UART_SetConfig+0x5c4>)
 8009d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	441a      	add	r2, r3
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	2b0f      	cmp	r3, #15
 8009d38:	d910      	bls.n	8009d5c <UART_SetConfig+0x5c8>
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d40:	d20c      	bcs.n	8009d5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60da      	str	r2, [r3, #12]
 8009d4c:	e009      	b.n	8009d62 <UART_SetConfig+0x5ce>
 8009d4e:	bf00      	nop
 8009d50:	40008000 	.word	0x40008000
 8009d54:	00f42400 	.word	0x00f42400
 8009d58:	0800e0d8 	.word	0x0800e0d8
      }
      else
      {
        ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2200      	movs	r2, #0
 8009d76:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8009d7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3730      	adds	r7, #48	@ 0x30
 8009d86:	46bd      	mov	sp, r7
 8009d88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dba:	f003 0302 	and.w	r3, r3, #2
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfe:	f003 0308 	and.w	r3, r3, #8
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e8a:	d10a      	bne.n	8009ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ee0:	f7f9 f882 	bl	8002fe8 <HAL_GetTick>
 8009ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d10e      	bne.n	8009f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f82f 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e025      	b.n	8009f5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d10e      	bne.n	8009f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f819 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e00f      	b.n	8009f5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2220      	movs	r2, #32
 8009f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b09c      	sub	sp, #112	@ 0x70
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	603b      	str	r3, [r7, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f76:	e0a9      	b.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	f000 80a5 	beq.w	800a0cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f82:	f7f9 f831 	bl	8002fe8 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d140      	bne.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fa8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009fac:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fb8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009fbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e6      	bne.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fdc:	f023 0301 	bic.w	r3, r3, #1
 8009fe0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fea:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009fec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ff0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e5      	bne.n	8009fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2220      	movs	r2, #32
 800a002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2220      	movs	r2, #32
 800a00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e069      	b.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d051      	beq.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a036:	d149      	bne.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a040:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	e853 3f00 	ldrex	r3, [r3]
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a060:	637b      	str	r3, [r7, #52]	@ 0x34
 800a062:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a064:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a066:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a068:	e841 2300 	strex	r3, r2, [r1]
 800a06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e6      	bne.n	800a042 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3308      	adds	r3, #8
 800a07a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	e853 3f00 	ldrex	r3, [r3]
 800a082:	613b      	str	r3, [r7, #16]
   return(result);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3308      	adds	r3, #8
 800a092:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a094:	623a      	str	r2, [r7, #32]
 800a096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a098:	69f9      	ldr	r1, [r7, #28]
 800a09a:	6a3a      	ldr	r2, [r7, #32]
 800a09c:	e841 2300 	strex	r3, r2, [r1]
 800a0a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1e5      	bne.n	800a074 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e010      	b.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	69da      	ldr	r2, [r3, #28]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	bf0c      	ite	eq
 800a0dc:	2301      	moveq	r3, #1
 800a0de:	2300      	movne	r3, #0
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	f43f af46 	beq.w	8009f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3770      	adds	r7, #112	@ 0x70
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b096      	sub	sp, #88	@ 0x58
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	88fa      	ldrh	r2, [r7, #6]
 800a110:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2222      	movs	r2, #34	@ 0x22
 800a120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  if (huart->hdmarx != NULL)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d02c      	beq.n	800a186 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a130:	4a42      	ldr	r2, [pc, #264]	@ (800a23c <UART_Start_Receive_DMA+0x144>)
 800a132:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a138:	4a41      	ldr	r2, [pc, #260]	@ (800a240 <UART_Start_Receive_DMA+0x148>)
 800a13a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a140:	4a40      	ldr	r2, [pc, #256]	@ (800a244 <UART_Start_Receive_DMA+0x14c>)
 800a142:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a148:	2200      	movs	r2, #0
 800a14a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3324      	adds	r3, #36	@ 0x24
 800a156:	4619      	mov	r1, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a15c:	461a      	mov	r2, r3
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	f7fa fd24 	bl	8004bac <HAL_DMA_Start_IT>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00d      	beq.n	800a186 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2210      	movs	r2, #16
 800a16e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e055      	b.n	800a232 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d018      	beq.n	800a1c8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e6      	bne.n	800a196 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1da:	f043 0301 	orr.w	r3, r3, #1
 800a1de:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a1ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1f0:	e841 2300 	strex	r3, r2, [r1]
 800a1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e5      	bne.n	800a1c8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3308      	adds	r3, #8
 800a202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	e853 3f00 	ldrex	r3, [r3]
 800a20a:	613b      	str	r3, [r7, #16]
   return(result);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3308      	adds	r3, #8
 800a21a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a21c:	623a      	str	r2, [r7, #32]
 800a21e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a220:	69f9      	ldr	r1, [r7, #28]
 800a222:	6a3a      	ldr	r2, [r7, #32]
 800a224:	e841 2300 	strex	r3, r2, [r1]
 800a228:	61bb      	str	r3, [r7, #24]
   return(result);
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e5      	bne.n	800a1fc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3758      	adds	r7, #88	@ 0x58
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	0800a397 	.word	0x0800a397
 800a240:	0800a4bd 	.word	0x0800a4bd
 800a244:	0800a4f5 	.word	0x0800a4f5

0800a248 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b08f      	sub	sp, #60	@ 0x3c
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a270:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e6      	bne.n	800a250 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3308      	adds	r3, #8
 800a288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	60bb      	str	r3, [r7, #8]
   return(result);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a298:	633b      	str	r3, [r7, #48]	@ 0x30
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3308      	adds	r3, #8
 800a2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a2:	61ba      	str	r2, [r7, #24]
 800a2a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a6:	6979      	ldr	r1, [r7, #20]
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	e841 2300 	strex	r3, r2, [r1]
 800a2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1e5      	bne.n	800a282 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800a2be:	bf00      	nop
 800a2c0:	373c      	adds	r7, #60	@ 0x3c
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b095      	sub	sp, #84	@ 0x54
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2f8:	e841 2300 	strex	r3, r2, [r1]
 800a2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e6      	bne.n	800a2d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	61fb      	str	r3, [r7, #28]
   return(result);
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a31a:	f023 0301 	bic.w	r3, r3, #1
 800a31e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3308      	adds	r3, #8
 800a326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a328:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a32a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a32e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e3      	bne.n	800a304 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a340:	2b01      	cmp	r3, #1
 800a342:	d118      	bne.n	800a376 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	60bb      	str	r3, [r7, #8]
   return(result);
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f023 0310 	bic.w	r3, r3, #16
 800a358:	647b      	str	r3, [r7, #68]	@ 0x44
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a362:	61bb      	str	r3, [r7, #24]
 800a364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6979      	ldr	r1, [r7, #20]
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	613b      	str	r3, [r7, #16]
   return(result);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e6      	bne.n	800a344 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2220      	movs	r2, #32
 800a37a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800a38a:	bf00      	nop
 800a38c:	3754      	adds	r7, #84	@ 0x54
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b09c      	sub	sp, #112	@ 0x70
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0320 	and.w	r3, r3, #32
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d171      	bne.n	800a496 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a3b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e6      	bne.n	800a3ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fe:	f023 0301 	bic.w	r3, r3, #1
 800a402:	667b      	str	r3, [r7, #100]	@ 0x64
 800a404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3308      	adds	r3, #8
 800a40a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a40c:	647a      	str	r2, [r7, #68]	@ 0x44
 800a40e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e5      	bne.n	800a3ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3308      	adds	r3, #8
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	e853 3f00 	ldrex	r3, [r3]
 800a42e:	623b      	str	r3, [r7, #32]
   return(result);
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a436:	663b      	str	r3, [r7, #96]	@ 0x60
 800a438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3308      	adds	r3, #8
 800a43e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a440:	633a      	str	r2, [r7, #48]	@ 0x30
 800a442:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e5      	bne.n	800a420 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a456:	2220      	movs	r2, #32
 800a458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a45c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a460:	2b01      	cmp	r3, #1
 800a462:	d118      	bne.n	800a496 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	e853 3f00 	ldrex	r3, [r3]
 800a470:	60fb      	str	r3, [r7, #12]
   return(result);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f023 0310 	bic.w	r3, r3, #16
 800a478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a47a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a482:	61fb      	str	r3, [r7, #28]
 800a484:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a486:	69b9      	ldr	r1, [r7, #24]
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	e841 2300 	strex	r3, r2, [r1]
 800a48e:	617b      	str	r3, [r7, #20]
   return(result);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1e6      	bne.n	800a464 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d107      	bne.n	800a4ae <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a49e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4a8:	f7ff f968 	bl	800977c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4ac:	e002      	b.n	800a4b4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a4ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4b0:	f7f6 facc 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 800a4b4:	bf00      	nop
 800a4b6:	3770      	adds	r7, #112	@ 0x70
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d109      	bne.n	800a4e6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4619      	mov	r1, r3
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7ff f94c 	bl	800977c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4e4:	e002      	b.n	800a4ec <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7ff f934 	bl	8009754 <HAL_UART_RxHalfCpltCallback>
}
 800a4ec:	bf00      	nop
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a500:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a508:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a510:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a51c:	2b80      	cmp	r3, #128	@ 0x80
 800a51e:	d109      	bne.n	800a534 <UART_DMAError+0x40>
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2b21      	cmp	r3, #33	@ 0x21
 800a524:	d106      	bne.n	800a534 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a52e:	6978      	ldr	r0, [r7, #20]
 800a530:	f7ff fe8a 	bl	800a248 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a53e:	2b40      	cmp	r3, #64	@ 0x40
 800a540:	d109      	bne.n	800a556 <UART_DMAError+0x62>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b22      	cmp	r3, #34	@ 0x22
 800a546:	d106      	bne.n	800a556 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a550:	6978      	ldr	r0, [r7, #20]
 800a552:	f7ff feba 	bl	800a2ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a55c:	f043 0210 	orr.w	r2, r3, #16
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a566:	6978      	ldr	r0, [r7, #20]
 800a568:	f7ff f8fe 	bl	8009768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a56c:	bf00      	nop
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a582:	2b01      	cmp	r3, #1
 800a584:	d101      	bne.n	800a58a <HAL_UARTEx_DisableFifoMode+0x16>
 800a586:	2302      	movs	r3, #2
 800a588:	e027      	b.n	800a5da <HAL_UARTEx_DisableFifoMode+0x66>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2224      	movs	r2, #36	@ 0x24
 800a596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f022 0201 	bic.w	r2, r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d101      	bne.n	800a5fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e02d      	b.n	800a65a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2224      	movs	r2, #36	@ 0x24
 800a60a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0201 	bic.w	r2, r2, #1
 800a624:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f850 	bl	800a6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2220      	movs	r2, #32
 800a64c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a672:	2b01      	cmp	r3, #1
 800a674:	d101      	bne.n	800a67a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a676:	2302      	movs	r3, #2
 800a678:	e02d      	b.n	800a6d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2224      	movs	r2, #36	@ 0x24
 800a686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f022 0201 	bic.w	r2, r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f812 	bl	800a6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d108      	bne.n	800a702 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a700:	e031      	b.n	800a766 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a702:	2308      	movs	r3, #8
 800a704:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a706:	2308      	movs	r3, #8
 800a708:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	0e5b      	lsrs	r3, r3, #25
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f003 0307 	and.w	r3, r3, #7
 800a718:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	0f5b      	lsrs	r3, r3, #29
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0307 	and.w	r3, r3, #7
 800a728:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	7b3a      	ldrb	r2, [r7, #12]
 800a72e:	4911      	ldr	r1, [pc, #68]	@ (800a774 <UARTEx_SetNbDataToProcess+0x94>)
 800a730:	5c8a      	ldrb	r2, [r1, r2]
 800a732:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a736:	7b3a      	ldrb	r2, [r7, #12]
 800a738:	490f      	ldr	r1, [pc, #60]	@ (800a778 <UARTEx_SetNbDataToProcess+0x98>)
 800a73a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a73c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a740:	b29a      	uxth	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	7b7a      	ldrb	r2, [r7, #13]
 800a74c:	4909      	ldr	r1, [pc, #36]	@ (800a774 <UARTEx_SetNbDataToProcess+0x94>)
 800a74e:	5c8a      	ldrb	r2, [r1, r2]
 800a750:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a754:	7b7a      	ldrb	r2, [r7, #13]
 800a756:	4908      	ldr	r1, [pc, #32]	@ (800a778 <UARTEx_SetNbDataToProcess+0x98>)
 800a758:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a75a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a766:	bf00      	nop
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	0800e0f0 	.word	0x0800e0f0
 800a778:	0800e0f8 	.word	0x0800e0f8

0800a77c <SPI_QCA7000_Read_Signature>:

void SPI_Transmit_Receive();
void Serial_Print();


uint16_t SPI_QCA7000_Read_Signature(void){
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
    uint16_t sig;
    uint8_t i;
    i = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xDA;
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	71fa      	strb	r2, [r7, #7]
 800a78c:	461a      	mov	r2, r3
 800a78e:	4b1b      	ldr	r3, [pc, #108]	@ (800a7fc <SPI_QCA7000_Read_Signature+0x80>)
 800a790:	21da      	movs	r1, #218	@ 0xda
 800a792:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	71fa      	strb	r2, [r7, #7]
 800a79a:	461a      	mov	r2, r3
 800a79c:	4b17      	ldr	r3, [pc, #92]	@ (800a7fc <SPI_QCA7000_Read_Signature+0x80>)
 800a79e:	2100      	movs	r1, #0
 800a7a0:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	71fa      	strb	r2, [r7, #7]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4b14      	ldr	r3, [pc, #80]	@ (800a7fc <SPI_QCA7000_Read_Signature+0x80>)
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	71fa      	strb	r2, [r7, #7]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	4b10      	ldr	r3, [pc, #64]	@ (800a7fc <SPI_QCA7000_Read_Signature+0x80>)
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a800 <SPI_QCA7000_Read_Signature+0x84>)
 800a7c4:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800a7c6:	f7f6 f8e7 	bl	8000998 <SPI_Transmit_Receive>

    sig = spi_rx_buffer[2];
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a804 <SPI_QCA7000_Read_Signature+0x88>)
 800a7cc:	789b      	ldrb	r3, [r3, #2]
 800a7ce:	80bb      	strh	r3, [r7, #4]
    sig <<= 8;
 800a7d0:	88bb      	ldrh	r3, [r7, #4]
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	80bb      	strh	r3, [r7, #4]
    sig += spi_rx_buffer[3];
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a804 <SPI_QCA7000_Read_Signature+0x88>)
 800a7d8:	78db      	ldrb	r3, [r3, #3]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	88bb      	ldrh	r3, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	80bb      	strh	r3, [r7, #4]

    sprintf(serial_output_buffer, "Hello, sig is %X ", sig);
 800a7e2:	88bb      	ldrh	r3, [r7, #4]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4908      	ldr	r1, [pc, #32]	@ (800a808 <SPI_QCA7000_Read_Signature+0x8c>)
 800a7e8:	4808      	ldr	r0, [pc, #32]	@ (800a80c <SPI_QCA7000_Read_Signature+0x90>)
 800a7ea:	f002 f811 	bl	800c810 <siprintf>
    Serial_Print();
 800a7ee:	f7f6 f8b3 	bl	8000958 <Serial_Print>

    return sig;
 800a7f2:	88bb      	ldrh	r3, [r7, #4]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20000f3c 	.word	0x20000f3c
 800a800:	20001fa4 	.word	0x20001fa4
 800a804:	20001770 	.word	0x20001770
 800a808:	0800db10 	.word	0x0800db10
 800a80c:	20000708 	.word	0x20000708

0800a810 <SPI_QCA7000_Read_WRBUF_SPC_AVA>:

uint16_t SPI_QCA7000_Read_WRBUF_SPC_AVA(void){
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
    uint16_t len;
    uint8_t i;
    i = 0;
 800a816:	2300      	movs	r3, #0
 800a818:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xC2;
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	71fa      	strb	r2, [r7, #7]
 800a820:	461a      	mov	r2, r3
 800a822:	4b17      	ldr	r3, [pc, #92]	@ (800a880 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x70>)
 800a824:	21c2      	movs	r1, #194	@ 0xc2
 800a826:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	71fa      	strb	r2, [r7, #7]
 800a82e:	461a      	mov	r2, r3
 800a830:	4b13      	ldr	r3, [pc, #76]	@ (800a880 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x70>)
 800a832:	2100      	movs	r1, #0
 800a834:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	71fa      	strb	r2, [r7, #7]
 800a83c:	461a      	mov	r2, r3
 800a83e:	4b10      	ldr	r3, [pc, #64]	@ (800a880 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x70>)
 800a840:	2100      	movs	r1, #0
 800a842:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a844:	79fb      	ldrb	r3, [r7, #7]
 800a846:	1c5a      	adds	r2, r3, #1
 800a848:	71fa      	strb	r2, [r7, #7]
 800a84a:	461a      	mov	r2, r3
 800a84c:	4b0c      	ldr	r3, [pc, #48]	@ (800a880 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x70>)
 800a84e:	2100      	movs	r1, #0
 800a850:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	b29a      	uxth	r2, r3
 800a856:	4b0b      	ldr	r3, [pc, #44]	@ (800a884 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x74>)
 800a858:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800a85a:	f7f6 f89d 	bl	8000998 <SPI_Transmit_Receive>

    len = spi_rx_buffer[2];
 800a85e:	4b0a      	ldr	r3, [pc, #40]	@ (800a888 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x78>)
 800a860:	789b      	ldrb	r3, [r3, #2]
 800a862:	80bb      	strh	r3, [r7, #4]
    len <<= 8;
 800a864:	88bb      	ldrh	r3, [r7, #4]
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	80bb      	strh	r3, [r7, #4]
    len += spi_rx_buffer[3];
 800a86a:	4b07      	ldr	r3, [pc, #28]	@ (800a888 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x78>)
 800a86c:	78db      	ldrb	r3, [r3, #3]
 800a86e:	461a      	mov	r2, r3
 800a870:	88bb      	ldrh	r3, [r7, #4]
 800a872:	4413      	add	r3, r2
 800a874:	80bb      	strh	r3, [r7, #4]

//    sprintf(serial_output_buffer,"WRBUF_SPC_AVA is %X ", len);
//    Serial_Print();

    return len;
 800a876:	88bb      	ldrh	r3, [r7, #4]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20000f3c 	.word	0x20000f3c
 800a884:	20001fa4 	.word	0x20001fa4
 800a888:	20001770 	.word	0x20001770

0800a88c <SPI_QCA7000_Read_RDBUF_SPC_AVA>:

uint16_t SPI_QCA7000_Read_RDBUF_SPC_AVA(void){
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
    uint16_t len;
    uint8_t i;
    i = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xC3;
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	71fa      	strb	r2, [r7, #7]
 800a89c:	461a      	mov	r2, r3
 800a89e:	4b17      	ldr	r3, [pc, #92]	@ (800a8fc <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x70>)
 800a8a0:	21c3      	movs	r1, #195	@ 0xc3
 800a8a2:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	71fa      	strb	r2, [r7, #7]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	4b13      	ldr	r3, [pc, #76]	@ (800a8fc <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x70>)
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	71fa      	strb	r2, [r7, #7]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4b10      	ldr	r3, [pc, #64]	@ (800a8fc <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x70>)
 800a8bc:	2100      	movs	r1, #0
 800a8be:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	71fa      	strb	r2, [r7, #7]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a8fc <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x70>)
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a900 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x74>)
 800a8d4:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800a8d6:	f7f6 f85f 	bl	8000998 <SPI_Transmit_Receive>

    len = spi_rx_buffer[2];
 800a8da:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x78>)
 800a8dc:	789b      	ldrb	r3, [r3, #2]
 800a8de:	80bb      	strh	r3, [r7, #4]
    len <<= 8;
 800a8e0:	88bb      	ldrh	r3, [r7, #4]
 800a8e2:	021b      	lsls	r3, r3, #8
 800a8e4:	80bb      	strh	r3, [r7, #4]
    len += spi_rx_buffer[3];
 800a8e6:	4b07      	ldr	r3, [pc, #28]	@ (800a904 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x78>)
 800a8e8:	78db      	ldrb	r3, [r3, #3]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	88bb      	ldrh	r3, [r7, #4]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	80bb      	strh	r3, [r7, #4]

//    sprintf(serial_output_buffer,"RDBUF_SPC_AVA is %X ", len);
//    Serial_Print();

    return len;
 800a8f2:	88bb      	ldrh	r3, [r7, #4]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000f3c 	.word	0x20000f3c
 800a900:	20001fa4 	.word	0x20001fa4
 800a904:	20001770 	.word	0x20001770

0800a908 <SPI_QCA7000_Write_BFR_SIZE>:

void SPI_QCA7000_Write_BFR_SIZE(uint16_t len){
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	80fb      	strh	r3, [r7, #6]
    uint8_t i;
    i = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
    spi_tx_buffer[i++] = 0x41;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	73fa      	strb	r2, [r7, #15]
 800a91c:	461a      	mov	r2, r3
 800a91e:	4b13      	ldr	r3, [pc, #76]	@ (800a96c <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 800a920:	2141      	movs	r1, #65	@ 0x41
 800a922:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	73fa      	strb	r2, [r7, #15]
 800a92a:	461a      	mov	r2, r3
 800a92c:	4b0f      	ldr	r3, [pc, #60]	@ (800a96c <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 800a92e:	2100      	movs	r1, #0
 800a930:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = len >> 8;
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	0a1b      	lsrs	r3, r3, #8
 800a936:	b299      	uxth	r1, r3
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	73fa      	strb	r2, [r7, #15]
 800a93e:	461a      	mov	r2, r3
 800a940:	b2c9      	uxtb	r1, r1
 800a942:	4b0a      	ldr	r3, [pc, #40]	@ (800a96c <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 800a944:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = (uint8_t)len;
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	73fa      	strb	r2, [r7, #15]
 800a94c:	461a      	mov	r2, r3
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	b2d9      	uxtb	r1, r3
 800a952:	4b06      	ldr	r3, [pc, #24]	@ (800a96c <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 800a954:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	b29a      	uxth	r2, r3
 800a95a:	4b05      	ldr	r3, [pc, #20]	@ (800a970 <SPI_QCA7000_Write_BFR_SIZE+0x68>)
 800a95c:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800a95e:	f7f6 f81b 	bl	8000998 <SPI_Transmit_Receive>
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	20000f3c 	.word	0x20000f3c
 800a970:	20001fa4 	.word	0x20001fa4

0800a974 <SPI_QCA7000_Disable_REG_INTR_DISABLE>:

void SPI_QCA7000_Disable_REG_INTR_DISABLE(void){
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
    uint8_t i;
    i=0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0x4D;
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	71fa      	strb	r2, [r7, #7]
 800a984:	461a      	mov	r2, r3
 800a986:	4b11      	ldr	r3, [pc, #68]	@ (800a9cc <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 800a988:	214d      	movs	r1, #77	@ 0x4d
 800a98a:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	1c5a      	adds	r2, r3, #1
 800a990:	71fa      	strb	r2, [r7, #7]
 800a992:	461a      	mov	r2, r3
 800a994:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 800a996:	2100      	movs	r1, #0
 800a998:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	71fa      	strb	r2, [r7, #7]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9cc <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	71fa      	strb	r2, [r7, #7]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4b06      	ldr	r3, [pc, #24]	@ (800a9cc <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	4b05      	ldr	r3, [pc, #20]	@ (800a9d0 <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x5c>)
 800a9bc:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800a9be:	f7f5 ffeb 	bl	8000998 <SPI_Transmit_Receive>

//    sprintf(serial_output_buffer, "REG_INTR_ENABLE is disabled ");
//    Serial_Print();
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000f3c 	.word	0x20000f3c
 800a9d0:	20001fa4 	.word	0x20001fa4

0800a9d4 <SPI_QCA7000_Enable_REG_INTR_ENABLE>:

void SPI_QCA7000_Enable_REG_INTR_ENABLE(void){
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
    uint8_t i;
    i=0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0x4D;
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	71fa      	strb	r2, [r7, #7]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4b11      	ldr	r3, [pc, #68]	@ (800aa2c <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 800a9e8:	214d      	movs	r1, #77	@ 0x4d
 800a9ea:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	71fa      	strb	r2, [r7, #7]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800aa2c <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	71fa      	strb	r2, [r7, #7]
 800aa00:	461a      	mov	r2, r3
 800aa02:	4b0a      	ldr	r3, [pc, #40]	@ (800aa2c <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 800aa04:	2100      	movs	r1, #0
 800aa06:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x47;
 800aa08:	79fb      	ldrb	r3, [r7, #7]
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	71fa      	strb	r2, [r7, #7]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	4b06      	ldr	r3, [pc, #24]	@ (800aa2c <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 800aa12:	2147      	movs	r1, #71	@ 0x47
 800aa14:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x5c>)
 800aa1c:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800aa1e:	f7f5 ffbb 	bl	8000998 <SPI_Transmit_Receive>

//    sprintf(serial_output_buffer, "REG_INTR_ENABLE is enabled ");
//    Serial_Print();
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20000f3c 	.word	0x20000f3c
 800aa30:	20001fa4 	.word	0x20001fa4

0800aa34 <SPI_QCA7000_Read_REG_INTR_CAUSE>:

uint16_t SPI_QCA7000_Read_REG_INTR_CAUSE(void){
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
    uint16_t cause;
    uint8_t i;
    i=0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xCC;
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	71fa      	strb	r2, [r7, #7]
 800aa44:	461a      	mov	r2, r3
 800aa46:	4b36      	ldr	r3, [pc, #216]	@ (800ab20 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xec>)
 800aa48:	21cc      	movs	r1, #204	@ 0xcc
 800aa4a:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	71fa      	strb	r2, [r7, #7]
 800aa52:	461a      	mov	r2, r3
 800aa54:	4b32      	ldr	r3, [pc, #200]	@ (800ab20 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xec>)
 800aa56:	2100      	movs	r1, #0
 800aa58:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	71fa      	strb	r2, [r7, #7]
 800aa60:	461a      	mov	r2, r3
 800aa62:	4b2f      	ldr	r3, [pc, #188]	@ (800ab20 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xec>)
 800aa64:	2100      	movs	r1, #0
 800aa66:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	71fa      	strb	r2, [r7, #7]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	4b2b      	ldr	r3, [pc, #172]	@ (800ab20 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xec>)
 800aa72:	2100      	movs	r1, #0
 800aa74:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	4b2a      	ldr	r3, [pc, #168]	@ (800ab24 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xf0>)
 800aa7c:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800aa7e:	f7f5 ff8b 	bl	8000998 <SPI_Transmit_Receive>

    cause = spi_rx_buffer[2];
 800aa82:	4b29      	ldr	r3, [pc, #164]	@ (800ab28 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xf4>)
 800aa84:	789b      	ldrb	r3, [r3, #2]
 800aa86:	80bb      	strh	r3, [r7, #4]
    cause <<= 8;
 800aa88:	88bb      	ldrh	r3, [r7, #4]
 800aa8a:	021b      	lsls	r3, r3, #8
 800aa8c:	80bb      	strh	r3, [r7, #4]
    cause += spi_rx_buffer[3];
 800aa8e:	4b26      	ldr	r3, [pc, #152]	@ (800ab28 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xf4>)
 800aa90:	78db      	ldrb	r3, [r3, #3]
 800aa92:	461a      	mov	r2, r3
 800aa94:	88bb      	ldrh	r3, [r7, #4]
 800aa96:	4413      	add	r3, r2
 800aa98:	80bb      	strh	r3, [r7, #4]

    if(cause & 0x0400){
 800aa9a:	88bb      	ldrh	r3, [r7, #4]
 800aa9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d005      	beq.n	800aab0 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x7c>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_WRBUF_BELOW_WM ", cause);
 800aaa4:	88bb      	ldrh	r3, [r7, #4]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	4920      	ldr	r1, [pc, #128]	@ (800ab2c <SPI_QCA7000_Read_REG_INTR_CAUSE+0xf8>)
 800aaaa:	4821      	ldr	r0, [pc, #132]	@ (800ab30 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xfc>)
 800aaac:	f001 feb0 	bl	800c810 <siprintf>
//    	Serial_Print();
    }
    if(cause & 0x0040){
 800aab0:	88bb      	ldrh	r3, [r7, #4]
 800aab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d007      	beq.n	800aaca <SPI_QCA7000_Read_REG_INTR_CAUSE+0x96>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_CPU_ON ", cause);
 800aaba:	88bb      	ldrh	r3, [r7, #4]
 800aabc:	461a      	mov	r2, r3
 800aabe:	491d      	ldr	r1, [pc, #116]	@ (800ab34 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x100>)
 800aac0:	481b      	ldr	r0, [pc, #108]	@ (800ab30 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xfc>)
 800aac2:	f001 fea5 	bl	800c810 <siprintf>
    	SPI_QCA7000_Init_Setup();
 800aac6:	f000 f8ab 	bl	800ac20 <SPI_QCA7000_Init_Setup>
//    	Serial_Print();
    }
    if(cause & 0x0008){
 800aaca:	88bb      	ldrh	r3, [r7, #4]
 800aacc:	f003 0308 	and.w	r3, r3, #8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d005      	beq.n	800aae0 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xac>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_ADDR_ERR ", cause);
 800aad4:	88bb      	ldrh	r3, [r7, #4]
 800aad6:	461a      	mov	r2, r3
 800aad8:	4917      	ldr	r1, [pc, #92]	@ (800ab38 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x104>)
 800aada:	4815      	ldr	r0, [pc, #84]	@ (800ab30 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xfc>)
 800aadc:	f001 fe98 	bl	800c810 <siprintf>
//    	Serial_Print();
    }
    if(cause & 0x0004){
 800aae0:	88bb      	ldrh	r3, [r7, #4]
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d007      	beq.n	800aafa <SPI_QCA7000_Read_REG_INTR_CAUSE+0xc6>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_WRBUF_ERR ", cause);
 800aaea:	88bb      	ldrh	r3, [r7, #4]
 800aaec:	461a      	mov	r2, r3
 800aaee:	4913      	ldr	r1, [pc, #76]	@ (800ab3c <SPI_QCA7000_Read_REG_INTR_CAUSE+0x108>)
 800aaf0:	480f      	ldr	r0, [pc, #60]	@ (800ab30 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xfc>)
 800aaf2:	f001 fe8d 	bl	800c810 <siprintf>
    	SPI_QCA7000_Write_Config();
 800aaf6:	f000 f859 	bl	800abac <SPI_QCA7000_Write_Config>
//    	Serial_Print();
    }
    if(cause & 0x0002){
 800aafa:	88bb      	ldrh	r3, [r7, #4]
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xd4>
//    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_RDBUF_ERR ", cause);
    	SPI_QCA7000_Write_Config();
 800ab04:	f000 f852 	bl	800abac <SPI_QCA7000_Write_Config>
//    	Serial_Print();
    }
    if(cause & 0x0001){
 800ab08:	88bb      	ldrh	r3, [r7, #4]
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xe2>
//    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_PKT_AVLBL ", cause);
//    	Serial_Print();
    	SPI_QCA7000_Read_Eth_Frame();
 800ab12:	f000 f9bf 	bl	800ae94 <SPI_QCA7000_Read_Eth_Frame>
    }

    return cause;
 800ab16:	88bb      	ldrh	r3, [r7, #4]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20000f3c 	.word	0x20000f3c
 800ab24:	20001fa4 	.word	0x20001fa4
 800ab28:	20001770 	.word	0x20001770
 800ab2c:	0800db24 	.word	0x0800db24
 800ab30:	20000708 	.word	0x20000708
 800ab34:	0800db54 	.word	0x0800db54
 800ab38:	0800db7c 	.word	0x0800db7c
 800ab3c:	0800dba4 	.word	0x0800dba4

0800ab40 <SPI_QCA7000_Confirm_REG_INTR_CAUSE>:

void SPI_QCA7000_Confirm_REG_INTR_CAUSE(uint16_t cause){
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	80fb      	strh	r3, [r7, #6]
    uint8_t i;
    i=0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]
    spi_tx_buffer[i++] = 0x4C;
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	73fa      	strb	r2, [r7, #15]
 800ab54:	461a      	mov	r2, r3
 800ab56:	4b13      	ldr	r3, [pc, #76]	@ (800aba4 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 800ab58:	214c      	movs	r1, #76	@ 0x4c
 800ab5a:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	73fa      	strb	r2, [r7, #15]
 800ab62:	461a      	mov	r2, r3
 800ab64:	4b0f      	ldr	r3, [pc, #60]	@ (800aba4 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 800ab66:	2100      	movs	r1, #0
 800ab68:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = cause >> 8;
 800ab6a:	88fb      	ldrh	r3, [r7, #6]
 800ab6c:	0a1b      	lsrs	r3, r3, #8
 800ab6e:	b299      	uxth	r1, r3
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	73fa      	strb	r2, [r7, #15]
 800ab76:	461a      	mov	r2, r3
 800ab78:	b2c9      	uxtb	r1, r1
 800ab7a:	4b0a      	ldr	r3, [pc, #40]	@ (800aba4 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 800ab7c:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = (uint8_t)cause;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
 800ab80:	1c5a      	adds	r2, r3, #1
 800ab82:	73fa      	strb	r2, [r7, #15]
 800ab84:	461a      	mov	r2, r3
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	b2d9      	uxtb	r1, r3
 800ab8a:	4b06      	ldr	r3, [pc, #24]	@ (800aba4 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 800ab8c:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x68>)
 800ab94:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800ab96:	f7f5 feff 	bl	8000998 <SPI_Transmit_Receive>
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000f3c 	.word	0x20000f3c
 800aba8:	20001fa4 	.word	0x20001fa4

0800abac <SPI_QCA7000_Write_Config>:

    sprintf(serial_output_buffer, "Reset Configuration ");
    Serial_Print();
}

void SPI_QCA7000_Write_Config(void){
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
    uint8_t i;
    i = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0x44;
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	71fa      	strb	r2, [r7, #7]
 800abbc:	461a      	mov	r2, r3
 800abbe:	4b14      	ldr	r3, [pc, #80]	@ (800ac10 <SPI_QCA7000_Write_Config+0x64>)
 800abc0:	2144      	movs	r1, #68	@ 0x44
 800abc2:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	71fa      	strb	r2, [r7, #7]
 800abca:	461a      	mov	r2, r3
 800abcc:	4b10      	ldr	r3, [pc, #64]	@ (800ac10 <SPI_QCA7000_Write_Config+0x64>)
 800abce:	2100      	movs	r1, #0
 800abd0:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	71fa      	strb	r2, [r7, #7]
 800abd8:	461a      	mov	r2, r3
 800abda:	4b0d      	ldr	r3, [pc, #52]	@ (800ac10 <SPI_QCA7000_Write_Config+0x64>)
 800abdc:	2100      	movs	r1, #0
 800abde:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	71fa      	strb	r2, [r7, #7]
 800abe6:	461a      	mov	r2, r3
 800abe8:	4b09      	ldr	r3, [pc, #36]	@ (800ac10 <SPI_QCA7000_Write_Config+0x64>)
 800abea:	2100      	movs	r1, #0
 800abec:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	4b08      	ldr	r3, [pc, #32]	@ (800ac14 <SPI_QCA7000_Write_Config+0x68>)
 800abf4:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800abf6:	f7f5 fecf 	bl	8000998 <SPI_Transmit_Receive>

    sprintf(serial_output_buffer, "Set Configuration ");
 800abfa:	4907      	ldr	r1, [pc, #28]	@ (800ac18 <SPI_QCA7000_Write_Config+0x6c>)
 800abfc:	4807      	ldr	r0, [pc, #28]	@ (800ac1c <SPI_QCA7000_Write_Config+0x70>)
 800abfe:	f001 fe07 	bl	800c810 <siprintf>
    Serial_Print();
 800ac02:	f7f5 fea9 	bl	8000958 <Serial_Print>
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000f3c 	.word	0x20000f3c
 800ac14:	20001fa4 	.word	0x20001fa4
 800ac18:	0800dbe8 	.word	0x0800dbe8
 800ac1c:	20000708 	.word	0x20000708

0800ac20 <SPI_QCA7000_Init_Setup>:

void SPI_QCA7000_Init_Setup(void){
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
	uint16_t sig;
	sig = SPI_QCA7000_Read_Signature();
 800ac26:	f7ff fda9 	bl	800a77c <SPI_QCA7000_Read_Signature>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	80fb      	strh	r3, [r7, #6]
	sig = 0x0000;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	80fb      	strh	r3, [r7, #6]
	sig = SPI_QCA7000_Read_Signature();
 800ac32:	f7ff fda3 	bl	800a77c <SPI_QCA7000_Read_Signature>
 800ac36:	4603      	mov	r3, r0
 800ac38:	80fb      	strh	r3, [r7, #6]
	if(sig == 0xAA55) SPI_QCA7000_Enable_REG_INTR_ENABLE();
 800ac3a:	88fb      	ldrh	r3, [r7, #6]
 800ac3c:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d101      	bne.n	800ac48 <SPI_QCA7000_Init_Setup+0x28>
 800ac44:	f7ff fec6 	bl	800a9d4 <SPI_QCA7000_Enable_REG_INTR_ENABLE>
}
 800ac48:	bf00      	nop
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <SPI_QCA7000_Check_Rx_Data>:

void SPI_QCA7000_Check_Rx_Data(uint16_t available_bytes){
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	80fb      	strh	r3, [r7, #6]
	 uint16_t  spi_len, eth_len;
	 uint8_t *p;
	 uint8_t  blDone = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	74fb      	strb	r3, [r7, #19]
//	 uint8_t counterOfEthFramesInSpiFrame;
//	 counterOfEthFramesInSpiFrame = 0;
	 p = spi_rx_buffer;
 800ac5e:	4b5a      	ldr	r3, [pc, #360]	@ (800adc8 <SPI_QCA7000_Check_Rx_Data+0x178>)
 800ac60:	617b      	str	r3, [r7, #20]

	 while (!blDone) {  /* The SPI receive buffer may contain multiple Ethernet frames. Run through all. */
 800ac62:	e0a8      	b.n	800adb6 <SPI_QCA7000_Check_Rx_Data+0x166>
	         2 byte reserved 00 00
	         payload
	         2 byte End of frame, 55 55 */
	       /* The higher 2 bytes of the len are assumed to be 0. */
	       /* The lower two bytes of the "outer" len, big endian: */
	       spi_len = p[2]; spi_len<<=8; spi_len+=p[3];
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	3302      	adds	r3, #2
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	823b      	strh	r3, [r7, #16]
 800ac6c:	8a3b      	ldrh	r3, [r7, #16]
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	823b      	strh	r3, [r7, #16]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	3303      	adds	r3, #3
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	8a3b      	ldrh	r3, [r7, #16]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	823b      	strh	r3, [r7, #16]
	       /* The "inner" len, little endian. */
	       eth_len = p[9]; eth_len<<=8; eth_len+=p[8];
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	3309      	adds	r3, #9
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	81fb      	strh	r3, [r7, #14]
 800ac88:	89fb      	ldrh	r3, [r7, #14]
 800ac8a:	021b      	lsls	r3, r3, #8
 800ac8c:	81fb      	strh	r3, [r7, #14]
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	3308      	adds	r3, #8
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	89fb      	ldrh	r3, [r7, #14]
 800ac98:	4413      	add	r3, r2
 800ac9a:	81fb      	strh	r3, [r7, #14]
	       if ((p[4]=0xAA) && (p[5]=0xAA) && (p[6]=0xAA) && (p[7]=0xAA)
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	22aa      	movs	r2, #170	@ 0xaa
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	3305      	adds	r3, #5
 800aca8:	22aa      	movs	r2, #170	@ 0xaa
 800acaa:	701a      	strb	r2, [r3, #0]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	3306      	adds	r3, #6
 800acb0:	22aa      	movs	r2, #170	@ 0xaa
 800acb2:	701a      	strb	r2, [r3, #0]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	3307      	adds	r3, #7
 800acb8:	22aa      	movs	r2, #170	@ 0xaa
 800acba:	701a      	strb	r2, [r3, #0]
	             && (eth_len+10 == spi_len)) {
 800acbc:	89fb      	ldrh	r3, [r7, #14]
 800acbe:	f103 020a 	add.w	r2, r3, #10
 800acc2:	8a3b      	ldrh	r3, [r7, #16]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d174      	bne.n	800adb2 <SPI_QCA7000_Check_Rx_Data+0x162>
	           //counterOfEthFramesInSpiFrame++;
	           /* The start of frame and the two length informations are plausible. Copy the payload to the eth receive buffer. */
	    	   eth_rx_size = eth_len;
 800acc8:	4a40      	ldr	r2, [pc, #256]	@ (800adcc <SPI_QCA7000_Check_Rx_Data+0x17c>)
 800acca:	89fb      	ldrh	r3, [r7, #14]
 800accc:	8013      	strh	r3, [r2, #0]
	           /* but limit the length, to avoid buffer overflow */
//	           if (eth_rx_size > ETH_RECEIVE_BUFFER_SIZE) {
//	               eth_rx_size = ETH_RECEIVE_BUFFER_SIZE;
//	               debugCounter_cutted_myethreceivebufferLen++;
//	           }
	           memcpy(eth_rx_buffer, &p[12], eth_rx_size);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	330c      	adds	r3, #12
 800acd2:	4a3e      	ldr	r2, [pc, #248]	@ (800adcc <SPI_QCA7000_Check_Rx_Data+0x17c>)
 800acd4:	8812      	ldrh	r2, [r2, #0]
 800acd6:	4619      	mov	r1, r3
 800acd8:	483d      	ldr	r0, [pc, #244]	@ (800add0 <SPI_QCA7000_Check_Rx_Data+0x180>)
 800acda:	f001 fe78 	bl	800c9ce <memcpy>
	           /* We received an ethernet package. Determine its type, and dispatch it to the related handler. */
	           uint16_t mtype = HPGP_Get_MTYPE(eth_rx_buffer);
 800acde:	483c      	ldr	r0, [pc, #240]	@ (800add0 <SPI_QCA7000_Check_Rx_Data+0x180>)
 800ace0:	f000 fb08 	bl	800b2f4 <HPGP_Get_MTYPE>
 800ace4:	4603      	mov	r3, r0
 800ace6:	81bb      	strh	r3, [r7, #12]
	           if (mtype == 0x88E1) {
 800ace8:	89bb      	ldrh	r3, [r7, #12]
 800acea:	f648 02e1 	movw	r2, #35041	@ 0x88e1
 800acee:	4293      	cmp	r3, r2
 800acf0:	d107      	bne.n	800ad02 <SPI_QCA7000_Check_Rx_Data+0xb2>
	        	   /* it is a HomePlug message */
                   //Serial.println("Its a HomePlug message.");
                   sprintf(serial_output_buffer, "Its a HomePlug message.");
 800acf2:	4938      	ldr	r1, [pc, #224]	@ (800add4 <SPI_QCA7000_Check_Rx_Data+0x184>)
 800acf4:	4838      	ldr	r0, [pc, #224]	@ (800add8 <SPI_QCA7000_Check_Rx_Data+0x188>)
 800acf6:	f001 fd8b 	bl	800c810 <siprintf>
                   Serial_Print();
 800acfa:	f7f5 fe2d 	bl	8000958 <Serial_Print>
                   //evaluateReceivedHomeplugPacket();
//                   HPGP_Evaluate_HomePlug_Packet();
         		  PEF_Evaluate_Exchange_Data();
 800acfe:	f001 fbbf 	bl	800c480 <PEF_Evaluate_Exchange_Data>
//	           if(eth_rx_buffer[15] == 0x64 && eth_rx_buffer[16] == 0x60){
//	        	   HPGP_EVSE_Respond_SLAC_PARM_CNF();
//	        	   SPI_QCA7000_Send_Eth_Frame();
//	           }
	           /*-------------------------*/
	           available_bytes = available_bytes - spi_len - 4;
 800ad02:	88fa      	ldrh	r2, [r7, #6]
 800ad04:	8a3b      	ldrh	r3, [r7, #16]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	3b04      	subs	r3, #4
 800ad0c:	80fb      	strh	r3, [r7, #6]
	           p += spi_len+4;
 800ad0e:	8a3b      	ldrh	r3, [r7, #16]
 800ad10:	3304      	adds	r3, #4
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	4413      	add	r3, r2
 800ad16:	617b      	str	r3, [r7, #20]
	           if(available_bytes == 0){
 800ad18:	88fb      	ldrh	r3, [r7, #6]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d106      	bne.n	800ad2c <SPI_QCA7000_Check_Rx_Data+0xdc>
                   sprintf(serial_output_buffer, "Only one frame! ");
 800ad1e:	492f      	ldr	r1, [pc, #188]	@ (800addc <SPI_QCA7000_Check_Rx_Data+0x18c>)
 800ad20:	482d      	ldr	r0, [pc, #180]	@ (800add8 <SPI_QCA7000_Check_Rx_Data+0x188>)
 800ad22:	f001 fd75 	bl	800c810 <siprintf>
                   Serial_Print();
 800ad26:	f7f5 fe17 	bl	8000958 <Serial_Print>
 800ad2a:	e03f      	b.n	800adac <SPI_QCA7000_Check_Rx_Data+0x15c>
	           }
	           else if(available_bytes != 0){
 800ad2c:	88fb      	ldrh	r3, [r7, #6]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d03c      	beq.n	800adac <SPI_QCA7000_Check_Rx_Data+0x15c>
	        	   spi_len = p[2]; spi_len<<=8; spi_len+=p[3];
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	3302      	adds	r3, #2
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	823b      	strh	r3, [r7, #16]
 800ad3a:	8a3b      	ldrh	r3, [r7, #16]
 800ad3c:	021b      	lsls	r3, r3, #8
 800ad3e:	823b      	strh	r3, [r7, #16]
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	3303      	adds	r3, #3
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	8a3b      	ldrh	r3, [r7, #16]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	823b      	strh	r3, [r7, #16]
	        	   eth_len = p[9]; eth_len<<=8; eth_len+=p[8];
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	3309      	adds	r3, #9
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	81fb      	strh	r3, [r7, #14]
 800ad56:	89fb      	ldrh	r3, [r7, #14]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	81fb      	strh	r3, [r7, #14]
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	461a      	mov	r2, r3
 800ad64:	89fb      	ldrh	r3, [r7, #14]
 800ad66:	4413      	add	r3, r2
 800ad68:	81fb      	strh	r3, [r7, #14]
	        	   if ((p[4]=0xAA) && (p[5]=0xAA) && (p[6]=0xAA) && (p[7]=0xAA)
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	22aa      	movs	r2, #170	@ 0xaa
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	3305      	adds	r3, #5
 800ad76:	22aa      	movs	r2, #170	@ 0xaa
 800ad78:	701a      	strb	r2, [r3, #0]
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	3306      	adds	r3, #6
 800ad7e:	22aa      	movs	r2, #170	@ 0xaa
 800ad80:	701a      	strb	r2, [r3, #0]
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	3307      	adds	r3, #7
 800ad86:	22aa      	movs	r2, #170	@ 0xaa
 800ad88:	701a      	strb	r2, [r3, #0]
	        	   	             && (eth_len+10 == spi_len)) {
 800ad8a:	89fb      	ldrh	r3, [r7, #14]
 800ad8c:	f103 020a 	add.w	r2, r3, #10
 800ad90:	8a3b      	ldrh	r3, [r7, #16]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d102      	bne.n	800ad9c <SPI_QCA7000_Check_Rx_Data+0x14c>
	        		   eth_2nd_rx_size = eth_len;
 800ad96:	4a12      	ldr	r2, [pc, #72]	@ (800ade0 <SPI_QCA7000_Check_Rx_Data+0x190>)
 800ad98:	89fb      	ldrh	r3, [r7, #14]
 800ad9a:	8013      	strh	r3, [r2, #0]
	           	   }
	        	   memcpy(eth_2nd_rx_buffer, &p[12], eth_2nd_rx_size);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	330c      	adds	r3, #12
 800ada0:	4a0f      	ldr	r2, [pc, #60]	@ (800ade0 <SPI_QCA7000_Check_Rx_Data+0x190>)
 800ada2:	8812      	ldrh	r2, [r2, #0]
 800ada4:	4619      	mov	r1, r3
 800ada6:	480f      	ldr	r0, [pc, #60]	@ (800ade4 <SPI_QCA7000_Check_Rx_Data+0x194>)
 800ada8:	f001 fe11 	bl	800c9ce <memcpy>
//	             Serial.print(String(p[9], HEX) + " ");
//	             */
//	           } else {
//	             blDone=1;
//	           }
	           blDone=1;
 800adac:	2301      	movs	r3, #1
 800adae:	74fb      	strb	r3, [r7, #19]
	             && (eth_len+10 == spi_len)) {
 800adb0:	e001      	b.n	800adb6 <SPI_QCA7000_Check_Rx_Data+0x166>
	     }
	     else {
	         /* no valid header -> end */
	         blDone=1;
 800adb2:	2301      	movs	r3, #1
 800adb4:	74fb      	strb	r3, [r7, #19]
	 while (!blDone) {  /* The SPI receive buffer may contain multiple Ethernet frames. Run through all. */
 800adb6:	7cfb      	ldrb	r3, [r7, #19]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f43f af53 	beq.w	800ac64 <SPI_QCA7000_Check_Rx_Data+0x14>
	     }
	 }
}
 800adbe:	bf00      	nop
 800adc0:	bf00      	nop
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20001770 	.word	0x20001770
 800adcc:	2000219e 	.word	0x2000219e
 800add0:	200020a4 	.word	0x200020a4
 800add4:	0800dbfc 	.word	0x0800dbfc
 800add8:	20000708 	.word	0x20000708
 800addc:	0800dc14 	.word	0x0800dc14
 800ade0:	2000229a 	.word	0x2000229a
 800ade4:	200021a0 	.word	0x200021a0

0800ade8 <SPI_QCA7000_Send_Eth_Frame>:

void SPI_QCA7000_Send_Eth_Frame(void){
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
    SPI_QCA7000_Read_WRBUF_SPC_AVA();
 800adec:	f7ff fd10 	bl	800a810 <SPI_QCA7000_Read_WRBUF_SPC_AVA>
    SPI_QCA7000_Write_BFR_SIZE(eth_tx_size + 10);
 800adf0:	4b23      	ldr	r3, [pc, #140]	@ (800ae80 <SPI_QCA7000_Send_Eth_Frame+0x98>)
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	330a      	adds	r3, #10
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff fd85 	bl	800a908 <SPI_QCA7000_Write_BFR_SIZE>

    spi_tx_buffer[0] = 0x00;
 800adfe:	4b21      	ldr	r3, [pc, #132]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = 0x00;
 800ae04:	4b1f      	ldr	r3, [pc, #124]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2] = 0xAA;
 800ae0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae0c:	22aa      	movs	r2, #170	@ 0xaa
 800ae0e:	709a      	strb	r2, [r3, #2]
    spi_tx_buffer[3] = 0xAA;
 800ae10:	4b1c      	ldr	r3, [pc, #112]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae12:	22aa      	movs	r2, #170	@ 0xaa
 800ae14:	70da      	strb	r2, [r3, #3]
    spi_tx_buffer[4] = 0xAA;
 800ae16:	4b1b      	ldr	r3, [pc, #108]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae18:	22aa      	movs	r2, #170	@ 0xaa
 800ae1a:	711a      	strb	r2, [r3, #4]
    spi_tx_buffer[5] = 0xAA;
 800ae1c:	4b19      	ldr	r3, [pc, #100]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae1e:	22aa      	movs	r2, #170	@ 0xaa
 800ae20:	715a      	strb	r2, [r3, #5]
    spi_tx_buffer[6] = (uint8_t)eth_tx_size;
 800ae22:	4b17      	ldr	r3, [pc, #92]	@ (800ae80 <SPI_QCA7000_Send_Eth_Frame+0x98>)
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	4b16      	ldr	r3, [pc, #88]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae2a:	719a      	strb	r2, [r3, #6]
    spi_tx_buffer[7] = eth_tx_size >> 8;
 800ae2c:	4b14      	ldr	r3, [pc, #80]	@ (800ae80 <SPI_QCA7000_Send_Eth_Frame+0x98>)
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	0a1b      	lsrs	r3, r3, #8
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae38:	71da      	strb	r2, [r3, #7]
    spi_tx_buffer[8] = 0x00;
 800ae3a:	4b12      	ldr	r3, [pc, #72]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	721a      	strb	r2, [r3, #8]
    spi_tx_buffer[9] = 0x00;
 800ae40:	4b10      	ldr	r3, [pc, #64]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	725a      	strb	r2, [r3, #9]
    memcpy(&spi_tx_buffer[10], eth_tx_buffer, eth_tx_size);
 800ae46:	4b0e      	ldr	r3, [pc, #56]	@ (800ae80 <SPI_QCA7000_Send_Eth_Frame+0x98>)
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	490e      	ldr	r1, [pc, #56]	@ (800ae88 <SPI_QCA7000_Send_Eth_Frame+0xa0>)
 800ae4e:	480f      	ldr	r0, [pc, #60]	@ (800ae8c <SPI_QCA7000_Send_Eth_Frame+0xa4>)
 800ae50:	f001 fdbd 	bl	800c9ce <memcpy>
    spi_tx_buffer[10 + eth_tx_size] = 0x55;
 800ae54:	4b0a      	ldr	r3, [pc, #40]	@ (800ae80 <SPI_QCA7000_Send_Eth_Frame+0x98>)
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	330a      	adds	r3, #10
 800ae5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae5c:	2155      	movs	r1, #85	@ 0x55
 800ae5e:	54d1      	strb	r1, [r2, r3]
    spi_tx_buffer[11 + eth_tx_size] = 0x55;
 800ae60:	4b07      	ldr	r3, [pc, #28]	@ (800ae80 <SPI_QCA7000_Send_Eth_Frame+0x98>)
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	330b      	adds	r3, #11
 800ae66:	4a07      	ldr	r2, [pc, #28]	@ (800ae84 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 800ae68:	2155      	movs	r1, #85	@ 0x55
 800ae6a:	54d1      	strb	r1, [r2, r3]
    spi_data_size = 12 + eth_tx_size;
 800ae6c:	4b04      	ldr	r3, [pc, #16]	@ (800ae80 <SPI_QCA7000_Send_Eth_Frame+0x98>)
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	330c      	adds	r3, #12
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	4b06      	ldr	r3, [pc, #24]	@ (800ae90 <SPI_QCA7000_Send_Eth_Frame+0xa8>)
 800ae76:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800ae78:	f7f5 fd8e 	bl	8000998 <SPI_Transmit_Receive>
//    uint8_t i;
//    for(i=0; i<spi_data_size; i++){
//    	sprintf(serial_output_buffer + strlen(serial_output_buffer), " %X ", spi_tx_buffer[i]);
//    }
//    Serial_Print();
}
 800ae7c:	bf00      	nop
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	200020a2 	.word	0x200020a2
 800ae84:	20000f3c 	.word	0x20000f3c
 800ae88:	20001fa8 	.word	0x20001fa8
 800ae8c:	20000f46 	.word	0x20000f46
 800ae90:	20001fa4 	.word	0x20001fa4

0800ae94 <SPI_QCA7000_Read_Eth_Frame>:

void SPI_QCA7000_Read_Eth_Frame(void){
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
    uint8_t i;
    i = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	71fb      	strb	r3, [r7, #7]
    uint16_t ava_size;
    ava_size = SPI_QCA7000_Read_RDBUF_SPC_AVA();
 800ae9e:	f7ff fcf5 	bl	800a88c <SPI_QCA7000_Read_RDBUF_SPC_AVA>
 800aea2:	4603      	mov	r3, r0
 800aea4:	80bb      	strh	r3, [r7, #4]
    if(ava_size == 0){
 800aea6:	88bb      	ldrh	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d03e      	beq.n	800af2a <SPI_QCA7000_Read_Eth_Frame+0x96>
    	return;
    }
    SPI_QCA7000_Write_BFR_SIZE(ava_size);
 800aeac:	88bb      	ldrh	r3, [r7, #4]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff fd2a 	bl	800a908 <SPI_QCA7000_Write_BFR_SIZE>

    spi_tx_buffer[i++] = 0x80;
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	71fa      	strb	r2, [r7, #7]
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b1d      	ldr	r3, [pc, #116]	@ (800af34 <SPI_QCA7000_Read_Eth_Frame+0xa0>)
 800aebe:	2180      	movs	r1, #128	@ 0x80
 800aec0:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	71fa      	strb	r2, [r7, #7]
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b1a      	ldr	r3, [pc, #104]	@ (800af34 <SPI_QCA7000_Read_Eth_Frame+0xa0>)
 800aecc:	2100      	movs	r1, #0
 800aece:	5499      	strb	r1, [r3, r2]

    spi_data_size = ava_size + 2;
 800aed0:	88bb      	ldrh	r3, [r7, #4]
 800aed2:	3302      	adds	r3, #2
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	4b18      	ldr	r3, [pc, #96]	@ (800af38 <SPI_QCA7000_Read_Eth_Frame+0xa4>)
 800aed8:	801a      	strh	r2, [r3, #0]

    SPI_Transmit_Receive();
 800aeda:	f7f5 fd5d 	bl	8000998 <SPI_Transmit_Receive>

    for(i=0; i<ava_size; i++){
 800aede:	2300      	movs	r3, #0
 800aee0:	71fb      	strb	r3, [r7, #7]
 800aee2:	e016      	b.n	800af12 <SPI_QCA7000_Read_Eth_Frame+0x7e>
        spi_rx_buffer[i] = spi_rx_buffer[i+2];
 800aee4:	79fb      	ldrb	r3, [r7, #7]
 800aee6:	1c9a      	adds	r2, r3, #2
 800aee8:	79fb      	ldrb	r3, [r7, #7]
 800aeea:	4914      	ldr	r1, [pc, #80]	@ (800af3c <SPI_QCA7000_Read_Eth_Frame+0xa8>)
 800aeec:	5c89      	ldrb	r1, [r1, r2]
 800aeee:	4a13      	ldr	r2, [pc, #76]	@ (800af3c <SPI_QCA7000_Read_Eth_Frame+0xa8>)
 800aef0:	54d1      	strb	r1, [r2, r3]
   		sprintf(serial_output_buffer + strlen(serial_output_buffer), " %X ", spi_rx_buffer[i]);
 800aef2:	4813      	ldr	r0, [pc, #76]	@ (800af40 <SPI_QCA7000_Read_Eth_Frame+0xac>)
 800aef4:	f7f5 f994 	bl	8000220 <strlen>
 800aef8:	4603      	mov	r3, r0
 800aefa:	4a11      	ldr	r2, [pc, #68]	@ (800af40 <SPI_QCA7000_Read_Eth_Frame+0xac>)
 800aefc:	1898      	adds	r0, r3, r2
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	4a0e      	ldr	r2, [pc, #56]	@ (800af3c <SPI_QCA7000_Read_Eth_Frame+0xa8>)
 800af02:	5cd3      	ldrb	r3, [r2, r3]
 800af04:	461a      	mov	r2, r3
 800af06:	490f      	ldr	r1, [pc, #60]	@ (800af44 <SPI_QCA7000_Read_Eth_Frame+0xb0>)
 800af08:	f001 fc82 	bl	800c810 <siprintf>
    for(i=0; i<ava_size; i++){
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	3301      	adds	r3, #1
 800af10:	71fb      	strb	r3, [r7, #7]
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	b29b      	uxth	r3, r3
 800af16:	88ba      	ldrh	r2, [r7, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d8e3      	bhi.n	800aee4 <SPI_QCA7000_Read_Eth_Frame+0x50>
    }
	Serial_Print();
 800af1c:	f7f5 fd1c 	bl	8000958 <Serial_Print>

    SPI_QCA7000_Check_Rx_Data(ava_size);
 800af20:	88bb      	ldrh	r3, [r7, #4]
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff fe94 	bl	800ac50 <SPI_QCA7000_Check_Rx_Data>
 800af28:	e000      	b.n	800af2c <SPI_QCA7000_Read_Eth_Frame+0x98>
    	return;
 800af2a:	bf00      	nop
//	sprintf(serial_output_buffer, "abc: %X %X ", spi_rx_buffer[2], spi_rx_buffer[3] );
//	Serial_Print();
}
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20000f3c 	.word	0x20000f3c
 800af38:	20001fa4 	.word	0x20001fa4
 800af3c:	20001770 	.word	0x20001770
 800af40:	20000708 	.word	0x20000708
 800af44:	0800dc28 	.word	0x0800dc28

0800af48 <SPI_QCA7000_Handling_Intr>:

void SPI_QCA7000_Handling_Intr(void){
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
    SPI_QCA7000_Disable_REG_INTR_DISABLE();
 800af4e:	f7ff fd11 	bl	800a974 <SPI_QCA7000_Disable_REG_INTR_DISABLE>
    uint16_t cause;
    cause = SPI_QCA7000_Read_REG_INTR_CAUSE();
 800af52:	f7ff fd6f 	bl	800aa34 <SPI_QCA7000_Read_REG_INTR_CAUSE>
 800af56:	4603      	mov	r3, r0
 800af58:	80fb      	strh	r3, [r7, #6]
    SPI_QCA7000_Confirm_REG_INTR_CAUSE(cause);
 800af5a:	88fb      	ldrh	r3, [r7, #6]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7ff fdef 	bl	800ab40 <SPI_QCA7000_Confirm_REG_INTR_CAUSE>
    SPI_QCA7000_Enable_REG_INTR_ENABLE();
 800af62:	f7ff fd37 	bl	800a9d4 <SPI_QCA7000_Enable_REG_INTR_ENABLE>
}
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <HMI_Compose_Pre_Charge_Parm>:
//  HAL_UART_Transmit(&huart2, &END_BYTE, 1, 10);
//}

hmi_data myHMI;

void HMI_Compose_Pre_Charge_Parm(uint8_t type, uint16_t value){
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	460a      	mov	r2, r1
 800af7a:	71fb      	strb	r3, [r7, #7]
 800af7c:	4613      	mov	r3, r2
 800af7e:	80bb      	strh	r3, [r7, #4]
	switch(type){
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	3b30      	subs	r3, #48	@ 0x30
 800af84:	2b05      	cmp	r3, #5
 800af86:	d83d      	bhi.n	800b004 <HMI_Compose_Pre_Charge_Parm+0x94>
 800af88:	a201      	add	r2, pc, #4	@ (adr r2, 800af90 <HMI_Compose_Pre_Charge_Parm+0x20>)
 800af8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8e:	bf00      	nop
 800af90:	0800afa9 	.word	0x0800afa9
 800af94:	0800afc3 	.word	0x0800afc3
 800af98:	0800afd1 	.word	0x0800afd1
 800af9c:	0800afdf 	.word	0x0800afdf
 800afa0:	0800afed 	.word	0x0800afed
 800afa4:	0800affb 	.word	0x0800affb
	case HMI_COMPATIBLE:
		if(value == 0x00AA) sprintf(hmi_buffer,"com.txt=\"Compatible\"");
 800afa8:	88bb      	ldrh	r3, [r7, #4]
 800afaa:	2baa      	cmp	r3, #170	@ 0xaa
 800afac:	d104      	bne.n	800afb8 <HMI_Compose_Pre_Charge_Parm+0x48>
 800afae:	4917      	ldr	r1, [pc, #92]	@ (800b00c <HMI_Compose_Pre_Charge_Parm+0x9c>)
 800afb0:	4817      	ldr	r0, [pc, #92]	@ (800b010 <HMI_Compose_Pre_Charge_Parm+0xa0>)
 800afb2:	f001 fc2d 	bl	800c810 <siprintf>
		else sprintf(hmi_buffer,"com.txt=\"Incompatible\"");
		break;
 800afb6:	e025      	b.n	800b004 <HMI_Compose_Pre_Charge_Parm+0x94>
		else sprintf(hmi_buffer,"com.txt=\"Incompatible\"");
 800afb8:	4916      	ldr	r1, [pc, #88]	@ (800b014 <HMI_Compose_Pre_Charge_Parm+0xa4>)
 800afba:	4815      	ldr	r0, [pc, #84]	@ (800b010 <HMI_Compose_Pre_Charge_Parm+0xa0>)
 800afbc:	f001 fc28 	bl	800c810 <siprintf>
		break;
 800afc0:	e020      	b.n	800b004 <HMI_Compose_Pre_Charge_Parm+0x94>
	case HMI_BATTERY_CAPACITY:
		sprintf(hmi_buffer,"bat.val=%u", value);
 800afc2:	88bb      	ldrh	r3, [r7, #4]
 800afc4:	461a      	mov	r2, r3
 800afc6:	4914      	ldr	r1, [pc, #80]	@ (800b018 <HMI_Compose_Pre_Charge_Parm+0xa8>)
 800afc8:	4811      	ldr	r0, [pc, #68]	@ (800b010 <HMI_Compose_Pre_Charge_Parm+0xa0>)
 800afca:	f001 fc21 	bl	800c810 <siprintf>
		break;
 800afce:	e019      	b.n	800b004 <HMI_Compose_Pre_Charge_Parm+0x94>
	case HMI_CURRENT_BATTERY:
		sprintf(hmi_buffer,"Interface.bat.val=%u", value);
 800afd0:	88bb      	ldrh	r3, [r7, #4]
 800afd2:	461a      	mov	r2, r3
 800afd4:	4911      	ldr	r1, [pc, #68]	@ (800b01c <HMI_Compose_Pre_Charge_Parm+0xac>)
 800afd6:	480e      	ldr	r0, [pc, #56]	@ (800b010 <HMI_Compose_Pre_Charge_Parm+0xa0>)
 800afd8:	f001 fc1a 	bl	800c810 <siprintf>
		break;
 800afdc:	e012      	b.n	800b004 <HMI_Compose_Pre_Charge_Parm+0x94>
	case HMI_BATTERY_VOLTAGE:
		sprintf(hmi_buffer,"vbatt.txt=\"%u V\"", value);
 800afde:	88bb      	ldrh	r3, [r7, #4]
 800afe0:	461a      	mov	r2, r3
 800afe2:	490f      	ldr	r1, [pc, #60]	@ (800b020 <HMI_Compose_Pre_Charge_Parm+0xb0>)
 800afe4:	480a      	ldr	r0, [pc, #40]	@ (800b010 <HMI_Compose_Pre_Charge_Parm+0xa0>)
 800afe6:	f001 fc13 	bl	800c810 <siprintf>
		break;
 800afea:	e00b      	b.n	800b004 <HMI_Compose_Pre_Charge_Parm+0x94>
	case HMI_CHARGING_TIME:
		sprintf(hmi_buffer,"time.txt=\"%u mins\"", value);
 800afec:	88bb      	ldrh	r3, [r7, #4]
 800afee:	461a      	mov	r2, r3
 800aff0:	490c      	ldr	r1, [pc, #48]	@ (800b024 <HMI_Compose_Pre_Charge_Parm+0xb4>)
 800aff2:	4807      	ldr	r0, [pc, #28]	@ (800b010 <HMI_Compose_Pre_Charge_Parm+0xa0>)
 800aff4:	f001 fc0c 	bl	800c810 <siprintf>
		break;
 800aff8:	e004      	b.n	800b004 <HMI_Compose_Pre_Charge_Parm+0x94>
	case HMI_CAR_MODEL:
		sprintf(hmi_buffer,"model.txt=\"Ioniq 5\"");
 800affa:	490b      	ldr	r1, [pc, #44]	@ (800b028 <HMI_Compose_Pre_Charge_Parm+0xb8>)
 800affc:	4804      	ldr	r0, [pc, #16]	@ (800b010 <HMI_Compose_Pre_Charge_Parm+0xa0>)
 800affe:	f001 fc07 	bl	800c810 <siprintf>
		break;
 800b002:	bf00      	nop
	}
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	0800dc30 	.word	0x0800dc30
 800b010:	2000229c 	.word	0x2000229c
 800b014:	0800dc48 	.word	0x0800dc48
 800b018:	0800dc60 	.word	0x0800dc60
 800b01c:	0800dc6c 	.word	0x0800dc6c
 800b020:	0800dc84 	.word	0x0800dc84
 800b024:	0800dc98 	.word	0x0800dc98
 800b028:	0800dcac 	.word	0x0800dcac

0800b02c <HMI_Compose_Realtime_Data>:

void HMI_Compose_Realtime_Data(uint8_t type, uint16_t value){
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	460a      	mov	r2, r1
 800b036:	71fb      	strb	r3, [r7, #7]
 800b038:	4613      	mov	r3, r2
 800b03a:	80bb      	strh	r3, [r7, #4]
	value = value*10;
 800b03c:	88bb      	ldrh	r3, [r7, #4]
 800b03e:	461a      	mov	r2, r3
 800b040:	0092      	lsls	r2, r2, #2
 800b042:	4413      	add	r3, r2
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	80bb      	strh	r3, [r7, #4]
	switch(type){
 800b048:	79fb      	ldrb	r3, [r7, #7]
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d826      	bhi.n	800b09c <HMI_Compose_Realtime_Data+0x70>
 800b04e:	a201      	add	r2, pc, #4	@ (adr r2, 800b054 <HMI_Compose_Realtime_Data+0x28>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b065 	.word	0x0800b065
 800b058:	0800b073 	.word	0x0800b073
 800b05c:	0800b081 	.word	0x0800b081
 800b060:	0800b08f 	.word	0x0800b08f
	case HMI_VOLTAGE:
		sprintf(hmi_buffer,"v.val=%u", value);
 800b064:	88bb      	ldrh	r3, [r7, #4]
 800b066:	461a      	mov	r2, r3
 800b068:	490e      	ldr	r1, [pc, #56]	@ (800b0a4 <HMI_Compose_Realtime_Data+0x78>)
 800b06a:	480f      	ldr	r0, [pc, #60]	@ (800b0a8 <HMI_Compose_Realtime_Data+0x7c>)
 800b06c:	f001 fbd0 	bl	800c810 <siprintf>
		break;
 800b070:	e014      	b.n	800b09c <HMI_Compose_Realtime_Data+0x70>
	case HMI_CURRENT:
		sprintf(hmi_buffer,"i.val=%u", value);
 800b072:	88bb      	ldrh	r3, [r7, #4]
 800b074:	461a      	mov	r2, r3
 800b076:	490d      	ldr	r1, [pc, #52]	@ (800b0ac <HMI_Compose_Realtime_Data+0x80>)
 800b078:	480b      	ldr	r0, [pc, #44]	@ (800b0a8 <HMI_Compose_Realtime_Data+0x7c>)
 800b07a:	f001 fbc9 	bl	800c810 <siprintf>
		break;
 800b07e:	e00d      	b.n	800b09c <HMI_Compose_Realtime_Data+0x70>
	case HMI_TEMP:
		sprintf(hmi_buffer,"t.val=%u", value);
 800b080:	88bb      	ldrh	r3, [r7, #4]
 800b082:	461a      	mov	r2, r3
 800b084:	490a      	ldr	r1, [pc, #40]	@ (800b0b0 <HMI_Compose_Realtime_Data+0x84>)
 800b086:	4808      	ldr	r0, [pc, #32]	@ (800b0a8 <HMI_Compose_Realtime_Data+0x7c>)
 800b088:	f001 fbc2 	bl	800c810 <siprintf>
		break;
 800b08c:	e006      	b.n	800b09c <HMI_Compose_Realtime_Data+0x70>
	case HMI_IREF:
		sprintf(hmi_buffer,"iref.val=%u", value);
 800b08e:	88bb      	ldrh	r3, [r7, #4]
 800b090:	461a      	mov	r2, r3
 800b092:	4908      	ldr	r1, [pc, #32]	@ (800b0b4 <HMI_Compose_Realtime_Data+0x88>)
 800b094:	4804      	ldr	r0, [pc, #16]	@ (800b0a8 <HMI_Compose_Realtime_Data+0x7c>)
 800b096:	f001 fbbb 	bl	800c810 <siprintf>
		break;
 800b09a:	bf00      	nop
	}
}
 800b09c:	bf00      	nop
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	0800dcc0 	.word	0x0800dcc0
 800b0a8:	2000229c 	.word	0x2000229c
 800b0ac:	0800dccc 	.word	0x0800dccc
 800b0b0:	0800dcd8 	.word	0x0800dcd8
 800b0b4:	0800dce4 	.word	0x0800dce4

0800b0b8 <HMI_Compose_Status>:

void HMI_Compose_Status(uint8_t status){
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	71fb      	strb	r3, [r7, #7]
	switch(status){
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	3b10      	subs	r3, #16
 800b0c6:	2b15      	cmp	r3, #21
 800b0c8:	d84c      	bhi.n	800b164 <HMI_Compose_Status+0xac>
 800b0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d0 <HMI_Compose_Status+0x18>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b133 	.word	0x0800b133
 800b0d4:	0800b13d 	.word	0x0800b13d
 800b0d8:	0800b147 	.word	0x0800b147
 800b0dc:	0800b129 	.word	0x0800b129
 800b0e0:	0800b165 	.word	0x0800b165
 800b0e4:	0800b165 	.word	0x0800b165
 800b0e8:	0800b165 	.word	0x0800b165
 800b0ec:	0800b165 	.word	0x0800b165
 800b0f0:	0800b165 	.word	0x0800b165
 800b0f4:	0800b165 	.word	0x0800b165
 800b0f8:	0800b165 	.word	0x0800b165
 800b0fc:	0800b165 	.word	0x0800b165
 800b100:	0800b165 	.word	0x0800b165
 800b104:	0800b165 	.word	0x0800b165
 800b108:	0800b165 	.word	0x0800b165
 800b10c:	0800b165 	.word	0x0800b165
 800b110:	0800b151 	.word	0x0800b151
 800b114:	0800b165 	.word	0x0800b165
 800b118:	0800b165 	.word	0x0800b165
 800b11c:	0800b165 	.word	0x0800b165
 800b120:	0800b165 	.word	0x0800b165
 800b124:	0800b15b 	.word	0x0800b15b
	case HMI_PAGE1:
		sprintf(hmi_buffer,"page 1");
 800b128:	4910      	ldr	r1, [pc, #64]	@ (800b16c <HMI_Compose_Status+0xb4>)
 800b12a:	4811      	ldr	r0, [pc, #68]	@ (800b170 <HMI_Compose_Status+0xb8>)
 800b12c:	f001 fb70 	bl	800c810 <siprintf>
		break;
 800b130:	e018      	b.n	800b164 <HMI_Compose_Status+0xac>
	case HMI_STOP:
		sprintf(hmi_buffer,"bug.val=0");
 800b132:	4910      	ldr	r1, [pc, #64]	@ (800b174 <HMI_Compose_Status+0xbc>)
 800b134:	480e      	ldr	r0, [pc, #56]	@ (800b170 <HMI_Compose_Status+0xb8>)
 800b136:	f001 fb6b 	bl	800c810 <siprintf>
		break;
 800b13a:	e013      	b.n	800b164 <HMI_Compose_Status+0xac>
	case HMI_CONNECT:
		sprintf(hmi_buffer,"state.txt=\"Connected\"");
 800b13c:	490e      	ldr	r1, [pc, #56]	@ (800b178 <HMI_Compose_Status+0xc0>)
 800b13e:	480c      	ldr	r0, [pc, #48]	@ (800b170 <HMI_Compose_Status+0xb8>)
 800b140:	f001 fb66 	bl	800c810 <siprintf>
		break;
 800b144:	e00e      	b.n	800b164 <HMI_Compose_Status+0xac>
	case HMI_READY:
		sprintf(hmi_buffer,"state.txt=\"Ready\"");
 800b146:	490d      	ldr	r1, [pc, #52]	@ (800b17c <HMI_Compose_Status+0xc4>)
 800b148:	4809      	ldr	r0, [pc, #36]	@ (800b170 <HMI_Compose_Status+0xb8>)
 800b14a:	f001 fb61 	bl	800c810 <siprintf>
		break;
 800b14e:	e009      	b.n	800b164 <HMI_Compose_Status+0xac>
	case HMI_WARNING_1:
		sprintf(hmi_buffer,"bug.val=1");
 800b150:	490b      	ldr	r1, [pc, #44]	@ (800b180 <HMI_Compose_Status+0xc8>)
 800b152:	4807      	ldr	r0, [pc, #28]	@ (800b170 <HMI_Compose_Status+0xb8>)
 800b154:	f001 fb5c 	bl	800c810 <siprintf>
		break;
 800b158:	e004      	b.n	800b164 <HMI_Compose_Status+0xac>
	case HMI_ERROR_1:
		sprintf(hmi_buffer,"bug.val=2");
 800b15a:	490a      	ldr	r1, [pc, #40]	@ (800b184 <HMI_Compose_Status+0xcc>)
 800b15c:	4804      	ldr	r0, [pc, #16]	@ (800b170 <HMI_Compose_Status+0xb8>)
 800b15e:	f001 fb57 	bl	800c810 <siprintf>
		break;
 800b162:	bf00      	nop
	}
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	0800dcf0 	.word	0x0800dcf0
 800b170:	2000229c 	.word	0x2000229c
 800b174:	0800dcf8 	.word	0x0800dcf8
 800b178:	0800dd04 	.word	0x0800dd04
 800b17c:	0800dd1c 	.word	0x0800dd1c
 800b180:	0800dd30 	.word	0x0800dd30
 800b184:	0800dd3c 	.word	0x0800dd3c

0800b188 <HMI_Evaluate_Setting_Data>:

void HMI_Evaluate_Setting_Data(uint8_t str[8])
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
	myHMI.cable = str[0];
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	4b4c      	ldr	r3, [pc, #304]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b196:	701a      	strb	r2, [r3, #0]
	myHMI.mode = str[1];
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	785a      	ldrb	r2, [r3, #1]
 800b19c:	4b4a      	ldr	r3, [pc, #296]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b19e:	705a      	strb	r2, [r3, #1]
	switch(myHMI.mode)
 800b1a0:	4b49      	ldr	r3, [pc, #292]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b1a2:	785b      	ldrb	r3, [r3, #1]
 800b1a4:	3b30      	subs	r3, #48	@ 0x30
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	f200 8088 	bhi.w	800b2bc <HMI_Evaluate_Setting_Data+0x134>
 800b1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b4 <HMI_Evaluate_Setting_Data+0x2c>)
 800b1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b2:	bf00      	nop
 800b1b4:	0800b1c5 	.word	0x0800b1c5
 800b1b8:	0800b1d3 	.word	0x0800b1d3
 800b1bc:	0800b1e1 	.word	0x0800b1e1
 800b1c0:	0800b22b 	.word	0x0800b22b
	{
	case '0':
		myHMI.voltage = 200;
 800b1c4:	4b40      	ldr	r3, [pc, #256]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b1c6:	22c8      	movs	r2, #200	@ 0xc8
 800b1c8:	805a      	strh	r2, [r3, #2]
		myHMI.current = 15;
 800b1ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b1cc:	220f      	movs	r2, #15
 800b1ce:	809a      	strh	r2, [r3, #4]
	break;
 800b1d0:	e074      	b.n	800b2bc <HMI_Evaluate_Setting_Data+0x134>
	case '1':
		myHMI.voltage = 200;
 800b1d2:	4b3d      	ldr	r3, [pc, #244]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b1d4:	22c8      	movs	r2, #200	@ 0xc8
 800b1d6:	805a      	strh	r2, [r3, #2]
		myHMI.current = 15;
 800b1d8:	4b3b      	ldr	r3, [pc, #236]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b1da:	220f      	movs	r2, #15
 800b1dc:	809a      	strh	r2, [r3, #4]
	break;
 800b1de:	e06d      	b.n	800b2bc <HMI_Evaluate_Setting_Data+0x134>
	case '2':
		myHMI.time = (str[2]-48)*100 + (str[3]-48)*10 + (str[4]-48);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3302      	adds	r3, #2
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	3b30      	subs	r3, #48	@ 0x30
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	0092      	lsls	r2, r2, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	0091      	lsls	r1, r2, #2
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4413      	add	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3303      	adds	r3, #3
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	3b30      	subs	r3, #48	@ 0x30
 800b206:	b29b      	uxth	r3, r3
 800b208:	4619      	mov	r1, r3
 800b20a:	0089      	lsls	r1, r1, #2
 800b20c:	440b      	add	r3, r1
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	b29b      	uxth	r3, r3
 800b212:	4413      	add	r3, r2
 800b214:	b29b      	uxth	r3, r3
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	3204      	adds	r2, #4
 800b21a:	7812      	ldrb	r2, [r2, #0]
 800b21c:	4413      	add	r3, r2
 800b21e:	b29b      	uxth	r3, r3
 800b220:	3b30      	subs	r3, #48	@ 0x30
 800b222:	b29a      	uxth	r2, r3
 800b224:	4b28      	ldr	r3, [pc, #160]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b226:	80da      	strh	r2, [r3, #6]
	break;
 800b228:	e048      	b.n	800b2bc <HMI_Evaluate_Setting_Data+0x134>
	case '3':
		myHMI.voltage = (str[2]-48)*100 + (str[3]-48)*10 + (str[4]-48);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3302      	adds	r3, #2
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	3b30      	subs	r3, #48	@ 0x30
 800b232:	b29b      	uxth	r3, r3
 800b234:	461a      	mov	r2, r3
 800b236:	0092      	lsls	r2, r2, #2
 800b238:	4413      	add	r3, r2
 800b23a:	461a      	mov	r2, r3
 800b23c:	0091      	lsls	r1, r2, #2
 800b23e:	461a      	mov	r2, r3
 800b240:	460b      	mov	r3, r1
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	b29a      	uxth	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3303      	adds	r3, #3
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	3b30      	subs	r3, #48	@ 0x30
 800b250:	b29b      	uxth	r3, r3
 800b252:	4619      	mov	r1, r3
 800b254:	0089      	lsls	r1, r1, #2
 800b256:	440b      	add	r3, r1
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4413      	add	r3, r2
 800b25e:	b29b      	uxth	r3, r3
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	3204      	adds	r2, #4
 800b264:	7812      	ldrb	r2, [r2, #0]
 800b266:	4413      	add	r3, r2
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3b30      	subs	r3, #48	@ 0x30
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	4b16      	ldr	r3, [pc, #88]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b270:	805a      	strh	r2, [r3, #2]
		myHMI.current = (str[5]-48)*100 + (str[6]-48)*10 + (str[7]-48);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3305      	adds	r3, #5
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	3b30      	subs	r3, #48	@ 0x30
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	461a      	mov	r2, r3
 800b27e:	0092      	lsls	r2, r2, #2
 800b280:	4413      	add	r3, r2
 800b282:	461a      	mov	r2, r3
 800b284:	0091      	lsls	r1, r2, #2
 800b286:	461a      	mov	r2, r3
 800b288:	460b      	mov	r3, r1
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3306      	adds	r3, #6
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	3b30      	subs	r3, #48	@ 0x30
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4619      	mov	r1, r3
 800b29c:	0089      	lsls	r1, r1, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	005b      	lsls	r3, r3, #1
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	4413      	add	r3, r2
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	3207      	adds	r2, #7
 800b2ac:	7812      	ldrb	r2, [r2, #0]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b30      	subs	r3, #48	@ 0x30
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	4b04      	ldr	r3, [pc, #16]	@ (800b2c8 <HMI_Evaluate_Setting_Data+0x140>)
 800b2b8:	809a      	strh	r2, [r3, #4]
	break;
 800b2ba:	bf00      	nop
	}
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	200022d0 	.word	0x200022d0

0800b2cc <HPGP_Fill_Address>:
/********** local prototypes *****************************************/
void HPGP_Compose_ATTEN_CHAR_RSP(void);
void HPGP_SLAC_Enter_State(int n);
void HPGP_Compose_SET_KEY_REQ(void);

void HPGP_Fill_Address(const uint8_t *mac, uint8_t offset) {
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	70fb      	strb	r3, [r7, #3]
 /* at offset 0 in the ethernet frame, we have the destination MAC.
    we can give a different offset, to re-use the MAC also in the data area */
  memcpy(&eth_tx_buffer[offset], mac, 6);
 800b2d8:	78fb      	ldrb	r3, [r7, #3]
 800b2da:	4a05      	ldr	r2, [pc, #20]	@ (800b2f0 <HPGP_Fill_Address+0x24>)
 800b2dc:	4413      	add	r3, r2
 800b2de:	2206      	movs	r2, #6
 800b2e0:	6879      	ldr	r1, [r7, #4]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 fb73 	bl	800c9ce <memcpy>
}
 800b2e8:	bf00      	nop
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20001fa8 	.word	0x20001fa8

0800b2f4 <HPGP_Get_MTYPE>:

/* Extracting the MTYPE from a received message. */
uint16_t HPGP_Get_MTYPE(uint8_t *eth_rx_buffer) {
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  uint16_t mtype=0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	81fb      	strh	r3, [r7, #14]
  mtype=eth_rx_buffer[12]*256 + eth_rx_buffer[13];
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	330c      	adds	r3, #12
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	021b      	lsls	r3, r3, #8
 800b308:	b29b      	uxth	r3, r3
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	320d      	adds	r2, #13
 800b30e:	7812      	ldrb	r2, [r2, #0]
 800b310:	4413      	add	r3, r2
 800b312:	81fb      	strh	r3, [r7, #14]
  return mtype;
 800b314:	89fb      	ldrh	r3, [r7, #14]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
	...

0800b324 <HPGP_Clean_Tx_Buffer>:

void HPGP_Clean_Tx_Buffer(void) {
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
  /* fill the complete ethernet transmit buffer with 0x00 */
  int i;
  for (i=0; i<ETH_TRANSMIT_BUFFER_SIZE; i++) {
 800b32a:	2300      	movs	r3, #0
 800b32c:	607b      	str	r3, [r7, #4]
 800b32e:	e007      	b.n	800b340 <HPGP_Clean_Tx_Buffer+0x1c>
    eth_tx_buffer[i]=0;
 800b330:	4a08      	ldr	r2, [pc, #32]	@ (800b354 <HPGP_Clean_Tx_Buffer+0x30>)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4413      	add	r3, r2
 800b336:	2200      	movs	r2, #0
 800b338:	701a      	strb	r2, [r3, #0]
  for (i=0; i<ETH_TRANSMIT_BUFFER_SIZE; i++) {
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3301      	adds	r3, #1
 800b33e:	607b      	str	r3, [r7, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2bf9      	cmp	r3, #249	@ 0xf9
 800b344:	ddf4      	ble.n	800b330 <HPGP_Clean_Tx_Buffer+0xc>
  }
}
 800b346:	bf00      	nop
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	20001fa8 	.word	0x20001fa8

0800b358 <PEF_Get_Data>:

ev_parameter myEV;
evse_parameter myEVSE;

/* Parameter Exchanged Function */
void PEF_Get_Data(uint8_t* mac, uint8_t offset, uint8_t len){
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
 800b364:	4613      	mov	r3, r2
 800b366:	70bb      	strb	r3, [r7, #2]
	memcpy(mac, &eth_rx_buffer[offset], len);
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	4a05      	ldr	r2, [pc, #20]	@ (800b380 <PEF_Get_Data+0x28>)
 800b36c:	4413      	add	r3, r2
 800b36e:	78ba      	ldrb	r2, [r7, #2]
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 fb2b 	bl	800c9ce <memcpy>
}
 800b378:	bf00      	nop
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	200020a4 	.word	0x200020a4

0800b384 <PEF_Compose_Initialization_Cnf>:
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
    eth_tx_buffer[28]=0x00;
    // Body
}

void PEF_Compose_Initialization_Cnf(void){
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
	/* Initialization Confirm */
    eth_tx_size = 60;
 800b388:	4b19      	ldr	r3, [pc, #100]	@ (800b3f0 <PEF_Compose_Initialization_Cnf+0x6c>)
 800b38a:	223c      	movs	r2, #60	@ 0x3c
 800b38c:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b38e:	f7ff ffc9 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b392:	2100      	movs	r1, #0
 800b394:	4817      	ldr	r0, [pc, #92]	@ (800b3f4 <PEF_Compose_Initialization_Cnf+0x70>)
 800b396:	f7ff ff99 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800b39a:	2106      	movs	r1, #6
 800b39c:	4816      	ldr	r0, [pc, #88]	@ (800b3f8 <PEF_Compose_Initialization_Cnf+0x74>)
 800b39e:	f7ff ff95 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b3a2:	4b16      	ldr	r3, [pc, #88]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3a4:	2288      	movs	r2, #136	@ 0x88
 800b3a6:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b3a8:	4b14      	ldr	r3, [pc, #80]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3aa:	22e1      	movs	r2, #225	@ 0xe1
 800b3ac:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b3ae:	4b13      	ldr	r3, [pc, #76]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE1; // EXCHANGE_DATA
 800b3b4:	4b11      	ldr	r3, [pc, #68]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3b6:	22e1      	movs	r2, #225	@ 0xe1
 800b3b8:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b3ba:	4b10      	ldr	r3, [pc, #64]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3bc:	2260      	movs	r2, #96	@ 0x60
 800b3be:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b3c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b3cc:	2113      	movs	r1, #19
 800b3ce:	480c      	ldr	r0, [pc, #48]	@ (800b400 <PEF_Compose_Initialization_Cnf+0x7c>)
 800b3d0:	f7ff ff7c 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 800b3d4:	4b09      	ldr	r3, [pc, #36]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3d6:	22b0      	movs	r2, #176	@ 0xb0
 800b3d8:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x01; // Function + Message Type
 800b3da:	4b08      	ldr	r3, [pc, #32]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3dc:	2201      	movs	r2, #1
 800b3de:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b3e0:	4b06      	ldr	r3, [pc, #24]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b3e6:	4b05      	ldr	r3, [pc, #20]	@ (800b3fc <PEF_Compose_Initialization_Cnf+0x78>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	771a      	strb	r2, [r3, #28]
    // Body
}
 800b3ec:	bf00      	nop
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	200020a2 	.word	0x200020a2
 800b3f4:	200022d8 	.word	0x200022d8
 800b3f8:	20000044 	.word	0x20000044
 800b3fc:	20001fa8 	.word	0x20001fa8
 800b400:	20000034 	.word	0x20000034

0800b404 <PEF_Evaluate_Initialization>:

void PEF_Evaluate_Initialization(void){
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
    PEF_Get_Data(yourID, 6, 6);
 800b408:	2206      	movs	r2, #6
 800b40a:	2106      	movs	r1, #6
 800b40c:	4804      	ldr	r0, [pc, #16]	@ (800b420 <PEF_Evaluate_Initialization+0x1c>)
 800b40e:	f7ff ffa3 	bl	800b358 <PEF_Get_Data>
    PEF_Get_Data(sessionID, 19, 6);
 800b412:	2206      	movs	r2, #6
 800b414:	2113      	movs	r1, #19
 800b416:	4803      	ldr	r0, [pc, #12]	@ (800b424 <PEF_Evaluate_Initialization+0x20>)
 800b418:	f7ff ff9e 	bl	800b358 <PEF_Get_Data>
}
 800b41c:	bf00      	nop
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	200022d8 	.word	0x200022d8
 800b424:	20000034 	.word	0x20000034

0800b428 <PEF_Compose_Parameter_Exchange_Req>:



void PEF_Compose_Parameter_Exchange_Req(void){
 800b428:	b580      	push	{r7, lr}
 800b42a:	af00      	add	r7, sp, #0
	myEV.control_protocol_number = 0xAA;
 800b42c:	4b42      	ldr	r3, [pc, #264]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b42e:	22aa      	movs	r2, #170	@ 0xaa
 800b430:	701a      	strb	r2, [r3, #0]
	myEV.rate_capacity_battery = 0x3A;
 800b432:	4b41      	ldr	r3, [pc, #260]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b434:	223a      	movs	r2, #58	@ 0x3a
 800b436:	705a      	strb	r2, [r3, #1]
	myEV.current_battery = 0x14;
 800b438:	4b3f      	ldr	r3, [pc, #252]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b43a:	2214      	movs	r2, #20
 800b43c:	709a      	strb	r2, [r3, #2]
	myEV.max_battery_voltage = 0x0320;
 800b43e:	4b3e      	ldr	r3, [pc, #248]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b440:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b444:	809a      	strh	r2, [r3, #4]
	myEV.max_charging_time = 0x0258;
 800b446:	4b3c      	ldr	r3, [pc, #240]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b448:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b44c:	80da      	strh	r2, [r3, #6]
	myEV.target_battery_voltage = 0x00C8;
 800b44e:	4b3a      	ldr	r3, [pc, #232]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b450:	22c8      	movs	r2, #200	@ 0xc8
 800b452:	811a      	strh	r2, [r3, #8]
	myEV.vehicle_charging_enabled = 0xAA;
 800b454:	4b38      	ldr	r3, [pc, #224]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b456:	22aa      	movs	r2, #170	@ 0xaa
 800b458:	729a      	strb	r2, [r3, #10]

	/* Parameter Exchange Request */
    eth_tx_size = 60;
 800b45a:	4b38      	ldr	r3, [pc, #224]	@ (800b53c <PEF_Compose_Parameter_Exchange_Req+0x114>)
 800b45c:	223c      	movs	r2, #60	@ 0x3c
 800b45e:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b460:	f7ff ff60 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b464:	2100      	movs	r1, #0
 800b466:	4836      	ldr	r0, [pc, #216]	@ (800b540 <PEF_Compose_Parameter_Exchange_Req+0x118>)
 800b468:	f7ff ff30 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800b46c:	2106      	movs	r1, #6
 800b46e:	4835      	ldr	r0, [pc, #212]	@ (800b544 <PEF_Compose_Parameter_Exchange_Req+0x11c>)
 800b470:	f7ff ff2c 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b474:	4b34      	ldr	r3, [pc, #208]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b476:	2288      	movs	r2, #136	@ 0x88
 800b478:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b47a:	4b33      	ldr	r3, [pc, #204]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b47c:	22e1      	movs	r2, #225	@ 0xe1
 800b47e:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b480:	4b31      	ldr	r3, [pc, #196]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b482:	2201      	movs	r2, #1
 800b484:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800b486:	4b30      	ldr	r3, [pc, #192]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b488:	22e0      	movs	r2, #224	@ 0xe0
 800b48a:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b48c:	4b2e      	ldr	r3, [pc, #184]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b48e:	2260      	movs	r2, #96	@ 0x60
 800b490:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b492:	4b2d      	ldr	r3, [pc, #180]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b494:	2200      	movs	r2, #0
 800b496:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b498:	4b2b      	ldr	r3, [pc, #172]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b49e:	2113      	movs	r1, #19
 800b4a0:	482a      	ldr	r0, [pc, #168]	@ (800b54c <PEF_Compose_Parameter_Exchange_Req+0x124>)
 800b4a2:	f7ff ff13 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 800b4a6:	4b28      	ldr	r3, [pc, #160]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4a8:	22b0      	movs	r2, #176	@ 0xb0
 800b4aa:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x04; // Function + Message Type
 800b4ac:	4b26      	ldr	r3, [pc, #152]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4ae:	2204      	movs	r2, #4
 800b4b0:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b4b2:	4b25      	ldr	r3, [pc, #148]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b4b8:	4b23      	ldr	r3, [pc, #140]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = myEV.control_protocol_number;
 800b4be:	4b1e      	ldr	r3, [pc, #120]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b4c0:	781a      	ldrb	r2, [r3, #0]
 800b4c2:	4b21      	ldr	r3, [pc, #132]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4c4:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = myEV.rate_capacity_battery ;
 800b4c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b4c8:	785a      	ldrb	r2, [r3, #1]
 800b4ca:	4b1f      	ldr	r3, [pc, #124]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4cc:	779a      	strb	r2, [r3, #30]
    eth_tx_buffer[31] = myEV.current_battery;
 800b4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b4d0:	789a      	ldrb	r2, [r3, #2]
 800b4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4d4:	77da      	strb	r2, [r3, #31]
    eth_tx_buffer[32] = (myEV.max_battery_voltage >> 8);
 800b4d6:	4b18      	ldr	r3, [pc, #96]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b4d8:	889b      	ldrh	r3, [r3, #4]
 800b4da:	0a1b      	lsrs	r3, r3, #8
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	4b19      	ldr	r3, [pc, #100]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4e2:	f883 2020 	strb.w	r2, [r3, #32]
    eth_tx_buffer[33] = myEV.max_battery_voltage;
 800b4e6:	4b14      	ldr	r3, [pc, #80]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b4e8:	889b      	ldrh	r3, [r3, #4]
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	4b16      	ldr	r3, [pc, #88]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    eth_tx_buffer[34] = (myEV.max_charging_time >> 8);
 800b4f2:	4b11      	ldr	r3, [pc, #68]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b4f4:	88db      	ldrh	r3, [r3, #6]
 800b4f6:	0a1b      	lsrs	r3, r3, #8
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	4b12      	ldr	r3, [pc, #72]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b4fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    eth_tx_buffer[35] = myEV.max_charging_time;
 800b502:	4b0d      	ldr	r3, [pc, #52]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b504:	88db      	ldrh	r3, [r3, #6]
 800b506:	b2da      	uxtb	r2, r3
 800b508:	4b0f      	ldr	r3, [pc, #60]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b50a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    eth_tx_buffer[36] = (myEV.target_battery_voltage >> 8);
 800b50e:	4b0a      	ldr	r3, [pc, #40]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b510:	891b      	ldrh	r3, [r3, #8]
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	b29b      	uxth	r3, r3
 800b516:	b2da      	uxtb	r2, r3
 800b518:	4b0b      	ldr	r3, [pc, #44]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b51a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    eth_tx_buffer[37] = myEV.target_battery_voltage;
 800b51e:	4b06      	ldr	r3, [pc, #24]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b520:	891b      	ldrh	r3, [r3, #8]
 800b522:	b2da      	uxtb	r2, r3
 800b524:	4b08      	ldr	r3, [pc, #32]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b526:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    eth_tx_buffer[38] = myEV.vehicle_charging_enabled;
 800b52a:	4b03      	ldr	r3, [pc, #12]	@ (800b538 <PEF_Compose_Parameter_Exchange_Req+0x110>)
 800b52c:	7a9a      	ldrb	r2, [r3, #10]
 800b52e:	4b06      	ldr	r3, [pc, #24]	@ (800b548 <PEF_Compose_Parameter_Exchange_Req+0x120>)
 800b530:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800b534:	bf00      	nop
 800b536:	bd80      	pop	{r7, pc}
 800b538:	200022e0 	.word	0x200022e0
 800b53c:	200020a2 	.word	0x200020a2
 800b540:	200022d8 	.word	0x200022d8
 800b544:	2000003c 	.word	0x2000003c
 800b548:	20001fa8 	.word	0x20001fa8
 800b54c:	20000034 	.word	0x20000034

0800b550 <PEF_Compose_Parameter_Exchange_Res>:

void PEF_Compose_Parameter_Exchange_Res(void){
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
	myEVSE.control_protocol_number = 0xAA;
 800b554:	4b31      	ldr	r3, [pc, #196]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b556:	22aa      	movs	r2, #170	@ 0xaa
 800b558:	701a      	strb	r2, [r3, #0]
	myEVSE.available_output_voltage = 0x0190;
 800b55a:	4b30      	ldr	r3, [pc, #192]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b55c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b560:	805a      	strh	r2, [r3, #2]
	myEVSE.available_output_current = 0x0032;
 800b562:	4b2e      	ldr	r3, [pc, #184]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b564:	2232      	movs	r2, #50	@ 0x32
 800b566:	809a      	strh	r2, [r3, #4]
	myEVSE.battery_incompability = 0xAA;
 800b568:	4b2c      	ldr	r3, [pc, #176]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b56a:	22aa      	movs	r2, #170	@ 0xaa
 800b56c:	719a      	strb	r2, [r3, #6]

	/* Parameter Exchange Response */
    eth_tx_size = 60;
 800b56e:	4b2c      	ldr	r3, [pc, #176]	@ (800b620 <PEF_Compose_Parameter_Exchange_Res+0xd0>)
 800b570:	223c      	movs	r2, #60	@ 0x3c
 800b572:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b574:	f7ff fed6 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b578:	2100      	movs	r1, #0
 800b57a:	482a      	ldr	r0, [pc, #168]	@ (800b624 <PEF_Compose_Parameter_Exchange_Res+0xd4>)
 800b57c:	f7ff fea6 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800b580:	2106      	movs	r1, #6
 800b582:	4829      	ldr	r0, [pc, #164]	@ (800b628 <PEF_Compose_Parameter_Exchange_Res+0xd8>)
 800b584:	f7ff fea2 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b588:	4b28      	ldr	r3, [pc, #160]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b58a:	2288      	movs	r2, #136	@ 0x88
 800b58c:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b58e:	4b27      	ldr	r3, [pc, #156]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b590:	22e1      	movs	r2, #225	@ 0xe1
 800b592:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b594:	4b25      	ldr	r3, [pc, #148]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b596:	2201      	movs	r2, #1
 800b598:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800b59a:	4b24      	ldr	r3, [pc, #144]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b59c:	22e0      	movs	r2, #224	@ 0xe0
 800b59e:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b5a0:	4b22      	ldr	r3, [pc, #136]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5a2:	2260      	movs	r2, #96	@ 0x60
 800b5a4:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b5a6:	4b21      	ldr	r3, [pc, #132]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b5ac:	4b1f      	ldr	r3, [pc, #124]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b5b2:	2113      	movs	r1, #19
 800b5b4:	481e      	ldr	r0, [pc, #120]	@ (800b630 <PEF_Compose_Parameter_Exchange_Res+0xe0>)
 800b5b6:	f7ff fe89 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 800b5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5bc:	22b0      	movs	r2, #176	@ 0xb0
 800b5be:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x07; // Function + Message Type
 800b5c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5c2:	2207      	movs	r2, #7
 800b5c4:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b5c6:	4b19      	ldr	r3, [pc, #100]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b5cc:	4b17      	ldr	r3, [pc, #92]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = myEVSE.control_protocol_number;
 800b5d2:	4b12      	ldr	r3, [pc, #72]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b5d4:	781a      	ldrb	r2, [r3, #0]
 800b5d6:	4b15      	ldr	r3, [pc, #84]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5d8:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = (myEVSE.available_output_voltage >> 8);
 800b5da:	4b10      	ldr	r3, [pc, #64]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b5dc:	885b      	ldrh	r3, [r3, #2]
 800b5de:	0a1b      	lsrs	r3, r3, #8
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	4b11      	ldr	r3, [pc, #68]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5e6:	779a      	strb	r2, [r3, #30]
    eth_tx_buffer[31] = myEVSE.available_output_voltage;
 800b5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b5ea:	885b      	ldrh	r3, [r3, #2]
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5f0:	77da      	strb	r2, [r3, #31]
    eth_tx_buffer[32] = (myEVSE.available_output_current >> 8);
 800b5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b5f4:	889b      	ldrh	r3, [r3, #4]
 800b5f6:	0a1b      	lsrs	r3, r3, #8
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b5fe:	f883 2020 	strb.w	r2, [r3, #32]
    eth_tx_buffer[33] = myEVSE.available_output_current;
 800b602:	4b06      	ldr	r3, [pc, #24]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b604:	889b      	ldrh	r3, [r3, #4]
 800b606:	b2da      	uxtb	r2, r3
 800b608:	4b08      	ldr	r3, [pc, #32]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b60a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    eth_tx_buffer[34] = myEVSE.battery_incompability;
 800b60e:	4b03      	ldr	r3, [pc, #12]	@ (800b61c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800b610:	799a      	ldrb	r2, [r3, #6]
 800b612:	4b06      	ldr	r3, [pc, #24]	@ (800b62c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800b614:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800b618:	bf00      	nop
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	200022f0 	.word	0x200022f0
 800b620:	200020a2 	.word	0x200020a2
 800b624:	200022d8 	.word	0x200022d8
 800b628:	20000044 	.word	0x20000044
 800b62c:	20001fa8 	.word	0x20001fa8
 800b630:	20000034 	.word	0x20000034

0800b634 <PEF_Compose_Parameter_Exchange_Cnf>:

void PEF_Compose_Parameter_Exchange_Cnf(void){
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
	/* Parameter Exchange Confirm */
    eth_tx_size = 60;
 800b638:	4b19      	ldr	r3, [pc, #100]	@ (800b6a0 <PEF_Compose_Parameter_Exchange_Cnf+0x6c>)
 800b63a:	223c      	movs	r2, #60	@ 0x3c
 800b63c:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b63e:	f7ff fe71 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b642:	2100      	movs	r1, #0
 800b644:	4817      	ldr	r0, [pc, #92]	@ (800b6a4 <PEF_Compose_Parameter_Exchange_Cnf+0x70>)
 800b646:	f7ff fe41 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800b64a:	2106      	movs	r1, #6
 800b64c:	4816      	ldr	r0, [pc, #88]	@ (800b6a8 <PEF_Compose_Parameter_Exchange_Cnf+0x74>)
 800b64e:	f7ff fe3d 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b652:	4b16      	ldr	r3, [pc, #88]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b654:	2288      	movs	r2, #136	@ 0x88
 800b656:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b658:	4b14      	ldr	r3, [pc, #80]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b65a:	22e1      	movs	r2, #225	@ 0xe1
 800b65c:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b65e:	4b13      	ldr	r3, [pc, #76]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b660:	2201      	movs	r2, #1
 800b662:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800b664:	4b11      	ldr	r3, [pc, #68]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b666:	22e0      	movs	r2, #224	@ 0xe0
 800b668:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b66a:	4b10      	ldr	r3, [pc, #64]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b66c:	2260      	movs	r2, #96	@ 0x60
 800b66e:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b670:	4b0e      	ldr	r3, [pc, #56]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b672:	2200      	movs	r2, #0
 800b674:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b676:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b678:	2200      	movs	r2, #0
 800b67a:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b67c:	2113      	movs	r1, #19
 800b67e:	480c      	ldr	r0, [pc, #48]	@ (800b6b0 <PEF_Compose_Parameter_Exchange_Cnf+0x7c>)
 800b680:	f7ff fe24 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 800b684:	4b09      	ldr	r3, [pc, #36]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b686:	22b0      	movs	r2, #176	@ 0xb0
 800b688:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x05; // Function + Message Type
 800b68a:	4b08      	ldr	r3, [pc, #32]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b68c:	2205      	movs	r2, #5
 800b68e:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b690:	4b06      	ldr	r3, [pc, #24]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b692:	2200      	movs	r2, #0
 800b694:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b696:	4b05      	ldr	r3, [pc, #20]	@ (800b6ac <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800b698:	2200      	movs	r2, #0
 800b69a:	771a      	strb	r2, [r3, #28]
    // Body
}
 800b69c:	bf00      	nop
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	200020a2 	.word	0x200020a2
 800b6a4:	200022d8 	.word	0x200022d8
 800b6a8:	2000003c 	.word	0x2000003c
 800b6ac:	20001fa8 	.word	0x20001fa8
 800b6b0:	20000034 	.word	0x20000034

0800b6b4 <PEF_Evaluate_Parameter_Exchange_Req>:

void PEF_Evaluate_Parameter_Exchange_Req(void){
 800b6b4:	b480      	push	{r7}
 800b6b6:	af00      	add	r7, sp, #0
	myEV.control_protocol_number = eth_rx_buffer[29];
 800b6b8:	4b1c      	ldr	r3, [pc, #112]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b6ba:	7f5a      	ldrb	r2, [r3, #29]
 800b6bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b730 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800b6be:	701a      	strb	r2, [r3, #0]
	myEV.rate_capacity_battery = eth_rx_buffer[30];
 800b6c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b6c2:	7f9a      	ldrb	r2, [r3, #30]
 800b6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b730 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800b6c6:	705a      	strb	r2, [r3, #1]
	myEV.current_battery = eth_rx_buffer[31];
 800b6c8:	4b18      	ldr	r3, [pc, #96]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b6ca:	7fda      	ldrb	r2, [r3, #31]
 800b6cc:	4b18      	ldr	r3, [pc, #96]	@ (800b730 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800b6ce:	709a      	strb	r2, [r3, #2]
	myEV.max_battery_voltage = (eth_rx_buffer[32] << 8) + eth_rx_buffer[33];
 800b6d0:	4b16      	ldr	r3, [pc, #88]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b6d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b6d6:	021b      	lsls	r3, r3, #8
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	4a14      	ldr	r2, [pc, #80]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b6dc:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 800b6e0:	4413      	add	r3, r2
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	4b12      	ldr	r3, [pc, #72]	@ (800b730 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800b6e6:	809a      	strh	r2, [r3, #4]
	myEV.max_charging_time = (eth_rx_buffer[34] << 8) + eth_rx_buffer[35];
 800b6e8:	4b10      	ldr	r3, [pc, #64]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b6ea:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b6ee:	021b      	lsls	r3, r3, #8
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	4a0e      	ldr	r2, [pc, #56]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b6f4:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800b6f8:	4413      	add	r3, r2
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b730 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800b6fe:	80da      	strh	r2, [r3, #6]
	myEV.target_battery_voltage = (eth_rx_buffer[36] << 8) + eth_rx_buffer[37];
 800b700:	4b0a      	ldr	r3, [pc, #40]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b702:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	b29b      	uxth	r3, r3
 800b70a:	4a08      	ldr	r2, [pc, #32]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b70c:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 800b710:	4413      	add	r3, r2
 800b712:	b29a      	uxth	r2, r3
 800b714:	4b06      	ldr	r3, [pc, #24]	@ (800b730 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800b716:	811a      	strh	r2, [r3, #8]
	myEV.vehicle_charging_enabled = eth_rx_buffer[38];
 800b718:	4b04      	ldr	r3, [pc, #16]	@ (800b72c <PEF_Evaluate_Parameter_Exchange_Req+0x78>)
 800b71a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800b71e:	4b04      	ldr	r3, [pc, #16]	@ (800b730 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800b720:	729a      	strb	r2, [r3, #10]
}
 800b722:	bf00      	nop
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	200020a4 	.word	0x200020a4
 800b730:	200022e0 	.word	0x200022e0

0800b734 <PEF_Evaluate_Parameter_Exchange_Res>:

void PEF_Evaluate_Parameter_Exchange_Res(void){
 800b734:	b480      	push	{r7}
 800b736:	af00      	add	r7, sp, #0
	myEVSE.control_protocol_number = eth_rx_buffer[29];
 800b738:	4b11      	ldr	r3, [pc, #68]	@ (800b780 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800b73a:	7f5a      	ldrb	r2, [r3, #29]
 800b73c:	4b11      	ldr	r3, [pc, #68]	@ (800b784 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 800b73e:	701a      	strb	r2, [r3, #0]
	myEVSE.available_output_voltage = (eth_rx_buffer[30] << 8) + eth_rx_buffer[31];
 800b740:	4b0f      	ldr	r3, [pc, #60]	@ (800b780 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800b742:	7f9b      	ldrb	r3, [r3, #30]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	b29b      	uxth	r3, r3
 800b748:	4a0d      	ldr	r2, [pc, #52]	@ (800b780 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800b74a:	7fd2      	ldrb	r2, [r2, #31]
 800b74c:	4413      	add	r3, r2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	4b0c      	ldr	r3, [pc, #48]	@ (800b784 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 800b752:	805a      	strh	r2, [r3, #2]
	myEVSE.available_output_current = (eth_rx_buffer[32] << 8) + eth_rx_buffer[33];
 800b754:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800b756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b75a:	021b      	lsls	r3, r3, #8
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	4a08      	ldr	r2, [pc, #32]	@ (800b780 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800b760:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 800b764:	4413      	add	r3, r2
 800b766:	b29a      	uxth	r2, r3
 800b768:	4b06      	ldr	r3, [pc, #24]	@ (800b784 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 800b76a:	809a      	strh	r2, [r3, #4]
	myEVSE.battery_incompability = eth_rx_buffer[34];
 800b76c:	4b04      	ldr	r3, [pc, #16]	@ (800b780 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800b76e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800b772:	4b04      	ldr	r3, [pc, #16]	@ (800b784 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 800b774:	719a      	strb	r2, [r3, #6]
}
 800b776:	bf00      	nop
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	200020a4 	.word	0x200020a4
 800b784:	200022f0 	.word	0x200022f0

0800b788 <PEF_Compose_Connector_Lock_Cnf>:
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
    eth_tx_buffer[28]=0x00;
    // Body
}

void PEF_Compose_Connector_Lock_Cnf(void){
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
	/* Connector Lock Confirm */
    eth_tx_size = 60;
 800b78c:	4b19      	ldr	r3, [pc, #100]	@ (800b7f4 <PEF_Compose_Connector_Lock_Cnf+0x6c>)
 800b78e:	223c      	movs	r2, #60	@ 0x3c
 800b790:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b792:	f7ff fdc7 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b796:	2100      	movs	r1, #0
 800b798:	4817      	ldr	r0, [pc, #92]	@ (800b7f8 <PEF_Compose_Connector_Lock_Cnf+0x70>)
 800b79a:	f7ff fd97 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800b79e:	2106      	movs	r1, #6
 800b7a0:	4816      	ldr	r0, [pc, #88]	@ (800b7fc <PEF_Compose_Connector_Lock_Cnf+0x74>)
 800b7a2:	f7ff fd93 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b7a6:	4b16      	ldr	r3, [pc, #88]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7a8:	2288      	movs	r2, #136	@ 0x88
 800b7aa:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b7ac:	4b14      	ldr	r3, [pc, #80]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7ae:	22e1      	movs	r2, #225	@ 0xe1
 800b7b0:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b7b2:	4b13      	ldr	r3, [pc, #76]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800b7b8:	4b11      	ldr	r3, [pc, #68]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7ba:	22e0      	movs	r2, #224	@ 0xe0
 800b7bc:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b7be:	4b10      	ldr	r3, [pc, #64]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7c0:	2260      	movs	r2, #96	@ 0x60
 800b7c2:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b7c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b7d0:	2113      	movs	r1, #19
 800b7d2:	480c      	ldr	r0, [pc, #48]	@ (800b804 <PEF_Compose_Connector_Lock_Cnf+0x7c>)
 800b7d4:	f7ff fd7a 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 800b7d8:	4b09      	ldr	r3, [pc, #36]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7da:	22b0      	movs	r2, #176	@ 0xb0
 800b7dc:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x09; // Function + Message Type
 800b7de:	4b08      	ldr	r3, [pc, #32]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7e0:	2209      	movs	r2, #9
 800b7e2:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b7e4:	4b06      	ldr	r3, [pc, #24]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b7ea:	4b05      	ldr	r3, [pc, #20]	@ (800b800 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	771a      	strb	r2, [r3, #28]
    // Body
}
 800b7f0:	bf00      	nop
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	200020a2 	.word	0x200020a2
 800b7f8:	200022d8 	.word	0x200022d8
 800b7fc:	20000044 	.word	0x20000044
 800b800:	20001fa8 	.word	0x20001fa8
 800b804:	20000034 	.word	0x20000034

0800b808 <PEF_Compose_Contactor_Close_Req>:

void PEF_Compose_Contactor_Close_Req(void){
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
	/* Contactor Close Request */
    eth_tx_size = 60;
 800b80c:	4b19      	ldr	r3, [pc, #100]	@ (800b874 <PEF_Compose_Contactor_Close_Req+0x6c>)
 800b80e:	223c      	movs	r2, #60	@ 0x3c
 800b810:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b812:	f7ff fd87 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b816:	2100      	movs	r1, #0
 800b818:	4817      	ldr	r0, [pc, #92]	@ (800b878 <PEF_Compose_Contactor_Close_Req+0x70>)
 800b81a:	f7ff fd57 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800b81e:	2106      	movs	r1, #6
 800b820:	4816      	ldr	r0, [pc, #88]	@ (800b87c <PEF_Compose_Contactor_Close_Req+0x74>)
 800b822:	f7ff fd53 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b826:	4b16      	ldr	r3, [pc, #88]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b828:	2288      	movs	r2, #136	@ 0x88
 800b82a:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b82c:	4b14      	ldr	r3, [pc, #80]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b82e:	22e1      	movs	r2, #225	@ 0xe1
 800b830:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b832:	4b13      	ldr	r3, [pc, #76]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b834:	2201      	movs	r2, #1
 800b836:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800b838:	4b11      	ldr	r3, [pc, #68]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b83a:	22e0      	movs	r2, #224	@ 0xe0
 800b83c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b83e:	4b10      	ldr	r3, [pc, #64]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b840:	2260      	movs	r2, #96	@ 0x60
 800b842:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b844:	4b0e      	ldr	r3, [pc, #56]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b846:	2200      	movs	r2, #0
 800b848:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b84a:	4b0d      	ldr	r3, [pc, #52]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b850:	2113      	movs	r1, #19
 800b852:	480c      	ldr	r0, [pc, #48]	@ (800b884 <PEF_Compose_Contactor_Close_Req+0x7c>)
 800b854:	f7ff fd3a 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800b858:	4b09      	ldr	r3, [pc, #36]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b85a:	22c1      	movs	r2, #193	@ 0xc1
 800b85c:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x0C; // Function + Message Type
 800b85e:	4b08      	ldr	r3, [pc, #32]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b860:	220c      	movs	r2, #12
 800b862:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b864:	4b06      	ldr	r3, [pc, #24]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b866:	2200      	movs	r2, #0
 800b868:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b86a:	4b05      	ldr	r3, [pc, #20]	@ (800b880 <PEF_Compose_Contactor_Close_Req+0x78>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	771a      	strb	r2, [r3, #28]
    // Body
}
 800b870:	bf00      	nop
 800b872:	bd80      	pop	{r7, pc}
 800b874:	200020a2 	.word	0x200020a2
 800b878:	200022d8 	.word	0x200022d8
 800b87c:	20000044 	.word	0x20000044
 800b880:	20001fa8 	.word	0x20001fa8
 800b884:	20000034 	.word	0x20000034

0800b888 <PEF_Compose_Contactor_Close_Cnf>:

void PEF_Compose_Contactor_Close_Cnf(void){
 800b888:	b580      	push	{r7, lr}
 800b88a:	af00      	add	r7, sp, #0
	/* Contactor Close Confirm */
    eth_tx_size = 60;
 800b88c:	4b19      	ldr	r3, [pc, #100]	@ (800b8f4 <PEF_Compose_Contactor_Close_Cnf+0x6c>)
 800b88e:	223c      	movs	r2, #60	@ 0x3c
 800b890:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b892:	f7ff fd47 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b896:	2100      	movs	r1, #0
 800b898:	4817      	ldr	r0, [pc, #92]	@ (800b8f8 <PEF_Compose_Contactor_Close_Cnf+0x70>)
 800b89a:	f7ff fd17 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800b89e:	2106      	movs	r1, #6
 800b8a0:	4816      	ldr	r0, [pc, #88]	@ (800b8fc <PEF_Compose_Contactor_Close_Cnf+0x74>)
 800b8a2:	f7ff fd13 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b8a6:	4b16      	ldr	r3, [pc, #88]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8a8:	2288      	movs	r2, #136	@ 0x88
 800b8aa:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b8ac:	4b14      	ldr	r3, [pc, #80]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8ae:	22e1      	movs	r2, #225	@ 0xe1
 800b8b0:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b8b2:	4b13      	ldr	r3, [pc, #76]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800b8b8:	4b11      	ldr	r3, [pc, #68]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8ba:	22e0      	movs	r2, #224	@ 0xe0
 800b8bc:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b8be:	4b10      	ldr	r3, [pc, #64]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8c0:	2260      	movs	r2, #96	@ 0x60
 800b8c2:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b8d0:	2113      	movs	r1, #19
 800b8d2:	480c      	ldr	r0, [pc, #48]	@ (800b904 <PEF_Compose_Contactor_Close_Cnf+0x7c>)
 800b8d4:	f7ff fcfa 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800b8d8:	4b09      	ldr	r3, [pc, #36]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8da:	22c1      	movs	r2, #193	@ 0xc1
 800b8dc:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x0D; // Function + Message Type
 800b8de:	4b08      	ldr	r3, [pc, #32]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8e0:	220d      	movs	r2, #13
 800b8e2:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b8e4:	4b06      	ldr	r3, [pc, #24]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b8ea:	4b05      	ldr	r3, [pc, #20]	@ (800b900 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	771a      	strb	r2, [r3, #28]
    // Body
}
 800b8f0:	bf00      	nop
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	200020a2 	.word	0x200020a2
 800b8f8:	200022d8 	.word	0x200022d8
 800b8fc:	2000003c 	.word	0x2000003c
 800b900:	20001fa8 	.word	0x20001fa8
 800b904:	20000034 	.word	0x20000034

0800b908 <PEF_Compose_Charging_Current_Demand_Res>:
    eth_tx_buffer[31] = myEV.charging_system_fault;
    eth_tx_buffer[32] = myEV.vehicle_shift_lever_position;
    eth_tx_buffer[33] = myEV.current_battery;
}

void PEF_Compose_Charging_Current_Demand_Res(uint8_t station_status, uint16_t output_voltage, uint16_t output_current, uint16_t remaining_charging_time, uint8_t station_mal, uint8_t charge_system_mal){
 800b908:	b590      	push	{r4, r7, lr}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	461a      	mov	r2, r3
 800b916:	4623      	mov	r3, r4
 800b918:	71fb      	strb	r3, [r7, #7]
 800b91a:	4603      	mov	r3, r0
 800b91c:	80bb      	strh	r3, [r7, #4]
 800b91e:	460b      	mov	r3, r1
 800b920:	807b      	strh	r3, [r7, #2]
 800b922:	4613      	mov	r3, r2
 800b924:	803b      	strh	r3, [r7, #0]
	myEVSE.station_status = station_status;
 800b926:	4a3f      	ldr	r2, [pc, #252]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	71d3      	strb	r3, [r2, #7]
	myEVSE.output_current = output_current;
 800b92c:	4a3d      	ldr	r2, [pc, #244]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b92e:	887b      	ldrh	r3, [r7, #2]
 800b930:	8153      	strh	r3, [r2, #10]
	myEVSE.output_voltage = output_voltage;
 800b932:	4a3c      	ldr	r2, [pc, #240]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b934:	88bb      	ldrh	r3, [r7, #4]
 800b936:	8113      	strh	r3, [r2, #8]
	myEVSE.remaining_charging_time = remaining_charging_time;
 800b938:	4a3a      	ldr	r2, [pc, #232]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b93a:	883b      	ldrh	r3, [r7, #0]
 800b93c:	8193      	strh	r3, [r2, #12]
	myEVSE.station_malfunction = station_mal;
 800b93e:	4a39      	ldr	r2, [pc, #228]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b940:	7e3b      	ldrb	r3, [r7, #24]
 800b942:	7393      	strb	r3, [r2, #14]
	myEVSE.charging_system_malfunction = charge_system_mal;
 800b944:	4a37      	ldr	r2, [pc, #220]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b946:	7f3b      	ldrb	r3, [r7, #28]
 800b948:	73d3      	strb	r3, [r2, #15]

	/* Charging by Current Demand Response */
    eth_tx_size = 60;
 800b94a:	4b37      	ldr	r3, [pc, #220]	@ (800ba28 <PEF_Compose_Charging_Current_Demand_Res+0x120>)
 800b94c:	223c      	movs	r2, #60	@ 0x3c
 800b94e:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800b950:	f7ff fce8 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800b954:	2100      	movs	r1, #0
 800b956:	4835      	ldr	r0, [pc, #212]	@ (800ba2c <PEF_Compose_Charging_Current_Demand_Res+0x124>)
 800b958:	f7ff fcb8 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800b95c:	2106      	movs	r1, #6
 800b95e:	4834      	ldr	r0, [pc, #208]	@ (800ba30 <PEF_Compose_Charging_Current_Demand_Res+0x128>)
 800b960:	f7ff fcb4 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800b964:	4b33      	ldr	r3, [pc, #204]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b966:	2288      	movs	r2, #136	@ 0x88
 800b968:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800b96a:	4b32      	ldr	r3, [pc, #200]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b96c:	22e1      	movs	r2, #225	@ 0xe1
 800b96e:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800b970:	4b30      	ldr	r3, [pc, #192]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b972:	2201      	movs	r2, #1
 800b974:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800b976:	4b2f      	ldr	r3, [pc, #188]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b978:	22e0      	movs	r2, #224	@ 0xe0
 800b97a:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800b97c:	4b2d      	ldr	r3, [pc, #180]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b97e:	2260      	movs	r2, #96	@ 0x60
 800b980:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800b982:	4b2c      	ldr	r3, [pc, #176]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b984:	2200      	movs	r2, #0
 800b986:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800b988:	4b2a      	ldr	r3, [pc, #168]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800b98e:	2113      	movs	r1, #19
 800b990:	4829      	ldr	r0, [pc, #164]	@ (800ba38 <PEF_Compose_Charging_Current_Demand_Res+0x130>)
 800b992:	f7ff fc9b 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800b996:	4b27      	ldr	r3, [pc, #156]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b998:	22c1      	movs	r2, #193	@ 0xc1
 800b99a:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x13; // Function + Message Type
 800b99c:	4b25      	ldr	r3, [pc, #148]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b99e:	2213      	movs	r2, #19
 800b9a0:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800b9a2:	4b24      	ldr	r3, [pc, #144]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800b9a8:	4b22      	ldr	r3, [pc, #136]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = myEVSE.station_status;
 800b9ae:	4b1d      	ldr	r3, [pc, #116]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b9b0:	79da      	ldrb	r2, [r3, #7]
 800b9b2:	4b20      	ldr	r3, [pc, #128]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9b4:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = (myEVSE.output_current >> 8);
 800b9b6:	4b1b      	ldr	r3, [pc, #108]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b9b8:	895b      	ldrh	r3, [r3, #10]
 800b9ba:	0a1b      	lsrs	r3, r3, #8
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	4b1c      	ldr	r3, [pc, #112]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9c2:	779a      	strb	r2, [r3, #30]
    eth_tx_buffer[31] = myEVSE.output_current;
 800b9c4:	4b17      	ldr	r3, [pc, #92]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b9c6:	895b      	ldrh	r3, [r3, #10]
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	4b1a      	ldr	r3, [pc, #104]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9cc:	77da      	strb	r2, [r3, #31]
    eth_tx_buffer[32] = (myEVSE.output_voltage >> 8);
 800b9ce:	4b15      	ldr	r3, [pc, #84]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b9d0:	891b      	ldrh	r3, [r3, #8]
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	4b16      	ldr	r3, [pc, #88]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9da:	f883 2020 	strb.w	r2, [r3, #32]
    eth_tx_buffer[33] = myEVSE.output_voltage;
 800b9de:	4b11      	ldr	r3, [pc, #68]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b9e0:	891b      	ldrh	r3, [r3, #8]
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	4b13      	ldr	r3, [pc, #76]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    eth_tx_buffer[34] = (myEVSE.remaining_charging_time >> 8);
 800b9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b9ec:	899b      	ldrh	r3, [r3, #12]
 800b9ee:	0a1b      	lsrs	r3, r3, #8
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800b9f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    eth_tx_buffer[35] = myEVSE.remaining_charging_time;
 800b9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800b9fc:	899b      	ldrh	r3, [r3, #12]
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	4b0c      	ldr	r3, [pc, #48]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800ba02:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    eth_tx_buffer[36] = myEVSE.station_malfunction;
 800ba06:	4b07      	ldr	r3, [pc, #28]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800ba08:	7b9a      	ldrb	r2, [r3, #14]
 800ba0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800ba0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    eth_tx_buffer[37] = myEVSE.charging_system_malfunction;
 800ba10:	4b04      	ldr	r3, [pc, #16]	@ (800ba24 <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800ba12:	7bda      	ldrb	r2, [r3, #15]
 800ba14:	4b07      	ldr	r3, [pc, #28]	@ (800ba34 <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800ba16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800ba1a:	bf00      	nop
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd90      	pop	{r4, r7, pc}
 800ba22:	bf00      	nop
 800ba24:	200022f0 	.word	0x200022f0
 800ba28:	200020a2 	.word	0x200020a2
 800ba2c:	200022d8 	.word	0x200022d8
 800ba30:	20000044 	.word	0x20000044
 800ba34:	20001fa8 	.word	0x20001fa8
 800ba38:	20000034 	.word	0x20000034

0800ba3c <PEF_Evaluate_Charging_Current_Demand_Req>:
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
    eth_tx_buffer[28]=0x00;
    // Body
}

void PEF_Evaluate_Charging_Current_Demand_Req(void){
 800ba3c:	b480      	push	{r7}
 800ba3e:	af00      	add	r7, sp, #0
	myEV.charging_current_request = (eth_rx_buffer[29] << 8) + eth_rx_buffer[30];
 800ba40:	4b0e      	ldr	r3, [pc, #56]	@ (800ba7c <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 800ba42:	7f5b      	ldrb	r3, [r3, #29]
 800ba44:	021b      	lsls	r3, r3, #8
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	4a0c      	ldr	r2, [pc, #48]	@ (800ba7c <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 800ba4a:	7f92      	ldrb	r2, [r2, #30]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	4b0b      	ldr	r3, [pc, #44]	@ (800ba80 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 800ba52:	819a      	strh	r2, [r3, #12]
	myEV.charging_system_fault = eth_rx_buffer[31];
 800ba54:	4b09      	ldr	r3, [pc, #36]	@ (800ba7c <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 800ba56:	7fda      	ldrb	r2, [r3, #31]
 800ba58:	4b09      	ldr	r3, [pc, #36]	@ (800ba80 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 800ba5a:	739a      	strb	r2, [r3, #14]
	myEV.vehicle_shift_lever_position = eth_rx_buffer[32];
 800ba5c:	4b07      	ldr	r3, [pc, #28]	@ (800ba7c <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 800ba5e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ba62:	4b07      	ldr	r3, [pc, #28]	@ (800ba80 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 800ba64:	73da      	strb	r2, [r3, #15]
	myEV.current_battery = eth_rx_buffer[33];
 800ba66:	4b05      	ldr	r3, [pc, #20]	@ (800ba7c <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 800ba68:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800ba6c:	4b04      	ldr	r3, [pc, #16]	@ (800ba80 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 800ba6e:	709a      	strb	r2, [r3, #2]
}
 800ba70:	bf00      	nop
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	200020a4 	.word	0x200020a4
 800ba80:	200022e0 	.word	0x200022e0

0800ba84 <PEF_Evaluate_Charging_Current_Demand_Res>:

void PEF_Evaluate_Charging_Current_Demand_Res(void){
 800ba84:	b480      	push	{r7}
 800ba86:	af00      	add	r7, sp, #0
	myEVSE.station_status = eth_rx_buffer[29];
 800ba88:	4b1a      	ldr	r3, [pc, #104]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800ba8a:	7f5a      	ldrb	r2, [r3, #29]
 800ba8c:	4b1a      	ldr	r3, [pc, #104]	@ (800baf8 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800ba8e:	71da      	strb	r2, [r3, #7]
	myEVSE.output_current = (eth_rx_buffer[30] << 8) + eth_rx_buffer[31];
 800ba90:	4b18      	ldr	r3, [pc, #96]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800ba92:	7f9b      	ldrb	r3, [r3, #30]
 800ba94:	021b      	lsls	r3, r3, #8
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	4a16      	ldr	r2, [pc, #88]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800ba9a:	7fd2      	ldrb	r2, [r2, #31]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	4b15      	ldr	r3, [pc, #84]	@ (800baf8 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800baa2:	815a      	strh	r2, [r3, #10]
	myEVSE.output_voltage = (eth_rx_buffer[32] << 8) + eth_rx_buffer[33];
 800baa4:	4b13      	ldr	r3, [pc, #76]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800baa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800baaa:	021b      	lsls	r3, r3, #8
 800baac:	b29b      	uxth	r3, r3
 800baae:	4a11      	ldr	r2, [pc, #68]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800bab0:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 800bab4:	4413      	add	r3, r2
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	4b0f      	ldr	r3, [pc, #60]	@ (800baf8 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800baba:	811a      	strh	r2, [r3, #8]
	myEVSE.remaining_charging_time = (eth_rx_buffer[34] << 8) + eth_rx_buffer[35];
 800babc:	4b0d      	ldr	r3, [pc, #52]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800babe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	4a0b      	ldr	r2, [pc, #44]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800bac8:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800bacc:	4413      	add	r3, r2
 800bace:	b29a      	uxth	r2, r3
 800bad0:	4b09      	ldr	r3, [pc, #36]	@ (800baf8 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800bad2:	819a      	strh	r2, [r3, #12]
	myEVSE.station_malfunction = eth_rx_buffer[36];
 800bad4:	4b07      	ldr	r3, [pc, #28]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800bad6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800bada:	4b07      	ldr	r3, [pc, #28]	@ (800baf8 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800badc:	739a      	strb	r2, [r3, #14]
	myEVSE.charging_system_malfunction = eth_rx_buffer[37];
 800bade:	4b05      	ldr	r3, [pc, #20]	@ (800baf4 <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800bae0:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800bae4:	4b04      	ldr	r3, [pc, #16]	@ (800baf8 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800bae6:	73da      	strb	r2, [r3, #15]
}
 800bae8:	bf00      	nop
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	200020a4 	.word	0x200020a4
 800baf8:	200022f0 	.word	0x200022f0

0800bafc <PEF_Compose_Current_Suppression_Res>:
    eth_tx_buffer[28]=0x00;
    // Body
    eth_tx_buffer[29] = myEV.vehicle_charging_enabled;
}

void PEF_Compose_Current_Suppression_Res(uint8_t station_status, uint8_t charging_stop_control, uint16_t output_voltage, uint16_t output_current){
 800bafc:	b590      	push	{r4, r7, lr}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	4604      	mov	r4, r0
 800bb04:	4608      	mov	r0, r1
 800bb06:	4611      	mov	r1, r2
 800bb08:	461a      	mov	r2, r3
 800bb0a:	4623      	mov	r3, r4
 800bb0c:	71fb      	strb	r3, [r7, #7]
 800bb0e:	4603      	mov	r3, r0
 800bb10:	71bb      	strb	r3, [r7, #6]
 800bb12:	460b      	mov	r3, r1
 800bb14:	80bb      	strh	r3, [r7, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	807b      	strh	r3, [r7, #2]
	myEVSE.station_status = station_status;
 800bb1a:	4a32      	ldr	r2, [pc, #200]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bb1c:	79fb      	ldrb	r3, [r7, #7]
 800bb1e:	71d3      	strb	r3, [r2, #7]
	myEVSE.charging_stop_control = charging_stop_control;
 800bb20:	4a30      	ldr	r2, [pc, #192]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bb22:	79bb      	ldrb	r3, [r7, #6]
 800bb24:	7413      	strb	r3, [r2, #16]
	myEVSE.output_voltage = output_voltage;
 800bb26:	4a2f      	ldr	r2, [pc, #188]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bb28:	88bb      	ldrh	r3, [r7, #4]
 800bb2a:	8113      	strh	r3, [r2, #8]
	myEVSE.output_current = output_current;
 800bb2c:	4a2d      	ldr	r2, [pc, #180]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bb2e:	887b      	ldrh	r3, [r7, #2]
 800bb30:	8153      	strh	r3, [r2, #10]

	/* Current Suppression Response */
    eth_tx_size = 60;
 800bb32:	4b2d      	ldr	r3, [pc, #180]	@ (800bbe8 <PEF_Compose_Current_Suppression_Res+0xec>)
 800bb34:	223c      	movs	r2, #60	@ 0x3c
 800bb36:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800bb38:	f7ff fbf4 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	482b      	ldr	r0, [pc, #172]	@ (800bbec <PEF_Compose_Current_Suppression_Res+0xf0>)
 800bb40:	f7ff fbc4 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800bb44:	2106      	movs	r1, #6
 800bb46:	482a      	ldr	r0, [pc, #168]	@ (800bbf0 <PEF_Compose_Current_Suppression_Res+0xf4>)
 800bb48:	f7ff fbc0 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800bb4c:	4b29      	ldr	r3, [pc, #164]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb4e:	2288      	movs	r2, #136	@ 0x88
 800bb50:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800bb52:	4b28      	ldr	r3, [pc, #160]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb54:	22e1      	movs	r2, #225	@ 0xe1
 800bb56:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800bb58:	4b26      	ldr	r3, [pc, #152]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800bb5e:	4b25      	ldr	r3, [pc, #148]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb60:	22e0      	movs	r2, #224	@ 0xe0
 800bb62:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800bb64:	4b23      	ldr	r3, [pc, #140]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb66:	2260      	movs	r2, #96	@ 0x60
 800bb68:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800bb6a:	4b22      	ldr	r3, [pc, #136]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800bb70:	4b20      	ldr	r3, [pc, #128]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800bb76:	2113      	movs	r1, #19
 800bb78:	481f      	ldr	r0, [pc, #124]	@ (800bbf8 <PEF_Compose_Current_Suppression_Res+0xfc>)
 800bb7a:	f7ff fba7 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800bb7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb80:	22c1      	movs	r2, #193	@ 0xc1
 800bb82:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x17; // Function + Message Type
 800bb84:	4b1b      	ldr	r3, [pc, #108]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb86:	2217      	movs	r2, #23
 800bb88:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800bb8a:	4b1a      	ldr	r3, [pc, #104]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800bb90:	4b18      	ldr	r3, [pc, #96]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	771a      	strb	r2, [r3, #28]
    // Body
	eth_tx_buffer[29] = myEVSE.station_status;
 800bb96:	4b13      	ldr	r3, [pc, #76]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bb98:	79da      	ldrb	r2, [r3, #7]
 800bb9a:	4b16      	ldr	r3, [pc, #88]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bb9c:	775a      	strb	r2, [r3, #29]
	eth_tx_buffer[30] = myEVSE.charging_stop_control;
 800bb9e:	4b11      	ldr	r3, [pc, #68]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bba0:	7c1a      	ldrb	r2, [r3, #16]
 800bba2:	4b14      	ldr	r3, [pc, #80]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bba4:	779a      	strb	r2, [r3, #30]
	eth_tx_buffer[31] = (myEVSE.output_voltage >> 8);
 800bba6:	4b0f      	ldr	r3, [pc, #60]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bba8:	891b      	ldrh	r3, [r3, #8]
 800bbaa:	0a1b      	lsrs	r3, r3, #8
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	4b10      	ldr	r3, [pc, #64]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bbb2:	77da      	strb	r2, [r3, #31]
	eth_tx_buffer[32] = myEVSE.output_voltage;
 800bbb4:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bbb6:	891b      	ldrh	r3, [r3, #8]
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bbbc:	f883 2020 	strb.w	r2, [r3, #32]
	eth_tx_buffer[33] = (myEVSE.output_current >>8);
 800bbc0:	4b08      	ldr	r3, [pc, #32]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bbc2:	895b      	ldrh	r3, [r3, #10]
 800bbc4:	0a1b      	lsrs	r3, r3, #8
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bbcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	eth_tx_buffer[34] = myEVSE.output_current;
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800bbd2:	895b      	ldrh	r3, [r3, #10]
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	4b07      	ldr	r3, [pc, #28]	@ (800bbf4 <PEF_Compose_Current_Suppression_Res+0xf8>)
 800bbd8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd90      	pop	{r4, r7, pc}
 800bbe4:	200022f0 	.word	0x200022f0
 800bbe8:	200020a2 	.word	0x200020a2
 800bbec:	200022d8 	.word	0x200022d8
 800bbf0:	20000044 	.word	0x20000044
 800bbf4:	20001fa8 	.word	0x20001fa8
 800bbf8:	20000034 	.word	0x20000034

0800bbfc <PEF_Compose_Current_Suppression_Cnf>:

void PEF_Compose_Current_Suppression_Cnf(void){
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
	/* Current Suppression Confirm */
    eth_tx_size = 60;
 800bc00:	4b19      	ldr	r3, [pc, #100]	@ (800bc68 <PEF_Compose_Current_Suppression_Cnf+0x6c>)
 800bc02:	223c      	movs	r2, #60	@ 0x3c
 800bc04:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800bc06:	f7ff fb8d 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4817      	ldr	r0, [pc, #92]	@ (800bc6c <PEF_Compose_Current_Suppression_Cnf+0x70>)
 800bc0e:	f7ff fb5d 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800bc12:	2106      	movs	r1, #6
 800bc14:	4816      	ldr	r0, [pc, #88]	@ (800bc70 <PEF_Compose_Current_Suppression_Cnf+0x74>)
 800bc16:	f7ff fb59 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800bc1a:	4b16      	ldr	r3, [pc, #88]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc1c:	2288      	movs	r2, #136	@ 0x88
 800bc1e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800bc20:	4b14      	ldr	r3, [pc, #80]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc22:	22e1      	movs	r2, #225	@ 0xe1
 800bc24:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800bc26:	4b13      	ldr	r3, [pc, #76]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc28:	2201      	movs	r2, #1
 800bc2a:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800bc2c:	4b11      	ldr	r3, [pc, #68]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc2e:	22e0      	movs	r2, #224	@ 0xe0
 800bc30:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800bc32:	4b10      	ldr	r3, [pc, #64]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc34:	2260      	movs	r2, #96	@ 0x60
 800bc36:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800bc38:	4b0e      	ldr	r3, [pc, #56]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800bc44:	2113      	movs	r1, #19
 800bc46:	480c      	ldr	r0, [pc, #48]	@ (800bc78 <PEF_Compose_Current_Suppression_Cnf+0x7c>)
 800bc48:	f7ff fb40 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800bc4c:	4b09      	ldr	r3, [pc, #36]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc4e:	22c1      	movs	r2, #193	@ 0xc1
 800bc50:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x15; // Function + Message Type
 800bc52:	4b08      	ldr	r3, [pc, #32]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc54:	2215      	movs	r2, #21
 800bc56:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800bc58:	4b06      	ldr	r3, [pc, #24]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800bc5e:	4b05      	ldr	r3, [pc, #20]	@ (800bc74 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	771a      	strb	r2, [r3, #28]
    // Body
}
 800bc64:	bf00      	nop
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	200020a2 	.word	0x200020a2
 800bc6c:	200022d8 	.word	0x200022d8
 800bc70:	2000003c 	.word	0x2000003c
 800bc74:	20001fa8 	.word	0x20001fa8
 800bc78:	20000034 	.word	0x20000034

0800bc7c <PEF_Evaluate_Current_Suppression_Res>:

void PEF_Evaluate_Current_Suppression_Res(void){
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
	myEVSE.station_status = eth_rx_buffer[29];
 800bc80:	4b11      	ldr	r3, [pc, #68]	@ (800bcc8 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 800bc82:	7f5a      	ldrb	r2, [r3, #29]
 800bc84:	4b11      	ldr	r3, [pc, #68]	@ (800bccc <PEF_Evaluate_Current_Suppression_Res+0x50>)
 800bc86:	71da      	strb	r2, [r3, #7]
	myEVSE.charging_stop_control = eth_rx_buffer[30];
 800bc88:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc8 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 800bc8a:	7f9a      	ldrb	r2, [r3, #30]
 800bc8c:	4b0f      	ldr	r3, [pc, #60]	@ (800bccc <PEF_Evaluate_Current_Suppression_Res+0x50>)
 800bc8e:	741a      	strb	r2, [r3, #16]
	myEVSE.output_voltage = (eth_rx_buffer[31] << 8) + eth_rx_buffer[32];
 800bc90:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc8 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 800bc92:	7fdb      	ldrb	r3, [r3, #31]
 800bc94:	021b      	lsls	r3, r3, #8
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	4a0b      	ldr	r2, [pc, #44]	@ (800bcc8 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 800bc9a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bc9e:	4413      	add	r3, r2
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	4b0a      	ldr	r3, [pc, #40]	@ (800bccc <PEF_Evaluate_Current_Suppression_Res+0x50>)
 800bca4:	811a      	strh	r2, [r3, #8]
	myEVSE.output_current = (eth_rx_buffer[33] << 8) + eth_rx_buffer[34];
 800bca6:	4b08      	ldr	r3, [pc, #32]	@ (800bcc8 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 800bca8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bcac:	021b      	lsls	r3, r3, #8
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	4a05      	ldr	r2, [pc, #20]	@ (800bcc8 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 800bcb2:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800bcb6:	4413      	add	r3, r2
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	4b04      	ldr	r3, [pc, #16]	@ (800bccc <PEF_Evaluate_Current_Suppression_Res+0x50>)
 800bcbc:	815a      	strh	r2, [r3, #10]
}
 800bcbe:	bf00      	nop
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	200020a4 	.word	0x200020a4
 800bccc:	200022f0 	.word	0x200022f0

0800bcd0 <PEF_Compose_Zero_Current_Confirm_Req>:



void PEF_Compose_Zero_Current_Confirm_Req(void){
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
	/* Zero Current Confirm Request */
    eth_tx_size = 60;
 800bcd4:	4b19      	ldr	r3, [pc, #100]	@ (800bd3c <PEF_Compose_Zero_Current_Confirm_Req+0x6c>)
 800bcd6:	223c      	movs	r2, #60	@ 0x3c
 800bcd8:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800bcda:	f7ff fb23 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800bcde:	2100      	movs	r1, #0
 800bce0:	4817      	ldr	r0, [pc, #92]	@ (800bd40 <PEF_Compose_Zero_Current_Confirm_Req+0x70>)
 800bce2:	f7ff faf3 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800bce6:	2106      	movs	r1, #6
 800bce8:	4816      	ldr	r0, [pc, #88]	@ (800bd44 <PEF_Compose_Zero_Current_Confirm_Req+0x74>)
 800bcea:	f7ff faef 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800bcee:	4b16      	ldr	r3, [pc, #88]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bcf0:	2288      	movs	r2, #136	@ 0x88
 800bcf2:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800bcf4:	4b14      	ldr	r3, [pc, #80]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bcf6:	22e1      	movs	r2, #225	@ 0xe1
 800bcf8:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800bcfa:	4b13      	ldr	r3, [pc, #76]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800bd00:	4b11      	ldr	r3, [pc, #68]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd02:	22e0      	movs	r2, #224	@ 0xe0
 800bd04:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800bd06:	4b10      	ldr	r3, [pc, #64]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd08:	2260      	movs	r2, #96	@ 0x60
 800bd0a:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800bd0c:	4b0e      	ldr	r3, [pc, #56]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800bd12:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800bd18:	2113      	movs	r1, #19
 800bd1a:	480c      	ldr	r0, [pc, #48]	@ (800bd4c <PEF_Compose_Zero_Current_Confirm_Req+0x7c>)
 800bd1c:	f7ff fad6 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800bd20:	4b09      	ldr	r3, [pc, #36]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd22:	22b2      	movs	r2, #178	@ 0xb2
 800bd24:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x18; // Function + Message Type
 800bd26:	4b08      	ldr	r3, [pc, #32]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd28:	2218      	movs	r2, #24
 800bd2a:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800bd2c:	4b06      	ldr	r3, [pc, #24]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800bd32:	4b05      	ldr	r3, [pc, #20]	@ (800bd48 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	771a      	strb	r2, [r3, #28]
    // Body
}
 800bd38:	bf00      	nop
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	200020a2 	.word	0x200020a2
 800bd40:	200022d8 	.word	0x200022d8
 800bd44:	20000044 	.word	0x20000044
 800bd48:	20001fa8 	.word	0x20001fa8
 800bd4c:	20000034 	.word	0x20000034

0800bd50 <PEF_Compose_Zero_Current_Confirm_Cnf>:

void PEF_Compose_Zero_Current_Confirm_Cnf(void){
 800bd50:	b580      	push	{r7, lr}
 800bd52:	af00      	add	r7, sp, #0
	/* Zero Current Confirm */
    eth_tx_size = 60;
 800bd54:	4b19      	ldr	r3, [pc, #100]	@ (800bdbc <PEF_Compose_Zero_Current_Confirm_Cnf+0x6c>)
 800bd56:	223c      	movs	r2, #60	@ 0x3c
 800bd58:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800bd5a:	f7ff fae3 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4817      	ldr	r0, [pc, #92]	@ (800bdc0 <PEF_Compose_Zero_Current_Confirm_Cnf+0x70>)
 800bd62:	f7ff fab3 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800bd66:	2106      	movs	r1, #6
 800bd68:	4816      	ldr	r0, [pc, #88]	@ (800bdc4 <PEF_Compose_Zero_Current_Confirm_Cnf+0x74>)
 800bd6a:	f7ff faaf 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800bd6e:	4b16      	ldr	r3, [pc, #88]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bd70:	2288      	movs	r2, #136	@ 0x88
 800bd72:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800bd74:	4b14      	ldr	r3, [pc, #80]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bd76:	22e1      	movs	r2, #225	@ 0xe1
 800bd78:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800bd7a:	4b13      	ldr	r3, [pc, #76]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800bd80:	4b11      	ldr	r3, [pc, #68]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bd82:	22e0      	movs	r2, #224	@ 0xe0
 800bd84:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800bd86:	4b10      	ldr	r3, [pc, #64]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bd88:	2260      	movs	r2, #96	@ 0x60
 800bd8a:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800bd8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800bd92:	4b0d      	ldr	r3, [pc, #52]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800bd98:	2113      	movs	r1, #19
 800bd9a:	480c      	ldr	r0, [pc, #48]	@ (800bdcc <PEF_Compose_Zero_Current_Confirm_Cnf+0x7c>)
 800bd9c:	f7ff fa96 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800bda0:	4b09      	ldr	r3, [pc, #36]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bda2:	22b2      	movs	r2, #178	@ 0xb2
 800bda4:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x19; // Function + Message Type
 800bda6:	4b08      	ldr	r3, [pc, #32]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bda8:	2219      	movs	r2, #25
 800bdaa:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800bdac:	4b06      	ldr	r3, [pc, #24]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800bdb2:	4b05      	ldr	r3, [pc, #20]	@ (800bdc8 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	771a      	strb	r2, [r3, #28]
    // Body
}
 800bdb8:	bf00      	nop
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	200020a2 	.word	0x200020a2
 800bdc0:	200022d8 	.word	0x200022d8
 800bdc4:	2000003c 	.word	0x2000003c
 800bdc8:	20001fa8 	.word	0x20001fa8
 800bdcc:	20000034 	.word	0x20000034

0800bdd0 <PEF_Compose_Voltage_Verification_Req>:



void PEF_Compose_Voltage_Verification_Req(uint16_t output_voltage){
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	80fb      	strh	r3, [r7, #6]
	myEVSE.output_voltage = output_voltage;
 800bdda:	4a22      	ldr	r2, [pc, #136]	@ (800be64 <PEF_Compose_Voltage_Verification_Req+0x94>)
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	8113      	strh	r3, [r2, #8]

	/* Voltage Verification Request */
    eth_tx_size = 60;
 800bde0:	4b21      	ldr	r3, [pc, #132]	@ (800be68 <PEF_Compose_Voltage_Verification_Req+0x98>)
 800bde2:	223c      	movs	r2, #60	@ 0x3c
 800bde4:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800bde6:	f7ff fa9d 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800bdea:	2100      	movs	r1, #0
 800bdec:	481f      	ldr	r0, [pc, #124]	@ (800be6c <PEF_Compose_Voltage_Verification_Req+0x9c>)
 800bdee:	f7ff fa6d 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800bdf2:	2106      	movs	r1, #6
 800bdf4:	481e      	ldr	r0, [pc, #120]	@ (800be70 <PEF_Compose_Voltage_Verification_Req+0xa0>)
 800bdf6:	f7ff fa69 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800bdfa:	4b1e      	ldr	r3, [pc, #120]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800bdfc:	2288      	movs	r2, #136	@ 0x88
 800bdfe:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800be00:	4b1c      	ldr	r3, [pc, #112]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be02:	22e1      	movs	r2, #225	@ 0xe1
 800be04:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800be06:	4b1b      	ldr	r3, [pc, #108]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be08:	2201      	movs	r2, #1
 800be0a:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800be0c:	4b19      	ldr	r3, [pc, #100]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be0e:	22e0      	movs	r2, #224	@ 0xe0
 800be10:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800be12:	4b18      	ldr	r3, [pc, #96]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be14:	2260      	movs	r2, #96	@ 0x60
 800be16:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800be18:	4b16      	ldr	r3, [pc, #88]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800be1e:	4b15      	ldr	r3, [pc, #84]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be20:	2200      	movs	r2, #0
 800be22:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800be24:	2113      	movs	r1, #19
 800be26:	4814      	ldr	r0, [pc, #80]	@ (800be78 <PEF_Compose_Voltage_Verification_Req+0xa8>)
 800be28:	f7ff fa50 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800be2c:	4b11      	ldr	r3, [pc, #68]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be2e:	22b2      	movs	r2, #178	@ 0xb2
 800be30:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x1C; // Function + Message Type
 800be32:	4b10      	ldr	r3, [pc, #64]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be34:	221c      	movs	r2, #28
 800be36:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800be38:	4b0e      	ldr	r3, [pc, #56]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800be3e:	4b0d      	ldr	r3, [pc, #52]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be40:	2200      	movs	r2, #0
 800be42:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = (myEVSE.output_voltage >> 8);
 800be44:	4b07      	ldr	r3, [pc, #28]	@ (800be64 <PEF_Compose_Voltage_Verification_Req+0x94>)
 800be46:	891b      	ldrh	r3, [r3, #8]
 800be48:	0a1b      	lsrs	r3, r3, #8
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	4b09      	ldr	r3, [pc, #36]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be50:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = myEVSE.output_voltage;
 800be52:	4b04      	ldr	r3, [pc, #16]	@ (800be64 <PEF_Compose_Voltage_Verification_Req+0x94>)
 800be54:	891b      	ldrh	r3, [r3, #8]
 800be56:	b2da      	uxtb	r2, r3
 800be58:	4b06      	ldr	r3, [pc, #24]	@ (800be74 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 800be5a:	779a      	strb	r2, [r3, #30]
}
 800be5c:	bf00      	nop
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	200022f0 	.word	0x200022f0
 800be68:	200020a2 	.word	0x200020a2
 800be6c:	200022d8 	.word	0x200022d8
 800be70:	20000044 	.word	0x20000044
 800be74:	20001fa8 	.word	0x20001fa8
 800be78:	20000034 	.word	0x20000034

0800be7c <PEF_Compose_Voltage_Verification_Cnf>:

void PEF_Compose_Voltage_Verification_Cnf(void){
 800be7c:	b580      	push	{r7, lr}
 800be7e:	af00      	add	r7, sp, #0
	/* Voltage Verification Confirm */
    eth_tx_size = 60;
 800be80:	4b19      	ldr	r3, [pc, #100]	@ (800bee8 <PEF_Compose_Voltage_Verification_Cnf+0x6c>)
 800be82:	223c      	movs	r2, #60	@ 0x3c
 800be84:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800be86:	f7ff fa4d 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800be8a:	2100      	movs	r1, #0
 800be8c:	4817      	ldr	r0, [pc, #92]	@ (800beec <PEF_Compose_Voltage_Verification_Cnf+0x70>)
 800be8e:	f7ff fa1d 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800be92:	2106      	movs	r1, #6
 800be94:	4816      	ldr	r0, [pc, #88]	@ (800bef0 <PEF_Compose_Voltage_Verification_Cnf+0x74>)
 800be96:	f7ff fa19 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800be9a:	4b16      	ldr	r3, [pc, #88]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800be9c:	2288      	movs	r2, #136	@ 0x88
 800be9e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800bea0:	4b14      	ldr	r3, [pc, #80]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800bea2:	22e1      	movs	r2, #225	@ 0xe1
 800bea4:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800bea6:	4b13      	ldr	r3, [pc, #76]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800bea8:	2201      	movs	r2, #1
 800beaa:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800beac:	4b11      	ldr	r3, [pc, #68]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800beae:	22e0      	movs	r2, #224	@ 0xe0
 800beb0:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800beb2:	4b10      	ldr	r3, [pc, #64]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800beb4:	2260      	movs	r2, #96	@ 0x60
 800beb6:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800beb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800beba:	2200      	movs	r2, #0
 800bebc:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800bebe:	4b0d      	ldr	r3, [pc, #52]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800bec4:	2113      	movs	r1, #19
 800bec6:	480c      	ldr	r0, [pc, #48]	@ (800bef8 <PEF_Compose_Voltage_Verification_Cnf+0x7c>)
 800bec8:	f7ff fa00 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800becc:	4b09      	ldr	r3, [pc, #36]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800bece:	22b2      	movs	r2, #178	@ 0xb2
 800bed0:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x1D; // Function + Message Type
 800bed2:	4b08      	ldr	r3, [pc, #32]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800bed4:	221d      	movs	r2, #29
 800bed6:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800bed8:	4b06      	ldr	r3, [pc, #24]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800beda:	2200      	movs	r2, #0
 800bedc:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800bede:	4b05      	ldr	r3, [pc, #20]	@ (800bef4 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	771a      	strb	r2, [r3, #28]
    // Body
}
 800bee4:	bf00      	nop
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	200020a2 	.word	0x200020a2
 800beec:	200022d8 	.word	0x200022d8
 800bef0:	2000003c 	.word	0x2000003c
 800bef4:	20001fa8 	.word	0x20001fa8
 800bef8:	20000034 	.word	0x20000034

0800befc <PEF_Compose_Connector_Unlock_Req>:

void PEF_Evaluate_Voltage_Verification_Cnf(void){
	myEVSE.output_voltage = (eth_rx_buffer[29] << 8) + eth_rx_buffer[30];
}

void PEF_Compose_Connector_Unlock_Req(void){
 800befc:	b580      	push	{r7, lr}
 800befe:	af00      	add	r7, sp, #0
	/* Connector Unlock Request */
    eth_tx_size = 60;
 800bf00:	4b19      	ldr	r3, [pc, #100]	@ (800bf68 <PEF_Compose_Connector_Unlock_Req+0x6c>)
 800bf02:	223c      	movs	r2, #60	@ 0x3c
 800bf04:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800bf06:	f7ff fa0d 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4817      	ldr	r0, [pc, #92]	@ (800bf6c <PEF_Compose_Connector_Unlock_Req+0x70>)
 800bf0e:	f7ff f9dd 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800bf12:	2106      	movs	r1, #6
 800bf14:	4816      	ldr	r0, [pc, #88]	@ (800bf70 <PEF_Compose_Connector_Unlock_Req+0x74>)
 800bf16:	f7ff f9d9 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800bf1a:	4b16      	ldr	r3, [pc, #88]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf1c:	2288      	movs	r2, #136	@ 0x88
 800bf1e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800bf20:	4b14      	ldr	r3, [pc, #80]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf22:	22e1      	movs	r2, #225	@ 0xe1
 800bf24:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800bf26:	4b13      	ldr	r3, [pc, #76]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf28:	2201      	movs	r2, #1
 800bf2a:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800bf2c:	4b11      	ldr	r3, [pc, #68]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf2e:	22e0      	movs	r2, #224	@ 0xe0
 800bf30:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800bf32:	4b10      	ldr	r3, [pc, #64]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf34:	2260      	movs	r2, #96	@ 0x60
 800bf36:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800bf38:	4b0e      	ldr	r3, [pc, #56]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800bf44:	2113      	movs	r1, #19
 800bf46:	480c      	ldr	r0, [pc, #48]	@ (800bf78 <PEF_Compose_Connector_Unlock_Req+0x7c>)
 800bf48:	f7ff f9c0 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800bf4c:	4b09      	ldr	r3, [pc, #36]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf4e:	22b2      	movs	r2, #178	@ 0xb2
 800bf50:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x20; // Function + Message Type
 800bf52:	4b08      	ldr	r3, [pc, #32]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf54:	2220      	movs	r2, #32
 800bf56:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800bf58:	4b06      	ldr	r3, [pc, #24]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800bf5e:	4b05      	ldr	r3, [pc, #20]	@ (800bf74 <PEF_Compose_Connector_Unlock_Req+0x78>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	771a      	strb	r2, [r3, #28]
    // Body
}
 800bf64:	bf00      	nop
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	200020a2 	.word	0x200020a2
 800bf6c:	200022d8 	.word	0x200022d8
 800bf70:	20000044 	.word	0x20000044
 800bf74:	20001fa8 	.word	0x20001fa8
 800bf78:	20000034 	.word	0x20000034

0800bf7c <PEF_Compose_Connector_Unlock_Cnf>:

void PEF_Compose_Connector_Unlock_Cnf(void){
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
	/* Connector Unlock Confirm */
    eth_tx_size = 60;
 800bf80:	4b19      	ldr	r3, [pc, #100]	@ (800bfe8 <PEF_Compose_Connector_Unlock_Cnf+0x6c>)
 800bf82:	223c      	movs	r2, #60	@ 0x3c
 800bf84:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800bf86:	f7ff f9cd 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	4817      	ldr	r0, [pc, #92]	@ (800bfec <PEF_Compose_Connector_Unlock_Cnf+0x70>)
 800bf8e:	f7ff f99d 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800bf92:	2106      	movs	r1, #6
 800bf94:	4816      	ldr	r0, [pc, #88]	@ (800bff0 <PEF_Compose_Connector_Unlock_Cnf+0x74>)
 800bf96:	f7ff f999 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800bf9a:	4b16      	ldr	r3, [pc, #88]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bf9c:	2288      	movs	r2, #136	@ 0x88
 800bf9e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800bfa0:	4b14      	ldr	r3, [pc, #80]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfa2:	22e1      	movs	r2, #225	@ 0xe1
 800bfa4:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800bfa6:	4b13      	ldr	r3, [pc, #76]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800bfac:	4b11      	ldr	r3, [pc, #68]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfae:	22e0      	movs	r2, #224	@ 0xe0
 800bfb0:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800bfb2:	4b10      	ldr	r3, [pc, #64]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfb4:	2260      	movs	r2, #96	@ 0x60
 800bfb6:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800bfb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800bfc4:	2113      	movs	r1, #19
 800bfc6:	480c      	ldr	r0, [pc, #48]	@ (800bff8 <PEF_Compose_Connector_Unlock_Cnf+0x7c>)
 800bfc8:	f7ff f980 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800bfcc:	4b09      	ldr	r3, [pc, #36]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfce:	22b2      	movs	r2, #178	@ 0xb2
 800bfd0:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x21; // Function + Message Type
 800bfd2:	4b08      	ldr	r3, [pc, #32]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfd4:	2221      	movs	r2, #33	@ 0x21
 800bfd6:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800bfd8:	4b06      	ldr	r3, [pc, #24]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800bfde:	4b05      	ldr	r3, [pc, #20]	@ (800bff4 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	771a      	strb	r2, [r3, #28]
    // Body
}
 800bfe4:	bf00      	nop
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	200020a2 	.word	0x200020a2
 800bfec:	200022d8 	.word	0x200022d8
 800bff0:	2000003c 	.word	0x2000003c
 800bff4:	20001fa8 	.word	0x20001fa8
 800bff8:	20000034 	.word	0x20000034

0800bffc <PEF_Compose_End_of_Charge_Req>:



void PEF_Compose_End_of_Charge_Req(void){
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
	/* End of Charge Request */
    eth_tx_size = 60;
 800c000:	4b19      	ldr	r3, [pc, #100]	@ (800c068 <PEF_Compose_End_of_Charge_Req+0x6c>)
 800c002:	223c      	movs	r2, #60	@ 0x3c
 800c004:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800c006:	f7ff f98d 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800c00a:	2100      	movs	r1, #0
 800c00c:	4817      	ldr	r0, [pc, #92]	@ (800c06c <PEF_Compose_End_of_Charge_Req+0x70>)
 800c00e:	f7ff f95d 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800c012:	2106      	movs	r1, #6
 800c014:	4816      	ldr	r0, [pc, #88]	@ (800c070 <PEF_Compose_End_of_Charge_Req+0x74>)
 800c016:	f7ff f959 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800c01a:	4b16      	ldr	r3, [pc, #88]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c01c:	2288      	movs	r2, #136	@ 0x88
 800c01e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800c020:	4b14      	ldr	r3, [pc, #80]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c022:	22e1      	movs	r2, #225	@ 0xe1
 800c024:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800c026:	4b13      	ldr	r3, [pc, #76]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c028:	2201      	movs	r2, #1
 800c02a:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800c02c:	4b11      	ldr	r3, [pc, #68]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c02e:	22e0      	movs	r2, #224	@ 0xe0
 800c030:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800c032:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c034:	2260      	movs	r2, #96	@ 0x60
 800c036:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800c038:	4b0e      	ldr	r3, [pc, #56]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c03a:	2200      	movs	r2, #0
 800c03c:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800c03e:	4b0d      	ldr	r3, [pc, #52]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c040:	2200      	movs	r2, #0
 800c042:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800c044:	2113      	movs	r1, #19
 800c046:	480c      	ldr	r0, [pc, #48]	@ (800c078 <PEF_Compose_End_of_Charge_Req+0x7c>)
 800c048:	f7ff f940 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800c04c:	4b09      	ldr	r3, [pc, #36]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c04e:	22b2      	movs	r2, #178	@ 0xb2
 800c050:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x24; // Function + Message Type
 800c052:	4b08      	ldr	r3, [pc, #32]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c054:	2224      	movs	r2, #36	@ 0x24
 800c056:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800c058:	4b06      	ldr	r3, [pc, #24]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800c05e:	4b05      	ldr	r3, [pc, #20]	@ (800c074 <PEF_Compose_End_of_Charge_Req+0x78>)
 800c060:	2200      	movs	r2, #0
 800c062:	771a      	strb	r2, [r3, #28]
    // Body
}
 800c064:	bf00      	nop
 800c066:	bd80      	pop	{r7, pc}
 800c068:	200020a2 	.word	0x200020a2
 800c06c:	200022d8 	.word	0x200022d8
 800c070:	2000003c 	.word	0x2000003c
 800c074:	20001fa8 	.word	0x20001fa8
 800c078:	20000034 	.word	0x20000034

0800c07c <PEF_Compose_End_of_Charge_Cnf>:

void PEF_Compose_End_of_Charge_Cnf(void){
 800c07c:	b580      	push	{r7, lr}
 800c07e:	af00      	add	r7, sp, #0
	/* End of Charge Request */
    eth_tx_size = 60;
 800c080:	4b19      	ldr	r3, [pc, #100]	@ (800c0e8 <PEF_Compose_End_of_Charge_Cnf+0x6c>)
 800c082:	223c      	movs	r2, #60	@ 0x3c
 800c084:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800c086:	f7ff f94d 	bl	800b324 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800c08a:	2100      	movs	r1, #0
 800c08c:	4817      	ldr	r0, [pc, #92]	@ (800c0ec <PEF_Compose_End_of_Charge_Cnf+0x70>)
 800c08e:	f7ff f91d 	bl	800b2cc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800c092:	2106      	movs	r1, #6
 800c094:	4816      	ldr	r0, [pc, #88]	@ (800c0f0 <PEF_Compose_End_of_Charge_Cnf+0x74>)
 800c096:	f7ff f919 	bl	800b2cc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800c09a:	4b16      	ldr	r3, [pc, #88]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c09c:	2288      	movs	r2, #136	@ 0x88
 800c09e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800c0a0:	4b14      	ldr	r3, [pc, #80]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0a2:	22e1      	movs	r2, #225	@ 0xe1
 800c0a4:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800c0a6:	4b13      	ldr	r3, [pc, #76]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800c0ac:	4b11      	ldr	r3, [pc, #68]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0ae:	22e0      	movs	r2, #224	@ 0xe0
 800c0b0:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800c0b2:	4b10      	ldr	r3, [pc, #64]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0b4:	2260      	movs	r2, #96	@ 0x60
 800c0b6:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800c0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800c0be:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800c0c4:	2113      	movs	r1, #19
 800c0c6:	480c      	ldr	r0, [pc, #48]	@ (800c0f8 <PEF_Compose_End_of_Charge_Cnf+0x7c>)
 800c0c8:	f7ff f900 	bl	800b2cc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 800c0cc:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0ce:	22b2      	movs	r2, #178	@ 0xb2
 800c0d0:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x25; // Function + Message Type
 800c0d2:	4b08      	ldr	r3, [pc, #32]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0d4:	2225      	movs	r2, #37	@ 0x25
 800c0d6:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800c0d8:	4b06      	ldr	r3, [pc, #24]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800c0de:	4b05      	ldr	r3, [pc, #20]	@ (800c0f4 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	771a      	strb	r2, [r3, #28]
    // Body
}
 800c0e4:	bf00      	nop
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	200020a2 	.word	0x200020a2
 800c0ec:	200022d8 	.word	0x200022d8
 800c0f0:	20000044 	.word	0x20000044
 800c0f4:	20001fa8 	.word	0x20001fa8
 800c0f8:	20000034 	.word	0x20000034

0800c0fc <PEF_Get_Sequence_State>:

uint16_t PEF_Get_Sequence_State(void){
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
	uint16_t message_type;
	message_type = (eth_rx_buffer[25] << 8) + eth_rx_buffer[26];
 800c102:	4b07      	ldr	r3, [pc, #28]	@ (800c120 <PEF_Get_Sequence_State+0x24>)
 800c104:	7e5b      	ldrb	r3, [r3, #25]
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	b29b      	uxth	r3, r3
 800c10a:	4a05      	ldr	r2, [pc, #20]	@ (800c120 <PEF_Get_Sequence_State+0x24>)
 800c10c:	7e92      	ldrb	r2, [r2, #26]
 800c10e:	4413      	add	r3, r2
 800c110:	80fb      	strh	r3, [r7, #6]
	return message_type;
 800c112:	88fb      	ldrh	r3, [r7, #6]
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	200020a4 	.word	0x200020a4

0800c124 <PEF_Handle_Initialization_Req>:

void PEF_Handle_Initialization_Req(void){
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received INITIALIZATION.REQ ");
 800c128:	4906      	ldr	r1, [pc, #24]	@ (800c144 <PEF_Handle_Initialization_Req+0x20>)
 800c12a:	4807      	ldr	r0, [pc, #28]	@ (800c148 <PEF_Handle_Initialization_Req+0x24>)
 800c12c:	f000 fb70 	bl	800c810 <siprintf>
	Serial_Print();
 800c130:	f7f4 fc12 	bl	8000958 <Serial_Print>

	PEF_Evaluate_Initialization();
 800c134:	f7ff f966 	bl	800b404 <PEF_Evaluate_Initialization>
	PEF_Compose_Initialization_Cnf();
 800c138:	f7ff f924 	bl	800b384 <PEF_Compose_Initialization_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c13c:	f7fe fe54 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c140:	bf00      	nop
 800c142:	bd80      	pop	{r7, pc}
 800c144:	0800dd48 	.word	0x0800dd48
 800c148:	20000708 	.word	0x20000708

0800c14c <PEF_Handle_Initialization_Cnf>:

void PEF_Handle_Initialization_Cnf(void){
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received INITIALIZATION.CNF ");
 800c150:	4906      	ldr	r1, [pc, #24]	@ (800c16c <PEF_Handle_Initialization_Cnf+0x20>)
 800c152:	4807      	ldr	r0, [pc, #28]	@ (800c170 <PEF_Handle_Initialization_Cnf+0x24>)
 800c154:	f000 fb5c 	bl	800c810 <siprintf>
	Serial_Print();
 800c158:	f7f4 fbfe 	bl	8000958 <Serial_Print>

	PEF_Evaluate_Initialization();
 800c15c:	f7ff f952 	bl	800b404 <PEF_Evaluate_Initialization>
	PEF_Compose_Parameter_Exchange_Req();
 800c160:	f7ff f962 	bl	800b428 <PEF_Compose_Parameter_Exchange_Req>
	SPI_QCA7000_Send_Eth_Frame();
 800c164:	f7fe fe40 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c168:	bf00      	nop
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	0800dd6c 	.word	0x0800dd6c
 800c170:	20000708 	.word	0x20000708

0800c174 <PEF_Handle_Parameter_Exchange_Req>:

void PEF_Handle_Parameter_Exchange_Req(void){
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received PARAMETER_EXCHANGE.REQ ");
 800c178:	4906      	ldr	r1, [pc, #24]	@ (800c194 <PEF_Handle_Parameter_Exchange_Req+0x20>)
 800c17a:	4807      	ldr	r0, [pc, #28]	@ (800c198 <PEF_Handle_Parameter_Exchange_Req+0x24>)
 800c17c:	f000 fb48 	bl	800c810 <siprintf>
	Serial_Print();
 800c180:	f7f4 fbea 	bl	8000958 <Serial_Print>

	PEF_Evaluate_Parameter_Exchange_Req();
 800c184:	f7ff fa96 	bl	800b6b4 <PEF_Evaluate_Parameter_Exchange_Req>
	PEF_Compose_Parameter_Exchange_Res();
 800c188:	f7ff f9e2 	bl	800b550 <PEF_Compose_Parameter_Exchange_Res>
	SPI_QCA7000_Send_Eth_Frame();
 800c18c:	f7fe fe2c 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c190:	bf00      	nop
 800c192:	bd80      	pop	{r7, pc}
 800c194:	0800dd90 	.word	0x0800dd90
 800c198:	20000708 	.word	0x20000708

0800c19c <PEF_Handle_Parameter_Exchange_Res>:

void PEF_Handle_Parameter_Exchange_Res(void){
 800c19c:	b580      	push	{r7, lr}
 800c19e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received PARAMETER_EXCHANGE.RES ");
 800c1a0:	4906      	ldr	r1, [pc, #24]	@ (800c1bc <PEF_Handle_Parameter_Exchange_Res+0x20>)
 800c1a2:	4807      	ldr	r0, [pc, #28]	@ (800c1c0 <PEF_Handle_Parameter_Exchange_Res+0x24>)
 800c1a4:	f000 fb34 	bl	800c810 <siprintf>
	Serial_Print();
 800c1a8:	f7f4 fbd6 	bl	8000958 <Serial_Print>

	PEF_Evaluate_Parameter_Exchange_Res();
 800c1ac:	f7ff fac2 	bl	800b734 <PEF_Evaluate_Parameter_Exchange_Res>
	PEF_Compose_Parameter_Exchange_Cnf();
 800c1b0:	f7ff fa40 	bl	800b634 <PEF_Compose_Parameter_Exchange_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c1b4:	f7fe fe18 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c1b8:	bf00      	nop
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	0800ddb8 	.word	0x0800ddb8
 800c1c0:	20000708 	.word	0x20000708

0800c1c4 <PEF_Handle_Parameter_Exchange_Cnf>:

void PEF_Handle_Parameter_Exchange_Cnf(void){
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received PARAMETER_EXCHANGE.CNF ");
 800c1c8:	4903      	ldr	r1, [pc, #12]	@ (800c1d8 <PEF_Handle_Parameter_Exchange_Cnf+0x14>)
 800c1ca:	4804      	ldr	r0, [pc, #16]	@ (800c1dc <PEF_Handle_Parameter_Exchange_Cnf+0x18>)
 800c1cc:	f000 fb20 	bl	800c810 <siprintf>
	Serial_Print();
 800c1d0:	f7f4 fbc2 	bl	8000958 <Serial_Print>
}
 800c1d4:	bf00      	nop
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	0800dde0 	.word	0x0800dde0
 800c1dc:	20000708 	.word	0x20000708

0800c1e0 <PEF_Handle_Connector_Lock_Req>:

void PEF_Handle_Connector_Lock_Req(void){
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_LOCK.REQ ");
 800c1e4:	4905      	ldr	r1, [pc, #20]	@ (800c1fc <PEF_Handle_Connector_Lock_Req+0x1c>)
 800c1e6:	4806      	ldr	r0, [pc, #24]	@ (800c200 <PEF_Handle_Connector_Lock_Req+0x20>)
 800c1e8:	f000 fb12 	bl	800c810 <siprintf>
	Serial_Print();
 800c1ec:	f7f4 fbb4 	bl	8000958 <Serial_Print>

	PEF_Compose_Connector_Lock_Cnf();
 800c1f0:	f7ff faca 	bl	800b788 <PEF_Compose_Connector_Lock_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c1f4:	f7fe fdf8 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c1f8:	bf00      	nop
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	0800de08 	.word	0x0800de08
 800c200:	20000708 	.word	0x20000708

0800c204 <PEF_Handle_Connector_Lock_Cnf>:

void PEF_Handle_Connector_Lock_Cnf(void){
 800c204:	b580      	push	{r7, lr}
 800c206:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_LOCK.CNF ");
 800c208:	4903      	ldr	r1, [pc, #12]	@ (800c218 <PEF_Handle_Connector_Lock_Cnf+0x14>)
 800c20a:	4804      	ldr	r0, [pc, #16]	@ (800c21c <PEF_Handle_Connector_Lock_Cnf+0x18>)
 800c20c:	f000 fb00 	bl	800c810 <siprintf>
	Serial_Print();
 800c210:	f7f4 fba2 	bl	8000958 <Serial_Print>
}
 800c214:	bf00      	nop
 800c216:	bd80      	pop	{r7, pc}
 800c218:	0800de2c 	.word	0x0800de2c
 800c21c:	20000708 	.word	0x20000708

0800c220 <PEF_Handle_Contactor_Close_Req>:

void PEF_Handle_Contactor_Close_Req(void){
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONTACTOR_CLOSE.REQ ");
 800c224:	4905      	ldr	r1, [pc, #20]	@ (800c23c <PEF_Handle_Contactor_Close_Req+0x1c>)
 800c226:	4806      	ldr	r0, [pc, #24]	@ (800c240 <PEF_Handle_Contactor_Close_Req+0x20>)
 800c228:	f000 faf2 	bl	800c810 <siprintf>
	Serial_Print();
 800c22c:	f7f4 fb94 	bl	8000958 <Serial_Print>

	PEF_Compose_Contactor_Close_Cnf();
 800c230:	f7ff fb2a 	bl	800b888 <PEF_Compose_Contactor_Close_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c234:	f7fe fdd8 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>

	//	PEF_Compose_Charging_Current_Demand_Req(current_request, system_fault, shift_pos, current_battery);
	//	SPI_QCA7000_Send_Eth_Frame();
}
 800c238:	bf00      	nop
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	0800de50 	.word	0x0800de50
 800c240:	20000708 	.word	0x20000708

0800c244 <PEF_Handle_Contactor_Close_Cnf>:

void PEF_Handle_Contactor_Close_Cnf(void){
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONTACTOR_CLOSE.CNF ");
 800c248:	4903      	ldr	r1, [pc, #12]	@ (800c258 <PEF_Handle_Contactor_Close_Cnf+0x14>)
 800c24a:	4804      	ldr	r0, [pc, #16]	@ (800c25c <PEF_Handle_Contactor_Close_Cnf+0x18>)
 800c24c:	f000 fae0 	bl	800c810 <siprintf>
	Serial_Print();
 800c250:	f7f4 fb82 	bl	8000958 <Serial_Print>
}
 800c254:	bf00      	nop
 800c256:	bd80      	pop	{r7, pc}
 800c258:	0800de74 	.word	0x0800de74
 800c25c:	20000708 	.word	0x20000708

0800c260 <PEF_Handle_Charging_Current_Demand_Req>:

void PEF_Handle_Charging_Current_Demand_Req(void){
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af02      	add	r7, sp, #8
	sprintf(serial_output_buffer, "[PLC] received CHARGING_CURRENT_DEMAND.REQ ");
 800c266:	4910      	ldr	r1, [pc, #64]	@ (800c2a8 <PEF_Handle_Charging_Current_Demand_Req+0x48>)
 800c268:	4810      	ldr	r0, [pc, #64]	@ (800c2ac <PEF_Handle_Charging_Current_Demand_Req+0x4c>)
 800c26a:	f000 fad1 	bl	800c810 <siprintf>
	Serial_Print();
 800c26e:	f7f4 fb73 	bl	8000958 <Serial_Print>

	PEF_Evaluate_Charging_Current_Demand_Req();
 800c272:	f7ff fbe3 	bl	800ba3c <PEF_Evaluate_Charging_Current_Demand_Req>
	uint16_t a = 0x0123;
 800c276:	f240 1323 	movw	r3, #291	@ 0x123
 800c27a:	80fb      	strh	r3, [r7, #6]
	uint16_t b = 0x0050;
 800c27c:	2350      	movs	r3, #80	@ 0x50
 800c27e:	80bb      	strh	r3, [r7, #4]
	uint16_t c = 0x0280;
 800c280:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800c284:	807b      	strh	r3, [r7, #2]
	PEF_Compose_Charging_Current_Demand_Res( 0xAA, a, b, c, 0xAA, 0xAA);
 800c286:	887b      	ldrh	r3, [r7, #2]
 800c288:	88ba      	ldrh	r2, [r7, #4]
 800c28a:	88f9      	ldrh	r1, [r7, #6]
 800c28c:	20aa      	movs	r0, #170	@ 0xaa
 800c28e:	9001      	str	r0, [sp, #4]
 800c290:	20aa      	movs	r0, #170	@ 0xaa
 800c292:	9000      	str	r0, [sp, #0]
 800c294:	20aa      	movs	r0, #170	@ 0xaa
 800c296:	f7ff fb37 	bl	800b908 <PEF_Compose_Charging_Current_Demand_Res>
	SPI_QCA7000_Send_Eth_Frame();
 800c29a:	f7fe fda5 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c29e:	bf00      	nop
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	0800de98 	.word	0x0800de98
 800c2ac:	20000708 	.word	0x20000708

0800c2b0 <PEF_Handle_Charging_Current_Demand_Res>:

void PEF_Handle_Charging_Current_Demand_Res(void){
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CHARGING_CURRENT_DEMAND.RES ");
 800c2b4:	4904      	ldr	r1, [pc, #16]	@ (800c2c8 <PEF_Handle_Charging_Current_Demand_Res+0x18>)
 800c2b6:	4805      	ldr	r0, [pc, #20]	@ (800c2cc <PEF_Handle_Charging_Current_Demand_Res+0x1c>)
 800c2b8:	f000 faaa 	bl	800c810 <siprintf>
	Serial_Print();
 800c2bc:	f7f4 fb4c 	bl	8000958 <Serial_Print>

	PEF_Evaluate_Charging_Current_Demand_Res();
 800c2c0:	f7ff fbe0 	bl	800ba84 <PEF_Evaluate_Charging_Current_Demand_Res>
}
 800c2c4:	bf00      	nop
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	0800dec4 	.word	0x0800dec4
 800c2cc:	20000708 	.word	0x20000708

0800c2d0 <PEF_Handle_Current_Suppression_Req>:


void PEF_Handle_Current_Suppression_Req(void){
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CURRENT_SUPPRESSION.REQ ");
 800c2d6:	490b      	ldr	r1, [pc, #44]	@ (800c304 <PEF_Handle_Current_Suppression_Req+0x34>)
 800c2d8:	480b      	ldr	r0, [pc, #44]	@ (800c308 <PEF_Handle_Current_Suppression_Req+0x38>)
 800c2da:	f000 fa99 	bl	800c810 <siprintf>
	Serial_Print();
 800c2de:	f7f4 fb3b 	bl	8000958 <Serial_Print>

	uint16_t a = 0x0123;
 800c2e2:	f240 1323 	movw	r3, #291	@ 0x123
 800c2e6:	80fb      	strh	r3, [r7, #6]
	uint16_t b = 0x0050;
 800c2e8:	2350      	movs	r3, #80	@ 0x50
 800c2ea:	80bb      	strh	r3, [r7, #4]
	PEF_Compose_Current_Suppression_Res(0xAA, 0xAA, a, b);
 800c2ec:	88bb      	ldrh	r3, [r7, #4]
 800c2ee:	88fa      	ldrh	r2, [r7, #6]
 800c2f0:	21aa      	movs	r1, #170	@ 0xaa
 800c2f2:	20aa      	movs	r0, #170	@ 0xaa
 800c2f4:	f7ff fc02 	bl	800bafc <PEF_Compose_Current_Suppression_Res>
	SPI_QCA7000_Send_Eth_Frame();
 800c2f8:	f7fe fd76 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	0800def0 	.word	0x0800def0
 800c308:	20000708 	.word	0x20000708

0800c30c <PEF_Handle_Current_Suppression_Res>:

void PEF_Handle_Current_Suppression_Res(void){
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CURRENT_SUPPRESSION.RES ");
 800c310:	4906      	ldr	r1, [pc, #24]	@ (800c32c <PEF_Handle_Current_Suppression_Res+0x20>)
 800c312:	4807      	ldr	r0, [pc, #28]	@ (800c330 <PEF_Handle_Current_Suppression_Res+0x24>)
 800c314:	f000 fa7c 	bl	800c810 <siprintf>
	Serial_Print();
 800c318:	f7f4 fb1e 	bl	8000958 <Serial_Print>

	PEF_Evaluate_Current_Suppression_Res();
 800c31c:	f7ff fcae 	bl	800bc7c <PEF_Evaluate_Current_Suppression_Res>
	PEF_Compose_Current_Suppression_Cnf();
 800c320:	f7ff fc6c 	bl	800bbfc <PEF_Compose_Current_Suppression_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c324:	f7fe fd60 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c328:	bf00      	nop
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	0800df18 	.word	0x0800df18
 800c330:	20000708 	.word	0x20000708

0800c334 <PEF_Handle_Current_Suppression_Cnf>:

void PEF_Handle_Current_Suppression_Cnf(void){
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CURRENT_SUPPRESSION.CNF ");
 800c338:	4905      	ldr	r1, [pc, #20]	@ (800c350 <PEF_Handle_Current_Suppression_Cnf+0x1c>)
 800c33a:	4806      	ldr	r0, [pc, #24]	@ (800c354 <PEF_Handle_Current_Suppression_Cnf+0x20>)
 800c33c:	f000 fa68 	bl	800c810 <siprintf>
	Serial_Print();
 800c340:	f7f4 fb0a 	bl	8000958 <Serial_Print>

	PEF_Compose_Zero_Current_Confirm_Req();
 800c344:	f7ff fcc4 	bl	800bcd0 <PEF_Compose_Zero_Current_Confirm_Req>
	SPI_QCA7000_Send_Eth_Frame();
 800c348:	f7fe fd4e 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c34c:	bf00      	nop
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	0800df40 	.word	0x0800df40
 800c354:	20000708 	.word	0x20000708

0800c358 <PEF_Handle_Zero_CURRENT_CONFIRM_Req>:

void PEF_Handle_Zero_CURRENT_CONFIRM_Req(void){
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received ZERO_CURRENT_CONFIRM.REQ ");
 800c35c:	4905      	ldr	r1, [pc, #20]	@ (800c374 <PEF_Handle_Zero_CURRENT_CONFIRM_Req+0x1c>)
 800c35e:	4806      	ldr	r0, [pc, #24]	@ (800c378 <PEF_Handle_Zero_CURRENT_CONFIRM_Req+0x20>)
 800c360:	f000 fa56 	bl	800c810 <siprintf>
	Serial_Print();
 800c364:	f7f4 faf8 	bl	8000958 <Serial_Print>

	PEF_Compose_Zero_Current_Confirm_Cnf();
 800c368:	f7ff fcf2 	bl	800bd50 <PEF_Compose_Zero_Current_Confirm_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c36c:	f7fe fd3c 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c370:	bf00      	nop
 800c372:	bd80      	pop	{r7, pc}
 800c374:	0800df68 	.word	0x0800df68
 800c378:	20000708 	.word	0x20000708

0800c37c <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf>:

void PEF_Handle_Zero_CURRENT_CONFIRM_Cnf(void){
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received ZERO_CURRENT_CONFIRM.CNF ");
 800c382:	4909      	ldr	r1, [pc, #36]	@ (800c3a8 <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf+0x2c>)
 800c384:	4809      	ldr	r0, [pc, #36]	@ (800c3ac <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf+0x30>)
 800c386:	f000 fa43 	bl	800c810 <siprintf>
	Serial_Print();
 800c38a:	f7f4 fae5 	bl	8000958 <Serial_Print>

	uint16_t vol = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	80fb      	strh	r3, [r7, #6]
	PEF_Compose_Voltage_Verification_Req(vol);
 800c392:	88fb      	ldrh	r3, [r7, #6]
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff fd1b 	bl	800bdd0 <PEF_Compose_Voltage_Verification_Req>
	SPI_QCA7000_Send_Eth_Frame();
 800c39a:	f7fe fd25 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c39e:	bf00      	nop
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800df94 	.word	0x0800df94
 800c3ac:	20000708 	.word	0x20000708

0800c3b0 <PEF_Handle_Voltage_Verification_Req>:

void PEF_Handle_Voltage_Verification_Req(void){
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received VOLTAGE_VERIFICATION.REQ ");
 800c3b4:	4905      	ldr	r1, [pc, #20]	@ (800c3cc <PEF_Handle_Voltage_Verification_Req+0x1c>)
 800c3b6:	4806      	ldr	r0, [pc, #24]	@ (800c3d0 <PEF_Handle_Voltage_Verification_Req+0x20>)
 800c3b8:	f000 fa2a 	bl	800c810 <siprintf>
	Serial_Print();
 800c3bc:	f7f4 facc 	bl	8000958 <Serial_Print>

	PEF_Compose_Voltage_Verification_Cnf();
 800c3c0:	f7ff fd5c 	bl	800be7c <PEF_Compose_Voltage_Verification_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c3c4:	f7fe fd10 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c3c8:	bf00      	nop
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	0800dfc0 	.word	0x0800dfc0
 800c3d0:	20000708 	.word	0x20000708

0800c3d4 <PEF_Handle_Voltage_Verification_Cnf>:

void PEF_Handle_Voltage_Verification_Cnf(void){
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received VOLTAGE_VERIFICATION.CNF ");
 800c3d8:	4905      	ldr	r1, [pc, #20]	@ (800c3f0 <PEF_Handle_Voltage_Verification_Cnf+0x1c>)
 800c3da:	4806      	ldr	r0, [pc, #24]	@ (800c3f4 <PEF_Handle_Voltage_Verification_Cnf+0x20>)
 800c3dc:	f000 fa18 	bl	800c810 <siprintf>
	Serial_Print();
 800c3e0:	f7f4 faba 	bl	8000958 <Serial_Print>

	PEF_Compose_Connector_Unlock_Req();
 800c3e4:	f7ff fd8a 	bl	800befc <PEF_Compose_Connector_Unlock_Req>
	SPI_QCA7000_Send_Eth_Frame();
 800c3e8:	f7fe fcfe 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c3ec:	bf00      	nop
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	0800dfec 	.word	0x0800dfec
 800c3f4:	20000708 	.word	0x20000708

0800c3f8 <PEF_Handle_Connector_Unlock_Req>:

void PEF_Handle_Connector_Unlock_Req(void){
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_UNLOCK.REQ ");
 800c3fc:	4905      	ldr	r1, [pc, #20]	@ (800c414 <PEF_Handle_Connector_Unlock_Req+0x1c>)
 800c3fe:	4806      	ldr	r0, [pc, #24]	@ (800c418 <PEF_Handle_Connector_Unlock_Req+0x20>)
 800c400:	f000 fa06 	bl	800c810 <siprintf>
	Serial_Print();
 800c404:	f7f4 faa8 	bl	8000958 <Serial_Print>

	PEF_Compose_Connector_Unlock_Cnf();
 800c408:	f7ff fdb8 	bl	800bf7c <PEF_Compose_Connector_Unlock_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c40c:	f7fe fcec 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c410:	bf00      	nop
 800c412:	bd80      	pop	{r7, pc}
 800c414:	0800e018 	.word	0x0800e018
 800c418:	20000708 	.word	0x20000708

0800c41c <PEF_Handle_Connector_Unlock_Cnf>:

void PEF_Handle_Connector_Unlock_Cnf(void){
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_UNLOCK.CNF ");
 800c420:	4905      	ldr	r1, [pc, #20]	@ (800c438 <PEF_Handle_Connector_Unlock_Cnf+0x1c>)
 800c422:	4806      	ldr	r0, [pc, #24]	@ (800c43c <PEF_Handle_Connector_Unlock_Cnf+0x20>)
 800c424:	f000 f9f4 	bl	800c810 <siprintf>
	Serial_Print();
 800c428:	f7f4 fa96 	bl	8000958 <Serial_Print>

	PEF_Compose_End_of_Charge_Req();
 800c42c:	f7ff fde6 	bl	800bffc <PEF_Compose_End_of_Charge_Req>
	SPI_QCA7000_Send_Eth_Frame();
 800c430:	f7fe fcda 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c434:	bf00      	nop
 800c436:	bd80      	pop	{r7, pc}
 800c438:	0800e040 	.word	0x0800e040
 800c43c:	20000708 	.word	0x20000708

0800c440 <PEF_Handle_End_of_Charge_Req>:

void PEF_Handle_End_of_Charge_Req(void){
 800c440:	b580      	push	{r7, lr}
 800c442:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received END_OF_CHARGE.REQ ");
 800c444:	4905      	ldr	r1, [pc, #20]	@ (800c45c <PEF_Handle_End_of_Charge_Req+0x1c>)
 800c446:	4806      	ldr	r0, [pc, #24]	@ (800c460 <PEF_Handle_End_of_Charge_Req+0x20>)
 800c448:	f000 f9e2 	bl	800c810 <siprintf>
	Serial_Print();
 800c44c:	f7f4 fa84 	bl	8000958 <Serial_Print>

	PEF_Compose_End_of_Charge_Cnf();
 800c450:	f7ff fe14 	bl	800c07c <PEF_Compose_End_of_Charge_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 800c454:	f7fe fcc8 	bl	800ade8 <SPI_QCA7000_Send_Eth_Frame>
}
 800c458:	bf00      	nop
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	0800e068 	.word	0x0800e068
 800c460:	20000708 	.word	0x20000708

0800c464 <PEF_Handle_End_of_Charge_Cnf>:

void PEF_Handle_End_of_Charge_Cnf(void){
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received END_OF_CHARGE.CNF ");
 800c468:	4903      	ldr	r1, [pc, #12]	@ (800c478 <PEF_Handle_End_of_Charge_Cnf+0x14>)
 800c46a:	4804      	ldr	r0, [pc, #16]	@ (800c47c <PEF_Handle_End_of_Charge_Cnf+0x18>)
 800c46c:	f000 f9d0 	bl	800c810 <siprintf>
	Serial_Print();
 800c470:	f7f4 fa72 	bl	8000958 <Serial_Print>
}
 800c474:	bf00      	nop
 800c476:	bd80      	pop	{r7, pc}
 800c478:	0800e08c 	.word	0x0800e08c
 800c47c:	20000708 	.word	0x20000708

0800c480 <PEF_Evaluate_Exchange_Data>:

void PEF_Evaluate_Exchange_Data(){
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
	switch(PEF_Get_Sequence_State()){
 800c484:	f7ff fe3a 	bl	800c0fc <PEF_Get_Sequence_State>
 800c488:	4603      	mov	r3, r0
 800c48a:	f24c 1217 	movw	r2, #49431	@ 0xc117
 800c48e:	4293      	cmp	r3, r2
 800c490:	f300 80bb 	bgt.w	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
 800c494:	f24c 120c 	movw	r2, #49420	@ 0xc10c
 800c498:	4293      	cmp	r3, r2
 800c49a:	da07      	bge.n	800c4ac <PEF_Evaluate_Exchange_Data+0x2c>
 800c49c:	f24b 0209 	movw	r2, #45065	@ 0xb009
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	dc67      	bgt.n	800c574 <PEF_Evaluate_Exchange_Data+0xf4>
 800c4a4:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 800c4a8:	da48      	bge.n	800c53c <PEF_Evaluate_Exchange_Data+0xbc>
		break;
	case SHUT_DOWN + STATE_B + END_OF_CHARGE + CONFIRM:
		PEF_Handle_End_of_Charge_Cnf();
		break;
	}
}
 800c4aa:	e0ae      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
	switch(PEF_Get_Sequence_State()){
 800c4ac:	f5a3 4341 	sub.w	r3, r3, #49408	@ 0xc100
 800c4b0:	3b0c      	subs	r3, #12
 800c4b2:	2b0b      	cmp	r3, #11
 800c4b4:	f200 80a9 	bhi.w	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
 800c4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c0 <PEF_Evaluate_Exchange_Data+0x40>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c5b1 	.word	0x0800c5b1
 800c4c4:	0800c5b7 	.word	0x0800c5b7
 800c4c8:	0800c60b 	.word	0x0800c60b
 800c4cc:	0800c60b 	.word	0x0800c60b
 800c4d0:	0800c5bd 	.word	0x0800c5bd
 800c4d4:	0800c60b 	.word	0x0800c60b
 800c4d8:	0800c60b 	.word	0x0800c60b
 800c4dc:	0800c5c3 	.word	0x0800c5c3
 800c4e0:	0800c5c9 	.word	0x0800c5c9
 800c4e4:	0800c5d5 	.word	0x0800c5d5
 800c4e8:	0800c60b 	.word	0x0800c60b
 800c4ec:	0800c5cf 	.word	0x0800c5cf
 800c4f0:	f5a3 4332 	sub.w	r3, r3, #45568	@ 0xb200
 800c4f4:	3b18      	subs	r3, #24
 800c4f6:	2b0d      	cmp	r3, #13
 800c4f8:	f200 8087 	bhi.w	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
 800c4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c504 <PEF_Evaluate_Exchange_Data+0x84>)
 800c4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c502:	bf00      	nop
 800c504:	0800c5db 	.word	0x0800c5db
 800c508:	0800c5e1 	.word	0x0800c5e1
 800c50c:	0800c60b 	.word	0x0800c60b
 800c510:	0800c60b 	.word	0x0800c60b
 800c514:	0800c5e7 	.word	0x0800c5e7
 800c518:	0800c5ed 	.word	0x0800c5ed
 800c51c:	0800c60b 	.word	0x0800c60b
 800c520:	0800c60b 	.word	0x0800c60b
 800c524:	0800c5f3 	.word	0x0800c5f3
 800c528:	0800c5f9 	.word	0x0800c5f9
 800c52c:	0800c60b 	.word	0x0800c60b
 800c530:	0800c60b 	.word	0x0800c60b
 800c534:	0800c5ff 	.word	0x0800c5ff
 800c538:	0800c605 	.word	0x0800c605
 800c53c:	f5a3 4330 	sub.w	r3, r3, #45056	@ 0xb000
 800c540:	2b09      	cmp	r3, #9
 800c542:	d862      	bhi.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
 800c544:	a201      	add	r2, pc, #4	@ (adr r2, 800c54c <PEF_Evaluate_Exchange_Data+0xcc>)
 800c546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54a:	bf00      	nop
 800c54c:	0800c587 	.word	0x0800c587
 800c550:	0800c58d 	.word	0x0800c58d
 800c554:	0800c60b 	.word	0x0800c60b
 800c558:	0800c60b 	.word	0x0800c60b
 800c55c:	0800c593 	.word	0x0800c593
 800c560:	0800c59f 	.word	0x0800c59f
 800c564:	0800c60b 	.word	0x0800c60b
 800c568:	0800c599 	.word	0x0800c599
 800c56c:	0800c5a5 	.word	0x0800c5a5
 800c570:	0800c5ab 	.word	0x0800c5ab
 800c574:	f24b 2225 	movw	r2, #45605	@ 0xb225
 800c578:	4293      	cmp	r3, r2
 800c57a:	dc46      	bgt.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
 800c57c:	f24b 2218 	movw	r2, #45592	@ 0xb218
 800c580:	4293      	cmp	r3, r2
 800c582:	dab5      	bge.n	800c4f0 <PEF_Evaluate_Exchange_Data+0x70>
}
 800c584:	e041      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Initialization_Req();
 800c586:	f7ff fdcd 	bl	800c124 <PEF_Handle_Initialization_Req>
		break;
 800c58a:	e03e      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Initialization_Cnf();
 800c58c:	f7ff fdde 	bl	800c14c <PEF_Handle_Initialization_Cnf>
		break;
 800c590:	e03b      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Parameter_Exchange_Req();
 800c592:	f7ff fdef 	bl	800c174 <PEF_Handle_Parameter_Exchange_Req>
		break;
 800c596:	e038      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Parameter_Exchange_Res();
 800c598:	f7ff fe00 	bl	800c19c <PEF_Handle_Parameter_Exchange_Res>
		break;
 800c59c:	e035      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Parameter_Exchange_Cnf();
 800c59e:	f7ff fe11 	bl	800c1c4 <PEF_Handle_Parameter_Exchange_Cnf>
		break;
 800c5a2:	e032      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Lock_Req();
 800c5a4:	f7ff fe1c 	bl	800c1e0 <PEF_Handle_Connector_Lock_Req>
		break;
 800c5a8:	e02f      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Lock_Cnf();
 800c5aa:	f7ff fe2b 	bl	800c204 <PEF_Handle_Connector_Lock_Cnf>
		break;
 800c5ae:	e02c      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Contactor_Close_Req();
 800c5b0:	f7ff fe36 	bl	800c220 <PEF_Handle_Contactor_Close_Req>
		break;
 800c5b4:	e029      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Contactor_Close_Cnf();
 800c5b6:	f7ff fe45 	bl	800c244 <PEF_Handle_Contactor_Close_Cnf>
		break;
 800c5ba:	e026      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Charging_Current_Demand_Req();
 800c5bc:	f7ff fe50 	bl	800c260 <PEF_Handle_Charging_Current_Demand_Req>
		break;
 800c5c0:	e023      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Charging_Current_Demand_Res();
 800c5c2:	f7ff fe75 	bl	800c2b0 <PEF_Handle_Charging_Current_Demand_Res>
		break;
 800c5c6:	e020      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Current_Suppression_Req();
 800c5c8:	f7ff fe82 	bl	800c2d0 <PEF_Handle_Current_Suppression_Req>
		break;
 800c5cc:	e01d      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Current_Suppression_Res();
 800c5ce:	f7ff fe9d 	bl	800c30c <PEF_Handle_Current_Suppression_Res>
		break;
 800c5d2:	e01a      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Current_Suppression_Cnf();
 800c5d4:	f7ff feae 	bl	800c334 <PEF_Handle_Current_Suppression_Cnf>
		break;
 800c5d8:	e017      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Zero_CURRENT_CONFIRM_Req();
 800c5da:	f7ff febd 	bl	800c358 <PEF_Handle_Zero_CURRENT_CONFIRM_Req>
		break;
 800c5de:	e014      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Zero_CURRENT_CONFIRM_Cnf();
 800c5e0:	f7ff fecc 	bl	800c37c <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf>
		break;
 800c5e4:	e011      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Voltage_Verification_Req();
 800c5e6:	f7ff fee3 	bl	800c3b0 <PEF_Handle_Voltage_Verification_Req>
		break;
 800c5ea:	e00e      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Voltage_Verification_Cnf();
 800c5ec:	f7ff fef2 	bl	800c3d4 <PEF_Handle_Voltage_Verification_Cnf>
		break;
 800c5f0:	e00b      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Unlock_Req();
 800c5f2:	f7ff ff01 	bl	800c3f8 <PEF_Handle_Connector_Unlock_Req>
		break;
 800c5f6:	e008      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Unlock_Cnf();
 800c5f8:	f7ff ff10 	bl	800c41c <PEF_Handle_Connector_Unlock_Cnf>
		break;
 800c5fc:	e005      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_End_of_Charge_Req();
 800c5fe:	f7ff ff1f 	bl	800c440 <PEF_Handle_End_of_Charge_Req>
		break;
 800c602:	e002      	b.n	800c60a <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_End_of_Charge_Cnf();
 800c604:	f7ff ff2e 	bl	800c464 <PEF_Handle_End_of_Charge_Cnf>
		break;
 800c608:	bf00      	nop
}
 800c60a:	bf00      	nop
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop

0800c610 <rand>:
 800c610:	4b16      	ldr	r3, [pc, #88]	@ (800c66c <rand+0x5c>)
 800c612:	b510      	push	{r4, lr}
 800c614:	681c      	ldr	r4, [r3, #0]
 800c616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c618:	b9b3      	cbnz	r3, 800c648 <rand+0x38>
 800c61a:	2018      	movs	r0, #24
 800c61c:	f000 fa4e 	bl	800cabc <malloc>
 800c620:	4602      	mov	r2, r0
 800c622:	6320      	str	r0, [r4, #48]	@ 0x30
 800c624:	b920      	cbnz	r0, 800c630 <rand+0x20>
 800c626:	4b12      	ldr	r3, [pc, #72]	@ (800c670 <rand+0x60>)
 800c628:	4812      	ldr	r0, [pc, #72]	@ (800c674 <rand+0x64>)
 800c62a:	2152      	movs	r1, #82	@ 0x52
 800c62c:	f000 f9de 	bl	800c9ec <__assert_func>
 800c630:	4911      	ldr	r1, [pc, #68]	@ (800c678 <rand+0x68>)
 800c632:	4b12      	ldr	r3, [pc, #72]	@ (800c67c <rand+0x6c>)
 800c634:	e9c0 1300 	strd	r1, r3, [r0]
 800c638:	4b11      	ldr	r3, [pc, #68]	@ (800c680 <rand+0x70>)
 800c63a:	6083      	str	r3, [r0, #8]
 800c63c:	230b      	movs	r3, #11
 800c63e:	8183      	strh	r3, [r0, #12]
 800c640:	2100      	movs	r1, #0
 800c642:	2001      	movs	r0, #1
 800c644:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c648:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c64a:	480e      	ldr	r0, [pc, #56]	@ (800c684 <rand+0x74>)
 800c64c:	690b      	ldr	r3, [r1, #16]
 800c64e:	694c      	ldr	r4, [r1, #20]
 800c650:	4a0d      	ldr	r2, [pc, #52]	@ (800c688 <rand+0x78>)
 800c652:	4358      	muls	r0, r3
 800c654:	fb02 0004 	mla	r0, r2, r4, r0
 800c658:	fba3 3202 	umull	r3, r2, r3, r2
 800c65c:	3301      	adds	r3, #1
 800c65e:	eb40 0002 	adc.w	r0, r0, r2
 800c662:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c666:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c66a:	bd10      	pop	{r4, pc}
 800c66c:	20000058 	.word	0x20000058
 800c670:	0800e100 	.word	0x0800e100
 800c674:	0800e117 	.word	0x0800e117
 800c678:	abcd330e 	.word	0xabcd330e
 800c67c:	e66d1234 	.word	0xe66d1234
 800c680:	0005deec 	.word	0x0005deec
 800c684:	5851f42d 	.word	0x5851f42d
 800c688:	4c957f2d 	.word	0x4c957f2d

0800c68c <std>:
 800c68c:	2300      	movs	r3, #0
 800c68e:	b510      	push	{r4, lr}
 800c690:	4604      	mov	r4, r0
 800c692:	e9c0 3300 	strd	r3, r3, [r0]
 800c696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c69a:	6083      	str	r3, [r0, #8]
 800c69c:	8181      	strh	r1, [r0, #12]
 800c69e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c6a0:	81c2      	strh	r2, [r0, #14]
 800c6a2:	6183      	str	r3, [r0, #24]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	2208      	movs	r2, #8
 800c6a8:	305c      	adds	r0, #92	@ 0x5c
 800c6aa:	f000 f914 	bl	800c8d6 <memset>
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e4 <std+0x58>)
 800c6b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e8 <std+0x5c>)
 800c6b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ec <std+0x60>)
 800c6b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f0 <std+0x64>)
 800c6bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6be:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f4 <std+0x68>)
 800c6c0:	6224      	str	r4, [r4, #32]
 800c6c2:	429c      	cmp	r4, r3
 800c6c4:	d006      	beq.n	800c6d4 <std+0x48>
 800c6c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6ca:	4294      	cmp	r4, r2
 800c6cc:	d002      	beq.n	800c6d4 <std+0x48>
 800c6ce:	33d0      	adds	r3, #208	@ 0xd0
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	d105      	bne.n	800c6e0 <std+0x54>
 800c6d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6dc:	f000 b974 	b.w	800c9c8 <__retarget_lock_init_recursive>
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	bf00      	nop
 800c6e4:	0800c851 	.word	0x0800c851
 800c6e8:	0800c873 	.word	0x0800c873
 800c6ec:	0800c8ab 	.word	0x0800c8ab
 800c6f0:	0800c8cf 	.word	0x0800c8cf
 800c6f4:	20002304 	.word	0x20002304

0800c6f8 <stdio_exit_handler>:
 800c6f8:	4a02      	ldr	r2, [pc, #8]	@ (800c704 <stdio_exit_handler+0xc>)
 800c6fa:	4903      	ldr	r1, [pc, #12]	@ (800c708 <stdio_exit_handler+0x10>)
 800c6fc:	4803      	ldr	r0, [pc, #12]	@ (800c70c <stdio_exit_handler+0x14>)
 800c6fe:	f000 b869 	b.w	800c7d4 <_fwalk_sglue>
 800c702:	bf00      	nop
 800c704:	2000004c 	.word	0x2000004c
 800c708:	0800d2fd 	.word	0x0800d2fd
 800c70c:	2000005c 	.word	0x2000005c

0800c710 <cleanup_stdio>:
 800c710:	6841      	ldr	r1, [r0, #4]
 800c712:	4b0c      	ldr	r3, [pc, #48]	@ (800c744 <cleanup_stdio+0x34>)
 800c714:	4299      	cmp	r1, r3
 800c716:	b510      	push	{r4, lr}
 800c718:	4604      	mov	r4, r0
 800c71a:	d001      	beq.n	800c720 <cleanup_stdio+0x10>
 800c71c:	f000 fdee 	bl	800d2fc <_fflush_r>
 800c720:	68a1      	ldr	r1, [r4, #8]
 800c722:	4b09      	ldr	r3, [pc, #36]	@ (800c748 <cleanup_stdio+0x38>)
 800c724:	4299      	cmp	r1, r3
 800c726:	d002      	beq.n	800c72e <cleanup_stdio+0x1e>
 800c728:	4620      	mov	r0, r4
 800c72a:	f000 fde7 	bl	800d2fc <_fflush_r>
 800c72e:	68e1      	ldr	r1, [r4, #12]
 800c730:	4b06      	ldr	r3, [pc, #24]	@ (800c74c <cleanup_stdio+0x3c>)
 800c732:	4299      	cmp	r1, r3
 800c734:	d004      	beq.n	800c740 <cleanup_stdio+0x30>
 800c736:	4620      	mov	r0, r4
 800c738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c73c:	f000 bdde 	b.w	800d2fc <_fflush_r>
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	20002304 	.word	0x20002304
 800c748:	2000236c 	.word	0x2000236c
 800c74c:	200023d4 	.word	0x200023d4

0800c750 <global_stdio_init.part.0>:
 800c750:	b510      	push	{r4, lr}
 800c752:	4b0b      	ldr	r3, [pc, #44]	@ (800c780 <global_stdio_init.part.0+0x30>)
 800c754:	4c0b      	ldr	r4, [pc, #44]	@ (800c784 <global_stdio_init.part.0+0x34>)
 800c756:	4a0c      	ldr	r2, [pc, #48]	@ (800c788 <global_stdio_init.part.0+0x38>)
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	4620      	mov	r0, r4
 800c75c:	2200      	movs	r2, #0
 800c75e:	2104      	movs	r1, #4
 800c760:	f7ff ff94 	bl	800c68c <std>
 800c764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c768:	2201      	movs	r2, #1
 800c76a:	2109      	movs	r1, #9
 800c76c:	f7ff ff8e 	bl	800c68c <std>
 800c770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c774:	2202      	movs	r2, #2
 800c776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c77a:	2112      	movs	r1, #18
 800c77c:	f7ff bf86 	b.w	800c68c <std>
 800c780:	2000243c 	.word	0x2000243c
 800c784:	20002304 	.word	0x20002304
 800c788:	0800c6f9 	.word	0x0800c6f9

0800c78c <__sfp_lock_acquire>:
 800c78c:	4801      	ldr	r0, [pc, #4]	@ (800c794 <__sfp_lock_acquire+0x8>)
 800c78e:	f000 b91c 	b.w	800c9ca <__retarget_lock_acquire_recursive>
 800c792:	bf00      	nop
 800c794:	20002445 	.word	0x20002445

0800c798 <__sfp_lock_release>:
 800c798:	4801      	ldr	r0, [pc, #4]	@ (800c7a0 <__sfp_lock_release+0x8>)
 800c79a:	f000 b917 	b.w	800c9cc <__retarget_lock_release_recursive>
 800c79e:	bf00      	nop
 800c7a0:	20002445 	.word	0x20002445

0800c7a4 <__sinit>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	f7ff fff0 	bl	800c78c <__sfp_lock_acquire>
 800c7ac:	6a23      	ldr	r3, [r4, #32]
 800c7ae:	b11b      	cbz	r3, 800c7b8 <__sinit+0x14>
 800c7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7b4:	f7ff bff0 	b.w	800c798 <__sfp_lock_release>
 800c7b8:	4b04      	ldr	r3, [pc, #16]	@ (800c7cc <__sinit+0x28>)
 800c7ba:	6223      	str	r3, [r4, #32]
 800c7bc:	4b04      	ldr	r3, [pc, #16]	@ (800c7d0 <__sinit+0x2c>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1f5      	bne.n	800c7b0 <__sinit+0xc>
 800c7c4:	f7ff ffc4 	bl	800c750 <global_stdio_init.part.0>
 800c7c8:	e7f2      	b.n	800c7b0 <__sinit+0xc>
 800c7ca:	bf00      	nop
 800c7cc:	0800c711 	.word	0x0800c711
 800c7d0:	2000243c 	.word	0x2000243c

0800c7d4 <_fwalk_sglue>:
 800c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d8:	4607      	mov	r7, r0
 800c7da:	4688      	mov	r8, r1
 800c7dc:	4614      	mov	r4, r2
 800c7de:	2600      	movs	r6, #0
 800c7e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7e4:	f1b9 0901 	subs.w	r9, r9, #1
 800c7e8:	d505      	bpl.n	800c7f6 <_fwalk_sglue+0x22>
 800c7ea:	6824      	ldr	r4, [r4, #0]
 800c7ec:	2c00      	cmp	r4, #0
 800c7ee:	d1f7      	bne.n	800c7e0 <_fwalk_sglue+0xc>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d907      	bls.n	800c80c <_fwalk_sglue+0x38>
 800c7fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c800:	3301      	adds	r3, #1
 800c802:	d003      	beq.n	800c80c <_fwalk_sglue+0x38>
 800c804:	4629      	mov	r1, r5
 800c806:	4638      	mov	r0, r7
 800c808:	47c0      	blx	r8
 800c80a:	4306      	orrs	r6, r0
 800c80c:	3568      	adds	r5, #104	@ 0x68
 800c80e:	e7e9      	b.n	800c7e4 <_fwalk_sglue+0x10>

0800c810 <siprintf>:
 800c810:	b40e      	push	{r1, r2, r3}
 800c812:	b500      	push	{lr}
 800c814:	b09c      	sub	sp, #112	@ 0x70
 800c816:	ab1d      	add	r3, sp, #116	@ 0x74
 800c818:	9002      	str	r0, [sp, #8]
 800c81a:	9006      	str	r0, [sp, #24]
 800c81c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c820:	4809      	ldr	r0, [pc, #36]	@ (800c848 <siprintf+0x38>)
 800c822:	9107      	str	r1, [sp, #28]
 800c824:	9104      	str	r1, [sp, #16]
 800c826:	4909      	ldr	r1, [pc, #36]	@ (800c84c <siprintf+0x3c>)
 800c828:	f853 2b04 	ldr.w	r2, [r3], #4
 800c82c:	9105      	str	r1, [sp, #20]
 800c82e:	6800      	ldr	r0, [r0, #0]
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	a902      	add	r1, sp, #8
 800c834:	f000 fa54 	bl	800cce0 <_svfiprintf_r>
 800c838:	9b02      	ldr	r3, [sp, #8]
 800c83a:	2200      	movs	r2, #0
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	b01c      	add	sp, #112	@ 0x70
 800c840:	f85d eb04 	ldr.w	lr, [sp], #4
 800c844:	b003      	add	sp, #12
 800c846:	4770      	bx	lr
 800c848:	20000058 	.word	0x20000058
 800c84c:	ffff0208 	.word	0xffff0208

0800c850 <__sread>:
 800c850:	b510      	push	{r4, lr}
 800c852:	460c      	mov	r4, r1
 800c854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c858:	f000 f868 	bl	800c92c <_read_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	bfab      	itete	ge
 800c860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c862:	89a3      	ldrhlt	r3, [r4, #12]
 800c864:	181b      	addge	r3, r3, r0
 800c866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c86a:	bfac      	ite	ge
 800c86c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c86e:	81a3      	strhlt	r3, [r4, #12]
 800c870:	bd10      	pop	{r4, pc}

0800c872 <__swrite>:
 800c872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c876:	461f      	mov	r7, r3
 800c878:	898b      	ldrh	r3, [r1, #12]
 800c87a:	05db      	lsls	r3, r3, #23
 800c87c:	4605      	mov	r5, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	4616      	mov	r6, r2
 800c882:	d505      	bpl.n	800c890 <__swrite+0x1e>
 800c884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c888:	2302      	movs	r3, #2
 800c88a:	2200      	movs	r2, #0
 800c88c:	f000 f83c 	bl	800c908 <_lseek_r>
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c89a:	81a3      	strh	r3, [r4, #12]
 800c89c:	4632      	mov	r2, r6
 800c89e:	463b      	mov	r3, r7
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a6:	f000 b853 	b.w	800c950 <_write_r>

0800c8aa <__sseek>:
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b2:	f000 f829 	bl	800c908 <_lseek_r>
 800c8b6:	1c43      	adds	r3, r0, #1
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	bf15      	itete	ne
 800c8bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8c6:	81a3      	strheq	r3, [r4, #12]
 800c8c8:	bf18      	it	ne
 800c8ca:	81a3      	strhne	r3, [r4, #12]
 800c8cc:	bd10      	pop	{r4, pc}

0800c8ce <__sclose>:
 800c8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d2:	f000 b809 	b.w	800c8e8 <_close_r>

0800c8d6 <memset>:
 800c8d6:	4402      	add	r2, r0
 800c8d8:	4603      	mov	r3, r0
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d100      	bne.n	800c8e0 <memset+0xa>
 800c8de:	4770      	bx	lr
 800c8e0:	f803 1b01 	strb.w	r1, [r3], #1
 800c8e4:	e7f9      	b.n	800c8da <memset+0x4>
	...

0800c8e8 <_close_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4d06      	ldr	r5, [pc, #24]	@ (800c904 <_close_r+0x1c>)
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	4608      	mov	r0, r1
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	f7f6 fa6e 	bl	8002dd4 <_close>
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	d102      	bne.n	800c902 <_close_r+0x1a>
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	b103      	cbz	r3, 800c902 <_close_r+0x1a>
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	20002440 	.word	0x20002440

0800c908 <_lseek_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4d07      	ldr	r5, [pc, #28]	@ (800c928 <_lseek_r+0x20>)
 800c90c:	4604      	mov	r4, r0
 800c90e:	4608      	mov	r0, r1
 800c910:	4611      	mov	r1, r2
 800c912:	2200      	movs	r2, #0
 800c914:	602a      	str	r2, [r5, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	f7f6 fa83 	bl	8002e22 <_lseek>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d102      	bne.n	800c926 <_lseek_r+0x1e>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b103      	cbz	r3, 800c926 <_lseek_r+0x1e>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	20002440 	.word	0x20002440

0800c92c <_read_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	4d07      	ldr	r5, [pc, #28]	@ (800c94c <_read_r+0x20>)
 800c930:	4604      	mov	r4, r0
 800c932:	4608      	mov	r0, r1
 800c934:	4611      	mov	r1, r2
 800c936:	2200      	movs	r2, #0
 800c938:	602a      	str	r2, [r5, #0]
 800c93a:	461a      	mov	r2, r3
 800c93c:	f7f6 fa11 	bl	8002d62 <_read>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d102      	bne.n	800c94a <_read_r+0x1e>
 800c944:	682b      	ldr	r3, [r5, #0]
 800c946:	b103      	cbz	r3, 800c94a <_read_r+0x1e>
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	20002440 	.word	0x20002440

0800c950 <_write_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4d07      	ldr	r5, [pc, #28]	@ (800c970 <_write_r+0x20>)
 800c954:	4604      	mov	r4, r0
 800c956:	4608      	mov	r0, r1
 800c958:	4611      	mov	r1, r2
 800c95a:	2200      	movs	r2, #0
 800c95c:	602a      	str	r2, [r5, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	f7f6 fa1c 	bl	8002d9c <_write>
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	d102      	bne.n	800c96e <_write_r+0x1e>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	b103      	cbz	r3, 800c96e <_write_r+0x1e>
 800c96c:	6023      	str	r3, [r4, #0]
 800c96e:	bd38      	pop	{r3, r4, r5, pc}
 800c970:	20002440 	.word	0x20002440

0800c974 <__errno>:
 800c974:	4b01      	ldr	r3, [pc, #4]	@ (800c97c <__errno+0x8>)
 800c976:	6818      	ldr	r0, [r3, #0]
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	20000058 	.word	0x20000058

0800c980 <__libc_init_array>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	4d0d      	ldr	r5, [pc, #52]	@ (800c9b8 <__libc_init_array+0x38>)
 800c984:	4c0d      	ldr	r4, [pc, #52]	@ (800c9bc <__libc_init_array+0x3c>)
 800c986:	1b64      	subs	r4, r4, r5
 800c988:	10a4      	asrs	r4, r4, #2
 800c98a:	2600      	movs	r6, #0
 800c98c:	42a6      	cmp	r6, r4
 800c98e:	d109      	bne.n	800c9a4 <__libc_init_array+0x24>
 800c990:	4d0b      	ldr	r5, [pc, #44]	@ (800c9c0 <__libc_init_array+0x40>)
 800c992:	4c0c      	ldr	r4, [pc, #48]	@ (800c9c4 <__libc_init_array+0x44>)
 800c994:	f000 fff0 	bl	800d978 <_init>
 800c998:	1b64      	subs	r4, r4, r5
 800c99a:	10a4      	asrs	r4, r4, #2
 800c99c:	2600      	movs	r6, #0
 800c99e:	42a6      	cmp	r6, r4
 800c9a0:	d105      	bne.n	800c9ae <__libc_init_array+0x2e>
 800c9a2:	bd70      	pop	{r4, r5, r6, pc}
 800c9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a8:	4798      	blx	r3
 800c9aa:	3601      	adds	r6, #1
 800c9ac:	e7ee      	b.n	800c98c <__libc_init_array+0xc>
 800c9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9b2:	4798      	blx	r3
 800c9b4:	3601      	adds	r6, #1
 800c9b6:	e7f2      	b.n	800c99e <__libc_init_array+0x1e>
 800c9b8:	0800e1e8 	.word	0x0800e1e8
 800c9bc:	0800e1e8 	.word	0x0800e1e8
 800c9c0:	0800e1e8 	.word	0x0800e1e8
 800c9c4:	0800e1ec 	.word	0x0800e1ec

0800c9c8 <__retarget_lock_init_recursive>:
 800c9c8:	4770      	bx	lr

0800c9ca <__retarget_lock_acquire_recursive>:
 800c9ca:	4770      	bx	lr

0800c9cc <__retarget_lock_release_recursive>:
 800c9cc:	4770      	bx	lr

0800c9ce <memcpy>:
 800c9ce:	440a      	add	r2, r1
 800c9d0:	4291      	cmp	r1, r2
 800c9d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9d6:	d100      	bne.n	800c9da <memcpy+0xc>
 800c9d8:	4770      	bx	lr
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9e4:	4291      	cmp	r1, r2
 800c9e6:	d1f9      	bne.n	800c9dc <memcpy+0xe>
 800c9e8:	bd10      	pop	{r4, pc}
	...

0800c9ec <__assert_func>:
 800c9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ee:	4614      	mov	r4, r2
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	4b09      	ldr	r3, [pc, #36]	@ (800ca18 <__assert_func+0x2c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	68d8      	ldr	r0, [r3, #12]
 800c9fa:	b954      	cbnz	r4, 800ca12 <__assert_func+0x26>
 800c9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ca1c <__assert_func+0x30>)
 800c9fe:	461c      	mov	r4, r3
 800ca00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca04:	9100      	str	r1, [sp, #0]
 800ca06:	462b      	mov	r3, r5
 800ca08:	4905      	ldr	r1, [pc, #20]	@ (800ca20 <__assert_func+0x34>)
 800ca0a:	f000 fc9f 	bl	800d34c <fiprintf>
 800ca0e:	f000 fcd9 	bl	800d3c4 <abort>
 800ca12:	4b04      	ldr	r3, [pc, #16]	@ (800ca24 <__assert_func+0x38>)
 800ca14:	e7f4      	b.n	800ca00 <__assert_func+0x14>
 800ca16:	bf00      	nop
 800ca18:	20000058 	.word	0x20000058
 800ca1c:	0800e1aa 	.word	0x0800e1aa
 800ca20:	0800e17c 	.word	0x0800e17c
 800ca24:	0800e16f 	.word	0x0800e16f

0800ca28 <_free_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d041      	beq.n	800cab4 <_free_r+0x8c>
 800ca30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca34:	1f0c      	subs	r4, r1, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bfb8      	it	lt
 800ca3a:	18e4      	addlt	r4, r4, r3
 800ca3c:	f000 f8e8 	bl	800cc10 <__malloc_lock>
 800ca40:	4a1d      	ldr	r2, [pc, #116]	@ (800cab8 <_free_r+0x90>)
 800ca42:	6813      	ldr	r3, [r2, #0]
 800ca44:	b933      	cbnz	r3, 800ca54 <_free_r+0x2c>
 800ca46:	6063      	str	r3, [r4, #4]
 800ca48:	6014      	str	r4, [r2, #0]
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca50:	f000 b8e4 	b.w	800cc1c <__malloc_unlock>
 800ca54:	42a3      	cmp	r3, r4
 800ca56:	d908      	bls.n	800ca6a <_free_r+0x42>
 800ca58:	6820      	ldr	r0, [r4, #0]
 800ca5a:	1821      	adds	r1, r4, r0
 800ca5c:	428b      	cmp	r3, r1
 800ca5e:	bf01      	itttt	eq
 800ca60:	6819      	ldreq	r1, [r3, #0]
 800ca62:	685b      	ldreq	r3, [r3, #4]
 800ca64:	1809      	addeq	r1, r1, r0
 800ca66:	6021      	streq	r1, [r4, #0]
 800ca68:	e7ed      	b.n	800ca46 <_free_r+0x1e>
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	b10b      	cbz	r3, 800ca74 <_free_r+0x4c>
 800ca70:	42a3      	cmp	r3, r4
 800ca72:	d9fa      	bls.n	800ca6a <_free_r+0x42>
 800ca74:	6811      	ldr	r1, [r2, #0]
 800ca76:	1850      	adds	r0, r2, r1
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d10b      	bne.n	800ca94 <_free_r+0x6c>
 800ca7c:	6820      	ldr	r0, [r4, #0]
 800ca7e:	4401      	add	r1, r0
 800ca80:	1850      	adds	r0, r2, r1
 800ca82:	4283      	cmp	r3, r0
 800ca84:	6011      	str	r1, [r2, #0]
 800ca86:	d1e0      	bne.n	800ca4a <_free_r+0x22>
 800ca88:	6818      	ldr	r0, [r3, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	6053      	str	r3, [r2, #4]
 800ca8e:	4408      	add	r0, r1
 800ca90:	6010      	str	r0, [r2, #0]
 800ca92:	e7da      	b.n	800ca4a <_free_r+0x22>
 800ca94:	d902      	bls.n	800ca9c <_free_r+0x74>
 800ca96:	230c      	movs	r3, #12
 800ca98:	602b      	str	r3, [r5, #0]
 800ca9a:	e7d6      	b.n	800ca4a <_free_r+0x22>
 800ca9c:	6820      	ldr	r0, [r4, #0]
 800ca9e:	1821      	adds	r1, r4, r0
 800caa0:	428b      	cmp	r3, r1
 800caa2:	bf04      	itt	eq
 800caa4:	6819      	ldreq	r1, [r3, #0]
 800caa6:	685b      	ldreq	r3, [r3, #4]
 800caa8:	6063      	str	r3, [r4, #4]
 800caaa:	bf04      	itt	eq
 800caac:	1809      	addeq	r1, r1, r0
 800caae:	6021      	streq	r1, [r4, #0]
 800cab0:	6054      	str	r4, [r2, #4]
 800cab2:	e7ca      	b.n	800ca4a <_free_r+0x22>
 800cab4:	bd38      	pop	{r3, r4, r5, pc}
 800cab6:	bf00      	nop
 800cab8:	2000244c 	.word	0x2000244c

0800cabc <malloc>:
 800cabc:	4b02      	ldr	r3, [pc, #8]	@ (800cac8 <malloc+0xc>)
 800cabe:	4601      	mov	r1, r0
 800cac0:	6818      	ldr	r0, [r3, #0]
 800cac2:	f000 b825 	b.w	800cb10 <_malloc_r>
 800cac6:	bf00      	nop
 800cac8:	20000058 	.word	0x20000058

0800cacc <sbrk_aligned>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	4e0f      	ldr	r6, [pc, #60]	@ (800cb0c <sbrk_aligned+0x40>)
 800cad0:	460c      	mov	r4, r1
 800cad2:	6831      	ldr	r1, [r6, #0]
 800cad4:	4605      	mov	r5, r0
 800cad6:	b911      	cbnz	r1, 800cade <sbrk_aligned+0x12>
 800cad8:	f000 fc64 	bl	800d3a4 <_sbrk_r>
 800cadc:	6030      	str	r0, [r6, #0]
 800cade:	4621      	mov	r1, r4
 800cae0:	4628      	mov	r0, r5
 800cae2:	f000 fc5f 	bl	800d3a4 <_sbrk_r>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	d103      	bne.n	800caf2 <sbrk_aligned+0x26>
 800caea:	f04f 34ff 	mov.w	r4, #4294967295
 800caee:	4620      	mov	r0, r4
 800caf0:	bd70      	pop	{r4, r5, r6, pc}
 800caf2:	1cc4      	adds	r4, r0, #3
 800caf4:	f024 0403 	bic.w	r4, r4, #3
 800caf8:	42a0      	cmp	r0, r4
 800cafa:	d0f8      	beq.n	800caee <sbrk_aligned+0x22>
 800cafc:	1a21      	subs	r1, r4, r0
 800cafe:	4628      	mov	r0, r5
 800cb00:	f000 fc50 	bl	800d3a4 <_sbrk_r>
 800cb04:	3001      	adds	r0, #1
 800cb06:	d1f2      	bne.n	800caee <sbrk_aligned+0x22>
 800cb08:	e7ef      	b.n	800caea <sbrk_aligned+0x1e>
 800cb0a:	bf00      	nop
 800cb0c:	20002448 	.word	0x20002448

0800cb10 <_malloc_r>:
 800cb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb14:	1ccd      	adds	r5, r1, #3
 800cb16:	f025 0503 	bic.w	r5, r5, #3
 800cb1a:	3508      	adds	r5, #8
 800cb1c:	2d0c      	cmp	r5, #12
 800cb1e:	bf38      	it	cc
 800cb20:	250c      	movcc	r5, #12
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	4606      	mov	r6, r0
 800cb26:	db01      	blt.n	800cb2c <_malloc_r+0x1c>
 800cb28:	42a9      	cmp	r1, r5
 800cb2a:	d904      	bls.n	800cb36 <_malloc_r+0x26>
 800cb2c:	230c      	movs	r3, #12
 800cb2e:	6033      	str	r3, [r6, #0]
 800cb30:	2000      	movs	r0, #0
 800cb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc0c <_malloc_r+0xfc>
 800cb3a:	f000 f869 	bl	800cc10 <__malloc_lock>
 800cb3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb42:	461c      	mov	r4, r3
 800cb44:	bb44      	cbnz	r4, 800cb98 <_malloc_r+0x88>
 800cb46:	4629      	mov	r1, r5
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f7ff ffbf 	bl	800cacc <sbrk_aligned>
 800cb4e:	1c43      	adds	r3, r0, #1
 800cb50:	4604      	mov	r4, r0
 800cb52:	d158      	bne.n	800cc06 <_malloc_r+0xf6>
 800cb54:	f8d8 4000 	ldr.w	r4, [r8]
 800cb58:	4627      	mov	r7, r4
 800cb5a:	2f00      	cmp	r7, #0
 800cb5c:	d143      	bne.n	800cbe6 <_malloc_r+0xd6>
 800cb5e:	2c00      	cmp	r4, #0
 800cb60:	d04b      	beq.n	800cbfa <_malloc_r+0xea>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	4639      	mov	r1, r7
 800cb66:	4630      	mov	r0, r6
 800cb68:	eb04 0903 	add.w	r9, r4, r3
 800cb6c:	f000 fc1a 	bl	800d3a4 <_sbrk_r>
 800cb70:	4581      	cmp	r9, r0
 800cb72:	d142      	bne.n	800cbfa <_malloc_r+0xea>
 800cb74:	6821      	ldr	r1, [r4, #0]
 800cb76:	1a6d      	subs	r5, r5, r1
 800cb78:	4629      	mov	r1, r5
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f7ff ffa6 	bl	800cacc <sbrk_aligned>
 800cb80:	3001      	adds	r0, #1
 800cb82:	d03a      	beq.n	800cbfa <_malloc_r+0xea>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	442b      	add	r3, r5
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb8e:	685a      	ldr	r2, [r3, #4]
 800cb90:	bb62      	cbnz	r2, 800cbec <_malloc_r+0xdc>
 800cb92:	f8c8 7000 	str.w	r7, [r8]
 800cb96:	e00f      	b.n	800cbb8 <_malloc_r+0xa8>
 800cb98:	6822      	ldr	r2, [r4, #0]
 800cb9a:	1b52      	subs	r2, r2, r5
 800cb9c:	d420      	bmi.n	800cbe0 <_malloc_r+0xd0>
 800cb9e:	2a0b      	cmp	r2, #11
 800cba0:	d917      	bls.n	800cbd2 <_malloc_r+0xc2>
 800cba2:	1961      	adds	r1, r4, r5
 800cba4:	42a3      	cmp	r3, r4
 800cba6:	6025      	str	r5, [r4, #0]
 800cba8:	bf18      	it	ne
 800cbaa:	6059      	strne	r1, [r3, #4]
 800cbac:	6863      	ldr	r3, [r4, #4]
 800cbae:	bf08      	it	eq
 800cbb0:	f8c8 1000 	streq.w	r1, [r8]
 800cbb4:	5162      	str	r2, [r4, r5]
 800cbb6:	604b      	str	r3, [r1, #4]
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f000 f82f 	bl	800cc1c <__malloc_unlock>
 800cbbe:	f104 000b 	add.w	r0, r4, #11
 800cbc2:	1d23      	adds	r3, r4, #4
 800cbc4:	f020 0007 	bic.w	r0, r0, #7
 800cbc8:	1ac2      	subs	r2, r0, r3
 800cbca:	bf1c      	itt	ne
 800cbcc:	1a1b      	subne	r3, r3, r0
 800cbce:	50a3      	strne	r3, [r4, r2]
 800cbd0:	e7af      	b.n	800cb32 <_malloc_r+0x22>
 800cbd2:	6862      	ldr	r2, [r4, #4]
 800cbd4:	42a3      	cmp	r3, r4
 800cbd6:	bf0c      	ite	eq
 800cbd8:	f8c8 2000 	streq.w	r2, [r8]
 800cbdc:	605a      	strne	r2, [r3, #4]
 800cbde:	e7eb      	b.n	800cbb8 <_malloc_r+0xa8>
 800cbe0:	4623      	mov	r3, r4
 800cbe2:	6864      	ldr	r4, [r4, #4]
 800cbe4:	e7ae      	b.n	800cb44 <_malloc_r+0x34>
 800cbe6:	463c      	mov	r4, r7
 800cbe8:	687f      	ldr	r7, [r7, #4]
 800cbea:	e7b6      	b.n	800cb5a <_malloc_r+0x4a>
 800cbec:	461a      	mov	r2, r3
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	42a3      	cmp	r3, r4
 800cbf2:	d1fb      	bne.n	800cbec <_malloc_r+0xdc>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	6053      	str	r3, [r2, #4]
 800cbf8:	e7de      	b.n	800cbb8 <_malloc_r+0xa8>
 800cbfa:	230c      	movs	r3, #12
 800cbfc:	6033      	str	r3, [r6, #0]
 800cbfe:	4630      	mov	r0, r6
 800cc00:	f000 f80c 	bl	800cc1c <__malloc_unlock>
 800cc04:	e794      	b.n	800cb30 <_malloc_r+0x20>
 800cc06:	6005      	str	r5, [r0, #0]
 800cc08:	e7d6      	b.n	800cbb8 <_malloc_r+0xa8>
 800cc0a:	bf00      	nop
 800cc0c:	2000244c 	.word	0x2000244c

0800cc10 <__malloc_lock>:
 800cc10:	4801      	ldr	r0, [pc, #4]	@ (800cc18 <__malloc_lock+0x8>)
 800cc12:	f7ff beda 	b.w	800c9ca <__retarget_lock_acquire_recursive>
 800cc16:	bf00      	nop
 800cc18:	20002444 	.word	0x20002444

0800cc1c <__malloc_unlock>:
 800cc1c:	4801      	ldr	r0, [pc, #4]	@ (800cc24 <__malloc_unlock+0x8>)
 800cc1e:	f7ff bed5 	b.w	800c9cc <__retarget_lock_release_recursive>
 800cc22:	bf00      	nop
 800cc24:	20002444 	.word	0x20002444

0800cc28 <__ssputs_r>:
 800cc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc2c:	688e      	ldr	r6, [r1, #8]
 800cc2e:	461f      	mov	r7, r3
 800cc30:	42be      	cmp	r6, r7
 800cc32:	680b      	ldr	r3, [r1, #0]
 800cc34:	4682      	mov	sl, r0
 800cc36:	460c      	mov	r4, r1
 800cc38:	4690      	mov	r8, r2
 800cc3a:	d82d      	bhi.n	800cc98 <__ssputs_r+0x70>
 800cc3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc44:	d026      	beq.n	800cc94 <__ssputs_r+0x6c>
 800cc46:	6965      	ldr	r5, [r4, #20]
 800cc48:	6909      	ldr	r1, [r1, #16]
 800cc4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc4e:	eba3 0901 	sub.w	r9, r3, r1
 800cc52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc56:	1c7b      	adds	r3, r7, #1
 800cc58:	444b      	add	r3, r9
 800cc5a:	106d      	asrs	r5, r5, #1
 800cc5c:	429d      	cmp	r5, r3
 800cc5e:	bf38      	it	cc
 800cc60:	461d      	movcc	r5, r3
 800cc62:	0553      	lsls	r3, r2, #21
 800cc64:	d527      	bpl.n	800ccb6 <__ssputs_r+0x8e>
 800cc66:	4629      	mov	r1, r5
 800cc68:	f7ff ff52 	bl	800cb10 <_malloc_r>
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	b360      	cbz	r0, 800ccca <__ssputs_r+0xa2>
 800cc70:	6921      	ldr	r1, [r4, #16]
 800cc72:	464a      	mov	r2, r9
 800cc74:	f7ff feab 	bl	800c9ce <memcpy>
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cc7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc82:	81a3      	strh	r3, [r4, #12]
 800cc84:	6126      	str	r6, [r4, #16]
 800cc86:	6165      	str	r5, [r4, #20]
 800cc88:	444e      	add	r6, r9
 800cc8a:	eba5 0509 	sub.w	r5, r5, r9
 800cc8e:	6026      	str	r6, [r4, #0]
 800cc90:	60a5      	str	r5, [r4, #8]
 800cc92:	463e      	mov	r6, r7
 800cc94:	42be      	cmp	r6, r7
 800cc96:	d900      	bls.n	800cc9a <__ssputs_r+0x72>
 800cc98:	463e      	mov	r6, r7
 800cc9a:	6820      	ldr	r0, [r4, #0]
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	4641      	mov	r1, r8
 800cca0:	f000 fb66 	bl	800d370 <memmove>
 800cca4:	68a3      	ldr	r3, [r4, #8]
 800cca6:	1b9b      	subs	r3, r3, r6
 800cca8:	60a3      	str	r3, [r4, #8]
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	4433      	add	r3, r6
 800ccae:	6023      	str	r3, [r4, #0]
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb6:	462a      	mov	r2, r5
 800ccb8:	f000 fb8b 	bl	800d3d2 <_realloc_r>
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d1e0      	bne.n	800cc84 <__ssputs_r+0x5c>
 800ccc2:	6921      	ldr	r1, [r4, #16]
 800ccc4:	4650      	mov	r0, sl
 800ccc6:	f7ff feaf 	bl	800ca28 <_free_r>
 800ccca:	230c      	movs	r3, #12
 800cccc:	f8ca 3000 	str.w	r3, [sl]
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccd6:	81a3      	strh	r3, [r4, #12]
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	e7e9      	b.n	800ccb2 <__ssputs_r+0x8a>
	...

0800cce0 <_svfiprintf_r>:
 800cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	4698      	mov	r8, r3
 800cce6:	898b      	ldrh	r3, [r1, #12]
 800cce8:	061b      	lsls	r3, r3, #24
 800ccea:	b09d      	sub	sp, #116	@ 0x74
 800ccec:	4607      	mov	r7, r0
 800ccee:	460d      	mov	r5, r1
 800ccf0:	4614      	mov	r4, r2
 800ccf2:	d510      	bpl.n	800cd16 <_svfiprintf_r+0x36>
 800ccf4:	690b      	ldr	r3, [r1, #16]
 800ccf6:	b973      	cbnz	r3, 800cd16 <_svfiprintf_r+0x36>
 800ccf8:	2140      	movs	r1, #64	@ 0x40
 800ccfa:	f7ff ff09 	bl	800cb10 <_malloc_r>
 800ccfe:	6028      	str	r0, [r5, #0]
 800cd00:	6128      	str	r0, [r5, #16]
 800cd02:	b930      	cbnz	r0, 800cd12 <_svfiprintf_r+0x32>
 800cd04:	230c      	movs	r3, #12
 800cd06:	603b      	str	r3, [r7, #0]
 800cd08:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0c:	b01d      	add	sp, #116	@ 0x74
 800cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd12:	2340      	movs	r3, #64	@ 0x40
 800cd14:	616b      	str	r3, [r5, #20]
 800cd16:	2300      	movs	r3, #0
 800cd18:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd1a:	2320      	movs	r3, #32
 800cd1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd20:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd24:	2330      	movs	r3, #48	@ 0x30
 800cd26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cec4 <_svfiprintf_r+0x1e4>
 800cd2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd2e:	f04f 0901 	mov.w	r9, #1
 800cd32:	4623      	mov	r3, r4
 800cd34:	469a      	mov	sl, r3
 800cd36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd3a:	b10a      	cbz	r2, 800cd40 <_svfiprintf_r+0x60>
 800cd3c:	2a25      	cmp	r2, #37	@ 0x25
 800cd3e:	d1f9      	bne.n	800cd34 <_svfiprintf_r+0x54>
 800cd40:	ebba 0b04 	subs.w	fp, sl, r4
 800cd44:	d00b      	beq.n	800cd5e <_svfiprintf_r+0x7e>
 800cd46:	465b      	mov	r3, fp
 800cd48:	4622      	mov	r2, r4
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f7ff ff6b 	bl	800cc28 <__ssputs_r>
 800cd52:	3001      	adds	r0, #1
 800cd54:	f000 80a7 	beq.w	800cea6 <_svfiprintf_r+0x1c6>
 800cd58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd5a:	445a      	add	r2, fp
 800cd5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 809f 	beq.w	800cea6 <_svfiprintf_r+0x1c6>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd72:	f10a 0a01 	add.w	sl, sl, #1
 800cd76:	9304      	str	r3, [sp, #16]
 800cd78:	9307      	str	r3, [sp, #28]
 800cd7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd80:	4654      	mov	r4, sl
 800cd82:	2205      	movs	r2, #5
 800cd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd88:	484e      	ldr	r0, [pc, #312]	@ (800cec4 <_svfiprintf_r+0x1e4>)
 800cd8a:	f7f3 fa51 	bl	8000230 <memchr>
 800cd8e:	9a04      	ldr	r2, [sp, #16]
 800cd90:	b9d8      	cbnz	r0, 800cdca <_svfiprintf_r+0xea>
 800cd92:	06d0      	lsls	r0, r2, #27
 800cd94:	bf44      	itt	mi
 800cd96:	2320      	movmi	r3, #32
 800cd98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd9c:	0711      	lsls	r1, r2, #28
 800cd9e:	bf44      	itt	mi
 800cda0:	232b      	movmi	r3, #43	@ 0x2b
 800cda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cda6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdac:	d015      	beq.n	800cdda <_svfiprintf_r+0xfa>
 800cdae:	9a07      	ldr	r2, [sp, #28]
 800cdb0:	4654      	mov	r4, sl
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	f04f 0c0a 	mov.w	ip, #10
 800cdb8:	4621      	mov	r1, r4
 800cdba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdbe:	3b30      	subs	r3, #48	@ 0x30
 800cdc0:	2b09      	cmp	r3, #9
 800cdc2:	d94b      	bls.n	800ce5c <_svfiprintf_r+0x17c>
 800cdc4:	b1b0      	cbz	r0, 800cdf4 <_svfiprintf_r+0x114>
 800cdc6:	9207      	str	r2, [sp, #28]
 800cdc8:	e014      	b.n	800cdf4 <_svfiprintf_r+0x114>
 800cdca:	eba0 0308 	sub.w	r3, r0, r8
 800cdce:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	46a2      	mov	sl, r4
 800cdd8:	e7d2      	b.n	800cd80 <_svfiprintf_r+0xa0>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	1d19      	adds	r1, r3, #4
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	9103      	str	r1, [sp, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	bfbb      	ittet	lt
 800cde6:	425b      	neglt	r3, r3
 800cde8:	f042 0202 	orrlt.w	r2, r2, #2
 800cdec:	9307      	strge	r3, [sp, #28]
 800cdee:	9307      	strlt	r3, [sp, #28]
 800cdf0:	bfb8      	it	lt
 800cdf2:	9204      	strlt	r2, [sp, #16]
 800cdf4:	7823      	ldrb	r3, [r4, #0]
 800cdf6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdf8:	d10a      	bne.n	800ce10 <_svfiprintf_r+0x130>
 800cdfa:	7863      	ldrb	r3, [r4, #1]
 800cdfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdfe:	d132      	bne.n	800ce66 <_svfiprintf_r+0x186>
 800ce00:	9b03      	ldr	r3, [sp, #12]
 800ce02:	1d1a      	adds	r2, r3, #4
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce0c:	3402      	adds	r4, #2
 800ce0e:	9305      	str	r3, [sp, #20]
 800ce10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ced4 <_svfiprintf_r+0x1f4>
 800ce14:	7821      	ldrb	r1, [r4, #0]
 800ce16:	2203      	movs	r2, #3
 800ce18:	4650      	mov	r0, sl
 800ce1a:	f7f3 fa09 	bl	8000230 <memchr>
 800ce1e:	b138      	cbz	r0, 800ce30 <_svfiprintf_r+0x150>
 800ce20:	9b04      	ldr	r3, [sp, #16]
 800ce22:	eba0 000a 	sub.w	r0, r0, sl
 800ce26:	2240      	movs	r2, #64	@ 0x40
 800ce28:	4082      	lsls	r2, r0
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	3401      	adds	r4, #1
 800ce2e:	9304      	str	r3, [sp, #16]
 800ce30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce34:	4824      	ldr	r0, [pc, #144]	@ (800cec8 <_svfiprintf_r+0x1e8>)
 800ce36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce3a:	2206      	movs	r2, #6
 800ce3c:	f7f3 f9f8 	bl	8000230 <memchr>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d036      	beq.n	800ceb2 <_svfiprintf_r+0x1d2>
 800ce44:	4b21      	ldr	r3, [pc, #132]	@ (800cecc <_svfiprintf_r+0x1ec>)
 800ce46:	bb1b      	cbnz	r3, 800ce90 <_svfiprintf_r+0x1b0>
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	3307      	adds	r3, #7
 800ce4c:	f023 0307 	bic.w	r3, r3, #7
 800ce50:	3308      	adds	r3, #8
 800ce52:	9303      	str	r3, [sp, #12]
 800ce54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce56:	4433      	add	r3, r6
 800ce58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce5a:	e76a      	b.n	800cd32 <_svfiprintf_r+0x52>
 800ce5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce60:	460c      	mov	r4, r1
 800ce62:	2001      	movs	r0, #1
 800ce64:	e7a8      	b.n	800cdb8 <_svfiprintf_r+0xd8>
 800ce66:	2300      	movs	r3, #0
 800ce68:	3401      	adds	r4, #1
 800ce6a:	9305      	str	r3, [sp, #20]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	f04f 0c0a 	mov.w	ip, #10
 800ce72:	4620      	mov	r0, r4
 800ce74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce78:	3a30      	subs	r2, #48	@ 0x30
 800ce7a:	2a09      	cmp	r2, #9
 800ce7c:	d903      	bls.n	800ce86 <_svfiprintf_r+0x1a6>
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d0c6      	beq.n	800ce10 <_svfiprintf_r+0x130>
 800ce82:	9105      	str	r1, [sp, #20]
 800ce84:	e7c4      	b.n	800ce10 <_svfiprintf_r+0x130>
 800ce86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e7f0      	b.n	800ce72 <_svfiprintf_r+0x192>
 800ce90:	ab03      	add	r3, sp, #12
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	462a      	mov	r2, r5
 800ce96:	4b0e      	ldr	r3, [pc, #56]	@ (800ced0 <_svfiprintf_r+0x1f0>)
 800ce98:	a904      	add	r1, sp, #16
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	f3af 8000 	nop.w
 800cea0:	1c42      	adds	r2, r0, #1
 800cea2:	4606      	mov	r6, r0
 800cea4:	d1d6      	bne.n	800ce54 <_svfiprintf_r+0x174>
 800cea6:	89ab      	ldrh	r3, [r5, #12]
 800cea8:	065b      	lsls	r3, r3, #25
 800ceaa:	f53f af2d 	bmi.w	800cd08 <_svfiprintf_r+0x28>
 800ceae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ceb0:	e72c      	b.n	800cd0c <_svfiprintf_r+0x2c>
 800ceb2:	ab03      	add	r3, sp, #12
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	4b05      	ldr	r3, [pc, #20]	@ (800ced0 <_svfiprintf_r+0x1f0>)
 800ceba:	a904      	add	r1, sp, #16
 800cebc:	4638      	mov	r0, r7
 800cebe:	f000 f879 	bl	800cfb4 <_printf_i>
 800cec2:	e7ed      	b.n	800cea0 <_svfiprintf_r+0x1c0>
 800cec4:	0800e1ab 	.word	0x0800e1ab
 800cec8:	0800e1b5 	.word	0x0800e1b5
 800cecc:	00000000 	.word	0x00000000
 800ced0:	0800cc29 	.word	0x0800cc29
 800ced4:	0800e1b1 	.word	0x0800e1b1

0800ced8 <_printf_common>:
 800ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cedc:	4616      	mov	r6, r2
 800cede:	4698      	mov	r8, r3
 800cee0:	688a      	ldr	r2, [r1, #8]
 800cee2:	690b      	ldr	r3, [r1, #16]
 800cee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cee8:	4293      	cmp	r3, r2
 800ceea:	bfb8      	it	lt
 800ceec:	4613      	movlt	r3, r2
 800ceee:	6033      	str	r3, [r6, #0]
 800cef0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cef4:	4607      	mov	r7, r0
 800cef6:	460c      	mov	r4, r1
 800cef8:	b10a      	cbz	r2, 800cefe <_printf_common+0x26>
 800cefa:	3301      	adds	r3, #1
 800cefc:	6033      	str	r3, [r6, #0]
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	0699      	lsls	r1, r3, #26
 800cf02:	bf42      	ittt	mi
 800cf04:	6833      	ldrmi	r3, [r6, #0]
 800cf06:	3302      	addmi	r3, #2
 800cf08:	6033      	strmi	r3, [r6, #0]
 800cf0a:	6825      	ldr	r5, [r4, #0]
 800cf0c:	f015 0506 	ands.w	r5, r5, #6
 800cf10:	d106      	bne.n	800cf20 <_printf_common+0x48>
 800cf12:	f104 0a19 	add.w	sl, r4, #25
 800cf16:	68e3      	ldr	r3, [r4, #12]
 800cf18:	6832      	ldr	r2, [r6, #0]
 800cf1a:	1a9b      	subs	r3, r3, r2
 800cf1c:	42ab      	cmp	r3, r5
 800cf1e:	dc26      	bgt.n	800cf6e <_printf_common+0x96>
 800cf20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf24:	6822      	ldr	r2, [r4, #0]
 800cf26:	3b00      	subs	r3, #0
 800cf28:	bf18      	it	ne
 800cf2a:	2301      	movne	r3, #1
 800cf2c:	0692      	lsls	r2, r2, #26
 800cf2e:	d42b      	bmi.n	800cf88 <_printf_common+0xb0>
 800cf30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf34:	4641      	mov	r1, r8
 800cf36:	4638      	mov	r0, r7
 800cf38:	47c8      	blx	r9
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	d01e      	beq.n	800cf7c <_printf_common+0xa4>
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	6922      	ldr	r2, [r4, #16]
 800cf42:	f003 0306 	and.w	r3, r3, #6
 800cf46:	2b04      	cmp	r3, #4
 800cf48:	bf02      	ittt	eq
 800cf4a:	68e5      	ldreq	r5, [r4, #12]
 800cf4c:	6833      	ldreq	r3, [r6, #0]
 800cf4e:	1aed      	subeq	r5, r5, r3
 800cf50:	68a3      	ldr	r3, [r4, #8]
 800cf52:	bf0c      	ite	eq
 800cf54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf58:	2500      	movne	r5, #0
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	bfc4      	itt	gt
 800cf5e:	1a9b      	subgt	r3, r3, r2
 800cf60:	18ed      	addgt	r5, r5, r3
 800cf62:	2600      	movs	r6, #0
 800cf64:	341a      	adds	r4, #26
 800cf66:	42b5      	cmp	r5, r6
 800cf68:	d11a      	bne.n	800cfa0 <_printf_common+0xc8>
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	e008      	b.n	800cf80 <_printf_common+0xa8>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	4652      	mov	r2, sl
 800cf72:	4641      	mov	r1, r8
 800cf74:	4638      	mov	r0, r7
 800cf76:	47c8      	blx	r9
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d103      	bne.n	800cf84 <_printf_common+0xac>
 800cf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf84:	3501      	adds	r5, #1
 800cf86:	e7c6      	b.n	800cf16 <_printf_common+0x3e>
 800cf88:	18e1      	adds	r1, r4, r3
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	2030      	movs	r0, #48	@ 0x30
 800cf8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf92:	4422      	add	r2, r4
 800cf94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf9c:	3302      	adds	r3, #2
 800cf9e:	e7c7      	b.n	800cf30 <_printf_common+0x58>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	4622      	mov	r2, r4
 800cfa4:	4641      	mov	r1, r8
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	47c8      	blx	r9
 800cfaa:	3001      	adds	r0, #1
 800cfac:	d0e6      	beq.n	800cf7c <_printf_common+0xa4>
 800cfae:	3601      	adds	r6, #1
 800cfb0:	e7d9      	b.n	800cf66 <_printf_common+0x8e>
	...

0800cfb4 <_printf_i>:
 800cfb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb8:	7e0f      	ldrb	r7, [r1, #24]
 800cfba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cfbc:	2f78      	cmp	r7, #120	@ 0x78
 800cfbe:	4691      	mov	r9, r2
 800cfc0:	4680      	mov	r8, r0
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	469a      	mov	sl, r3
 800cfc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cfca:	d807      	bhi.n	800cfdc <_printf_i+0x28>
 800cfcc:	2f62      	cmp	r7, #98	@ 0x62
 800cfce:	d80a      	bhi.n	800cfe6 <_printf_i+0x32>
 800cfd0:	2f00      	cmp	r7, #0
 800cfd2:	f000 80d2 	beq.w	800d17a <_printf_i+0x1c6>
 800cfd6:	2f58      	cmp	r7, #88	@ 0x58
 800cfd8:	f000 80b9 	beq.w	800d14e <_printf_i+0x19a>
 800cfdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cfe4:	e03a      	b.n	800d05c <_printf_i+0xa8>
 800cfe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cfea:	2b15      	cmp	r3, #21
 800cfec:	d8f6      	bhi.n	800cfdc <_printf_i+0x28>
 800cfee:	a101      	add	r1, pc, #4	@ (adr r1, 800cff4 <_printf_i+0x40>)
 800cff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cff4:	0800d04d 	.word	0x0800d04d
 800cff8:	0800d061 	.word	0x0800d061
 800cffc:	0800cfdd 	.word	0x0800cfdd
 800d000:	0800cfdd 	.word	0x0800cfdd
 800d004:	0800cfdd 	.word	0x0800cfdd
 800d008:	0800cfdd 	.word	0x0800cfdd
 800d00c:	0800d061 	.word	0x0800d061
 800d010:	0800cfdd 	.word	0x0800cfdd
 800d014:	0800cfdd 	.word	0x0800cfdd
 800d018:	0800cfdd 	.word	0x0800cfdd
 800d01c:	0800cfdd 	.word	0x0800cfdd
 800d020:	0800d161 	.word	0x0800d161
 800d024:	0800d08b 	.word	0x0800d08b
 800d028:	0800d11b 	.word	0x0800d11b
 800d02c:	0800cfdd 	.word	0x0800cfdd
 800d030:	0800cfdd 	.word	0x0800cfdd
 800d034:	0800d183 	.word	0x0800d183
 800d038:	0800cfdd 	.word	0x0800cfdd
 800d03c:	0800d08b 	.word	0x0800d08b
 800d040:	0800cfdd 	.word	0x0800cfdd
 800d044:	0800cfdd 	.word	0x0800cfdd
 800d048:	0800d123 	.word	0x0800d123
 800d04c:	6833      	ldr	r3, [r6, #0]
 800d04e:	1d1a      	adds	r2, r3, #4
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6032      	str	r2, [r6, #0]
 800d054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d05c:	2301      	movs	r3, #1
 800d05e:	e09d      	b.n	800d19c <_printf_i+0x1e8>
 800d060:	6833      	ldr	r3, [r6, #0]
 800d062:	6820      	ldr	r0, [r4, #0]
 800d064:	1d19      	adds	r1, r3, #4
 800d066:	6031      	str	r1, [r6, #0]
 800d068:	0606      	lsls	r6, r0, #24
 800d06a:	d501      	bpl.n	800d070 <_printf_i+0xbc>
 800d06c:	681d      	ldr	r5, [r3, #0]
 800d06e:	e003      	b.n	800d078 <_printf_i+0xc4>
 800d070:	0645      	lsls	r5, r0, #25
 800d072:	d5fb      	bpl.n	800d06c <_printf_i+0xb8>
 800d074:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d078:	2d00      	cmp	r5, #0
 800d07a:	da03      	bge.n	800d084 <_printf_i+0xd0>
 800d07c:	232d      	movs	r3, #45	@ 0x2d
 800d07e:	426d      	negs	r5, r5
 800d080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d084:	4859      	ldr	r0, [pc, #356]	@ (800d1ec <_printf_i+0x238>)
 800d086:	230a      	movs	r3, #10
 800d088:	e011      	b.n	800d0ae <_printf_i+0xfa>
 800d08a:	6821      	ldr	r1, [r4, #0]
 800d08c:	6833      	ldr	r3, [r6, #0]
 800d08e:	0608      	lsls	r0, r1, #24
 800d090:	f853 5b04 	ldr.w	r5, [r3], #4
 800d094:	d402      	bmi.n	800d09c <_printf_i+0xe8>
 800d096:	0649      	lsls	r1, r1, #25
 800d098:	bf48      	it	mi
 800d09a:	b2ad      	uxthmi	r5, r5
 800d09c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d09e:	4853      	ldr	r0, [pc, #332]	@ (800d1ec <_printf_i+0x238>)
 800d0a0:	6033      	str	r3, [r6, #0]
 800d0a2:	bf14      	ite	ne
 800d0a4:	230a      	movne	r3, #10
 800d0a6:	2308      	moveq	r3, #8
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d0ae:	6866      	ldr	r6, [r4, #4]
 800d0b0:	60a6      	str	r6, [r4, #8]
 800d0b2:	2e00      	cmp	r6, #0
 800d0b4:	bfa2      	ittt	ge
 800d0b6:	6821      	ldrge	r1, [r4, #0]
 800d0b8:	f021 0104 	bicge.w	r1, r1, #4
 800d0bc:	6021      	strge	r1, [r4, #0]
 800d0be:	b90d      	cbnz	r5, 800d0c4 <_printf_i+0x110>
 800d0c0:	2e00      	cmp	r6, #0
 800d0c2:	d04b      	beq.n	800d15c <_printf_i+0x1a8>
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0ca:	fb03 5711 	mls	r7, r3, r1, r5
 800d0ce:	5dc7      	ldrb	r7, [r0, r7]
 800d0d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0d4:	462f      	mov	r7, r5
 800d0d6:	42bb      	cmp	r3, r7
 800d0d8:	460d      	mov	r5, r1
 800d0da:	d9f4      	bls.n	800d0c6 <_printf_i+0x112>
 800d0dc:	2b08      	cmp	r3, #8
 800d0de:	d10b      	bne.n	800d0f8 <_printf_i+0x144>
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	07df      	lsls	r7, r3, #31
 800d0e4:	d508      	bpl.n	800d0f8 <_printf_i+0x144>
 800d0e6:	6923      	ldr	r3, [r4, #16]
 800d0e8:	6861      	ldr	r1, [r4, #4]
 800d0ea:	4299      	cmp	r1, r3
 800d0ec:	bfde      	ittt	le
 800d0ee:	2330      	movle	r3, #48	@ 0x30
 800d0f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0f8:	1b92      	subs	r2, r2, r6
 800d0fa:	6122      	str	r2, [r4, #16]
 800d0fc:	f8cd a000 	str.w	sl, [sp]
 800d100:	464b      	mov	r3, r9
 800d102:	aa03      	add	r2, sp, #12
 800d104:	4621      	mov	r1, r4
 800d106:	4640      	mov	r0, r8
 800d108:	f7ff fee6 	bl	800ced8 <_printf_common>
 800d10c:	3001      	adds	r0, #1
 800d10e:	d14a      	bne.n	800d1a6 <_printf_i+0x1f2>
 800d110:	f04f 30ff 	mov.w	r0, #4294967295
 800d114:	b004      	add	sp, #16
 800d116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	f043 0320 	orr.w	r3, r3, #32
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	4833      	ldr	r0, [pc, #204]	@ (800d1f0 <_printf_i+0x23c>)
 800d124:	2778      	movs	r7, #120	@ 0x78
 800d126:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d12a:	6823      	ldr	r3, [r4, #0]
 800d12c:	6831      	ldr	r1, [r6, #0]
 800d12e:	061f      	lsls	r7, r3, #24
 800d130:	f851 5b04 	ldr.w	r5, [r1], #4
 800d134:	d402      	bmi.n	800d13c <_printf_i+0x188>
 800d136:	065f      	lsls	r7, r3, #25
 800d138:	bf48      	it	mi
 800d13a:	b2ad      	uxthmi	r5, r5
 800d13c:	6031      	str	r1, [r6, #0]
 800d13e:	07d9      	lsls	r1, r3, #31
 800d140:	bf44      	itt	mi
 800d142:	f043 0320 	orrmi.w	r3, r3, #32
 800d146:	6023      	strmi	r3, [r4, #0]
 800d148:	b11d      	cbz	r5, 800d152 <_printf_i+0x19e>
 800d14a:	2310      	movs	r3, #16
 800d14c:	e7ac      	b.n	800d0a8 <_printf_i+0xf4>
 800d14e:	4827      	ldr	r0, [pc, #156]	@ (800d1ec <_printf_i+0x238>)
 800d150:	e7e9      	b.n	800d126 <_printf_i+0x172>
 800d152:	6823      	ldr	r3, [r4, #0]
 800d154:	f023 0320 	bic.w	r3, r3, #32
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	e7f6      	b.n	800d14a <_printf_i+0x196>
 800d15c:	4616      	mov	r6, r2
 800d15e:	e7bd      	b.n	800d0dc <_printf_i+0x128>
 800d160:	6833      	ldr	r3, [r6, #0]
 800d162:	6825      	ldr	r5, [r4, #0]
 800d164:	6961      	ldr	r1, [r4, #20]
 800d166:	1d18      	adds	r0, r3, #4
 800d168:	6030      	str	r0, [r6, #0]
 800d16a:	062e      	lsls	r6, r5, #24
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	d501      	bpl.n	800d174 <_printf_i+0x1c0>
 800d170:	6019      	str	r1, [r3, #0]
 800d172:	e002      	b.n	800d17a <_printf_i+0x1c6>
 800d174:	0668      	lsls	r0, r5, #25
 800d176:	d5fb      	bpl.n	800d170 <_printf_i+0x1bc>
 800d178:	8019      	strh	r1, [r3, #0]
 800d17a:	2300      	movs	r3, #0
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	4616      	mov	r6, r2
 800d180:	e7bc      	b.n	800d0fc <_printf_i+0x148>
 800d182:	6833      	ldr	r3, [r6, #0]
 800d184:	1d1a      	adds	r2, r3, #4
 800d186:	6032      	str	r2, [r6, #0]
 800d188:	681e      	ldr	r6, [r3, #0]
 800d18a:	6862      	ldr	r2, [r4, #4]
 800d18c:	2100      	movs	r1, #0
 800d18e:	4630      	mov	r0, r6
 800d190:	f7f3 f84e 	bl	8000230 <memchr>
 800d194:	b108      	cbz	r0, 800d19a <_printf_i+0x1e6>
 800d196:	1b80      	subs	r0, r0, r6
 800d198:	6060      	str	r0, [r4, #4]
 800d19a:	6863      	ldr	r3, [r4, #4]
 800d19c:	6123      	str	r3, [r4, #16]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1a4:	e7aa      	b.n	800d0fc <_printf_i+0x148>
 800d1a6:	6923      	ldr	r3, [r4, #16]
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	47d0      	blx	sl
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	d0ad      	beq.n	800d110 <_printf_i+0x15c>
 800d1b4:	6823      	ldr	r3, [r4, #0]
 800d1b6:	079b      	lsls	r3, r3, #30
 800d1b8:	d413      	bmi.n	800d1e2 <_printf_i+0x22e>
 800d1ba:	68e0      	ldr	r0, [r4, #12]
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	4298      	cmp	r0, r3
 800d1c0:	bfb8      	it	lt
 800d1c2:	4618      	movlt	r0, r3
 800d1c4:	e7a6      	b.n	800d114 <_printf_i+0x160>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4632      	mov	r2, r6
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	47d0      	blx	sl
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d09d      	beq.n	800d110 <_printf_i+0x15c>
 800d1d4:	3501      	adds	r5, #1
 800d1d6:	68e3      	ldr	r3, [r4, #12]
 800d1d8:	9903      	ldr	r1, [sp, #12]
 800d1da:	1a5b      	subs	r3, r3, r1
 800d1dc:	42ab      	cmp	r3, r5
 800d1de:	dcf2      	bgt.n	800d1c6 <_printf_i+0x212>
 800d1e0:	e7eb      	b.n	800d1ba <_printf_i+0x206>
 800d1e2:	2500      	movs	r5, #0
 800d1e4:	f104 0619 	add.w	r6, r4, #25
 800d1e8:	e7f5      	b.n	800d1d6 <_printf_i+0x222>
 800d1ea:	bf00      	nop
 800d1ec:	0800e1bc 	.word	0x0800e1bc
 800d1f0:	0800e1cd 	.word	0x0800e1cd

0800d1f4 <__sflush_r>:
 800d1f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fc:	0716      	lsls	r6, r2, #28
 800d1fe:	4605      	mov	r5, r0
 800d200:	460c      	mov	r4, r1
 800d202:	d454      	bmi.n	800d2ae <__sflush_r+0xba>
 800d204:	684b      	ldr	r3, [r1, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	dc02      	bgt.n	800d210 <__sflush_r+0x1c>
 800d20a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dd48      	ble.n	800d2a2 <__sflush_r+0xae>
 800d210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d212:	2e00      	cmp	r6, #0
 800d214:	d045      	beq.n	800d2a2 <__sflush_r+0xae>
 800d216:	2300      	movs	r3, #0
 800d218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d21c:	682f      	ldr	r7, [r5, #0]
 800d21e:	6a21      	ldr	r1, [r4, #32]
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	d030      	beq.n	800d286 <__sflush_r+0x92>
 800d224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	0759      	lsls	r1, r3, #29
 800d22a:	d505      	bpl.n	800d238 <__sflush_r+0x44>
 800d22c:	6863      	ldr	r3, [r4, #4]
 800d22e:	1ad2      	subs	r2, r2, r3
 800d230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d232:	b10b      	cbz	r3, 800d238 <__sflush_r+0x44>
 800d234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d236:	1ad2      	subs	r2, r2, r3
 800d238:	2300      	movs	r3, #0
 800d23a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d23c:	6a21      	ldr	r1, [r4, #32]
 800d23e:	4628      	mov	r0, r5
 800d240:	47b0      	blx	r6
 800d242:	1c43      	adds	r3, r0, #1
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	d106      	bne.n	800d256 <__sflush_r+0x62>
 800d248:	6829      	ldr	r1, [r5, #0]
 800d24a:	291d      	cmp	r1, #29
 800d24c:	d82b      	bhi.n	800d2a6 <__sflush_r+0xb2>
 800d24e:	4a2a      	ldr	r2, [pc, #168]	@ (800d2f8 <__sflush_r+0x104>)
 800d250:	410a      	asrs	r2, r1
 800d252:	07d6      	lsls	r6, r2, #31
 800d254:	d427      	bmi.n	800d2a6 <__sflush_r+0xb2>
 800d256:	2200      	movs	r2, #0
 800d258:	6062      	str	r2, [r4, #4]
 800d25a:	04d9      	lsls	r1, r3, #19
 800d25c:	6922      	ldr	r2, [r4, #16]
 800d25e:	6022      	str	r2, [r4, #0]
 800d260:	d504      	bpl.n	800d26c <__sflush_r+0x78>
 800d262:	1c42      	adds	r2, r0, #1
 800d264:	d101      	bne.n	800d26a <__sflush_r+0x76>
 800d266:	682b      	ldr	r3, [r5, #0]
 800d268:	b903      	cbnz	r3, 800d26c <__sflush_r+0x78>
 800d26a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d26e:	602f      	str	r7, [r5, #0]
 800d270:	b1b9      	cbz	r1, 800d2a2 <__sflush_r+0xae>
 800d272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d276:	4299      	cmp	r1, r3
 800d278:	d002      	beq.n	800d280 <__sflush_r+0x8c>
 800d27a:	4628      	mov	r0, r5
 800d27c:	f7ff fbd4 	bl	800ca28 <_free_r>
 800d280:	2300      	movs	r3, #0
 800d282:	6363      	str	r3, [r4, #52]	@ 0x34
 800d284:	e00d      	b.n	800d2a2 <__sflush_r+0xae>
 800d286:	2301      	movs	r3, #1
 800d288:	4628      	mov	r0, r5
 800d28a:	47b0      	blx	r6
 800d28c:	4602      	mov	r2, r0
 800d28e:	1c50      	adds	r0, r2, #1
 800d290:	d1c9      	bne.n	800d226 <__sflush_r+0x32>
 800d292:	682b      	ldr	r3, [r5, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0c6      	beq.n	800d226 <__sflush_r+0x32>
 800d298:	2b1d      	cmp	r3, #29
 800d29a:	d001      	beq.n	800d2a0 <__sflush_r+0xac>
 800d29c:	2b16      	cmp	r3, #22
 800d29e:	d11e      	bne.n	800d2de <__sflush_r+0xea>
 800d2a0:	602f      	str	r7, [r5, #0]
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	e022      	b.n	800d2ec <__sflush_r+0xf8>
 800d2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2aa:	b21b      	sxth	r3, r3
 800d2ac:	e01b      	b.n	800d2e6 <__sflush_r+0xf2>
 800d2ae:	690f      	ldr	r7, [r1, #16]
 800d2b0:	2f00      	cmp	r7, #0
 800d2b2:	d0f6      	beq.n	800d2a2 <__sflush_r+0xae>
 800d2b4:	0793      	lsls	r3, r2, #30
 800d2b6:	680e      	ldr	r6, [r1, #0]
 800d2b8:	bf08      	it	eq
 800d2ba:	694b      	ldreq	r3, [r1, #20]
 800d2bc:	600f      	str	r7, [r1, #0]
 800d2be:	bf18      	it	ne
 800d2c0:	2300      	movne	r3, #0
 800d2c2:	eba6 0807 	sub.w	r8, r6, r7
 800d2c6:	608b      	str	r3, [r1, #8]
 800d2c8:	f1b8 0f00 	cmp.w	r8, #0
 800d2cc:	dde9      	ble.n	800d2a2 <__sflush_r+0xae>
 800d2ce:	6a21      	ldr	r1, [r4, #32]
 800d2d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2d2:	4643      	mov	r3, r8
 800d2d4:	463a      	mov	r2, r7
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	47b0      	blx	r6
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	dc08      	bgt.n	800d2f0 <__sflush_r+0xfc>
 800d2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2e6:	81a3      	strh	r3, [r4, #12]
 800d2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f0:	4407      	add	r7, r0
 800d2f2:	eba8 0800 	sub.w	r8, r8, r0
 800d2f6:	e7e7      	b.n	800d2c8 <__sflush_r+0xd4>
 800d2f8:	dfbffffe 	.word	0xdfbffffe

0800d2fc <_fflush_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	690b      	ldr	r3, [r1, #16]
 800d300:	4605      	mov	r5, r0
 800d302:	460c      	mov	r4, r1
 800d304:	b913      	cbnz	r3, 800d30c <_fflush_r+0x10>
 800d306:	2500      	movs	r5, #0
 800d308:	4628      	mov	r0, r5
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	b118      	cbz	r0, 800d316 <_fflush_r+0x1a>
 800d30e:	6a03      	ldr	r3, [r0, #32]
 800d310:	b90b      	cbnz	r3, 800d316 <_fflush_r+0x1a>
 800d312:	f7ff fa47 	bl	800c7a4 <__sinit>
 800d316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d0f3      	beq.n	800d306 <_fflush_r+0xa>
 800d31e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d320:	07d0      	lsls	r0, r2, #31
 800d322:	d404      	bmi.n	800d32e <_fflush_r+0x32>
 800d324:	0599      	lsls	r1, r3, #22
 800d326:	d402      	bmi.n	800d32e <_fflush_r+0x32>
 800d328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d32a:	f7ff fb4e 	bl	800c9ca <__retarget_lock_acquire_recursive>
 800d32e:	4628      	mov	r0, r5
 800d330:	4621      	mov	r1, r4
 800d332:	f7ff ff5f 	bl	800d1f4 <__sflush_r>
 800d336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d338:	07da      	lsls	r2, r3, #31
 800d33a:	4605      	mov	r5, r0
 800d33c:	d4e4      	bmi.n	800d308 <_fflush_r+0xc>
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	059b      	lsls	r3, r3, #22
 800d342:	d4e1      	bmi.n	800d308 <_fflush_r+0xc>
 800d344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d346:	f7ff fb41 	bl	800c9cc <__retarget_lock_release_recursive>
 800d34a:	e7dd      	b.n	800d308 <_fflush_r+0xc>

0800d34c <fiprintf>:
 800d34c:	b40e      	push	{r1, r2, r3}
 800d34e:	b503      	push	{r0, r1, lr}
 800d350:	4601      	mov	r1, r0
 800d352:	ab03      	add	r3, sp, #12
 800d354:	4805      	ldr	r0, [pc, #20]	@ (800d36c <fiprintf+0x20>)
 800d356:	f853 2b04 	ldr.w	r2, [r3], #4
 800d35a:	6800      	ldr	r0, [r0, #0]
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	f000 f88f 	bl	800d480 <_vfiprintf_r>
 800d362:	b002      	add	sp, #8
 800d364:	f85d eb04 	ldr.w	lr, [sp], #4
 800d368:	b003      	add	sp, #12
 800d36a:	4770      	bx	lr
 800d36c:	20000058 	.word	0x20000058

0800d370 <memmove>:
 800d370:	4288      	cmp	r0, r1
 800d372:	b510      	push	{r4, lr}
 800d374:	eb01 0402 	add.w	r4, r1, r2
 800d378:	d902      	bls.n	800d380 <memmove+0x10>
 800d37a:	4284      	cmp	r4, r0
 800d37c:	4623      	mov	r3, r4
 800d37e:	d807      	bhi.n	800d390 <memmove+0x20>
 800d380:	1e43      	subs	r3, r0, #1
 800d382:	42a1      	cmp	r1, r4
 800d384:	d008      	beq.n	800d398 <memmove+0x28>
 800d386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d38a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d38e:	e7f8      	b.n	800d382 <memmove+0x12>
 800d390:	4402      	add	r2, r0
 800d392:	4601      	mov	r1, r0
 800d394:	428a      	cmp	r2, r1
 800d396:	d100      	bne.n	800d39a <memmove+0x2a>
 800d398:	bd10      	pop	{r4, pc}
 800d39a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d39e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3a2:	e7f7      	b.n	800d394 <memmove+0x24>

0800d3a4 <_sbrk_r>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4d06      	ldr	r5, [pc, #24]	@ (800d3c0 <_sbrk_r+0x1c>)
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	602b      	str	r3, [r5, #0]
 800d3b0:	f7f5 fd44 	bl	8002e3c <_sbrk>
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	d102      	bne.n	800d3be <_sbrk_r+0x1a>
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	b103      	cbz	r3, 800d3be <_sbrk_r+0x1a>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	20002440 	.word	0x20002440

0800d3c4 <abort>:
 800d3c4:	b508      	push	{r3, lr}
 800d3c6:	2006      	movs	r0, #6
 800d3c8:	f000 fa2e 	bl	800d828 <raise>
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	f7f5 fcbd 	bl	8002d4c <_exit>

0800d3d2 <_realloc_r>:
 800d3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d6:	4680      	mov	r8, r0
 800d3d8:	4615      	mov	r5, r2
 800d3da:	460c      	mov	r4, r1
 800d3dc:	b921      	cbnz	r1, 800d3e8 <_realloc_r+0x16>
 800d3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	f7ff bb94 	b.w	800cb10 <_malloc_r>
 800d3e8:	b92a      	cbnz	r2, 800d3f6 <_realloc_r+0x24>
 800d3ea:	f7ff fb1d 	bl	800ca28 <_free_r>
 800d3ee:	2400      	movs	r4, #0
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f6:	f000 fa33 	bl	800d860 <_malloc_usable_size_r>
 800d3fa:	4285      	cmp	r5, r0
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	d802      	bhi.n	800d406 <_realloc_r+0x34>
 800d400:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d404:	d8f4      	bhi.n	800d3f0 <_realloc_r+0x1e>
 800d406:	4629      	mov	r1, r5
 800d408:	4640      	mov	r0, r8
 800d40a:	f7ff fb81 	bl	800cb10 <_malloc_r>
 800d40e:	4607      	mov	r7, r0
 800d410:	2800      	cmp	r0, #0
 800d412:	d0ec      	beq.n	800d3ee <_realloc_r+0x1c>
 800d414:	42b5      	cmp	r5, r6
 800d416:	462a      	mov	r2, r5
 800d418:	4621      	mov	r1, r4
 800d41a:	bf28      	it	cs
 800d41c:	4632      	movcs	r2, r6
 800d41e:	f7ff fad6 	bl	800c9ce <memcpy>
 800d422:	4621      	mov	r1, r4
 800d424:	4640      	mov	r0, r8
 800d426:	f7ff faff 	bl	800ca28 <_free_r>
 800d42a:	463c      	mov	r4, r7
 800d42c:	e7e0      	b.n	800d3f0 <_realloc_r+0x1e>

0800d42e <__sfputc_r>:
 800d42e:	6893      	ldr	r3, [r2, #8]
 800d430:	3b01      	subs	r3, #1
 800d432:	2b00      	cmp	r3, #0
 800d434:	b410      	push	{r4}
 800d436:	6093      	str	r3, [r2, #8]
 800d438:	da08      	bge.n	800d44c <__sfputc_r+0x1e>
 800d43a:	6994      	ldr	r4, [r2, #24]
 800d43c:	42a3      	cmp	r3, r4
 800d43e:	db01      	blt.n	800d444 <__sfputc_r+0x16>
 800d440:	290a      	cmp	r1, #10
 800d442:	d103      	bne.n	800d44c <__sfputc_r+0x1e>
 800d444:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d448:	f000 b932 	b.w	800d6b0 <__swbuf_r>
 800d44c:	6813      	ldr	r3, [r2, #0]
 800d44e:	1c58      	adds	r0, r3, #1
 800d450:	6010      	str	r0, [r2, #0]
 800d452:	7019      	strb	r1, [r3, #0]
 800d454:	4608      	mov	r0, r1
 800d456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <__sfputs_r>:
 800d45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45e:	4606      	mov	r6, r0
 800d460:	460f      	mov	r7, r1
 800d462:	4614      	mov	r4, r2
 800d464:	18d5      	adds	r5, r2, r3
 800d466:	42ac      	cmp	r4, r5
 800d468:	d101      	bne.n	800d46e <__sfputs_r+0x12>
 800d46a:	2000      	movs	r0, #0
 800d46c:	e007      	b.n	800d47e <__sfputs_r+0x22>
 800d46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d472:	463a      	mov	r2, r7
 800d474:	4630      	mov	r0, r6
 800d476:	f7ff ffda 	bl	800d42e <__sfputc_r>
 800d47a:	1c43      	adds	r3, r0, #1
 800d47c:	d1f3      	bne.n	800d466 <__sfputs_r+0xa>
 800d47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d480 <_vfiprintf_r>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	460d      	mov	r5, r1
 800d486:	b09d      	sub	sp, #116	@ 0x74
 800d488:	4614      	mov	r4, r2
 800d48a:	4698      	mov	r8, r3
 800d48c:	4606      	mov	r6, r0
 800d48e:	b118      	cbz	r0, 800d498 <_vfiprintf_r+0x18>
 800d490:	6a03      	ldr	r3, [r0, #32]
 800d492:	b90b      	cbnz	r3, 800d498 <_vfiprintf_r+0x18>
 800d494:	f7ff f986 	bl	800c7a4 <__sinit>
 800d498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d49a:	07d9      	lsls	r1, r3, #31
 800d49c:	d405      	bmi.n	800d4aa <_vfiprintf_r+0x2a>
 800d49e:	89ab      	ldrh	r3, [r5, #12]
 800d4a0:	059a      	lsls	r2, r3, #22
 800d4a2:	d402      	bmi.n	800d4aa <_vfiprintf_r+0x2a>
 800d4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4a6:	f7ff fa90 	bl	800c9ca <__retarget_lock_acquire_recursive>
 800d4aa:	89ab      	ldrh	r3, [r5, #12]
 800d4ac:	071b      	lsls	r3, r3, #28
 800d4ae:	d501      	bpl.n	800d4b4 <_vfiprintf_r+0x34>
 800d4b0:	692b      	ldr	r3, [r5, #16]
 800d4b2:	b99b      	cbnz	r3, 800d4dc <_vfiprintf_r+0x5c>
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	f000 f938 	bl	800d72c <__swsetup_r>
 800d4bc:	b170      	cbz	r0, 800d4dc <_vfiprintf_r+0x5c>
 800d4be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4c0:	07dc      	lsls	r4, r3, #31
 800d4c2:	d504      	bpl.n	800d4ce <_vfiprintf_r+0x4e>
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	b01d      	add	sp, #116	@ 0x74
 800d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ce:	89ab      	ldrh	r3, [r5, #12]
 800d4d0:	0598      	lsls	r0, r3, #22
 800d4d2:	d4f7      	bmi.n	800d4c4 <_vfiprintf_r+0x44>
 800d4d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4d6:	f7ff fa79 	bl	800c9cc <__retarget_lock_release_recursive>
 800d4da:	e7f3      	b.n	800d4c4 <_vfiprintf_r+0x44>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4e0:	2320      	movs	r3, #32
 800d4e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ea:	2330      	movs	r3, #48	@ 0x30
 800d4ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d69c <_vfiprintf_r+0x21c>
 800d4f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4f4:	f04f 0901 	mov.w	r9, #1
 800d4f8:	4623      	mov	r3, r4
 800d4fa:	469a      	mov	sl, r3
 800d4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d500:	b10a      	cbz	r2, 800d506 <_vfiprintf_r+0x86>
 800d502:	2a25      	cmp	r2, #37	@ 0x25
 800d504:	d1f9      	bne.n	800d4fa <_vfiprintf_r+0x7a>
 800d506:	ebba 0b04 	subs.w	fp, sl, r4
 800d50a:	d00b      	beq.n	800d524 <_vfiprintf_r+0xa4>
 800d50c:	465b      	mov	r3, fp
 800d50e:	4622      	mov	r2, r4
 800d510:	4629      	mov	r1, r5
 800d512:	4630      	mov	r0, r6
 800d514:	f7ff ffa2 	bl	800d45c <__sfputs_r>
 800d518:	3001      	adds	r0, #1
 800d51a:	f000 80a7 	beq.w	800d66c <_vfiprintf_r+0x1ec>
 800d51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d520:	445a      	add	r2, fp
 800d522:	9209      	str	r2, [sp, #36]	@ 0x24
 800d524:	f89a 3000 	ldrb.w	r3, [sl]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f000 809f 	beq.w	800d66c <_vfiprintf_r+0x1ec>
 800d52e:	2300      	movs	r3, #0
 800d530:	f04f 32ff 	mov.w	r2, #4294967295
 800d534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d538:	f10a 0a01 	add.w	sl, sl, #1
 800d53c:	9304      	str	r3, [sp, #16]
 800d53e:	9307      	str	r3, [sp, #28]
 800d540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d544:	931a      	str	r3, [sp, #104]	@ 0x68
 800d546:	4654      	mov	r4, sl
 800d548:	2205      	movs	r2, #5
 800d54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d54e:	4853      	ldr	r0, [pc, #332]	@ (800d69c <_vfiprintf_r+0x21c>)
 800d550:	f7f2 fe6e 	bl	8000230 <memchr>
 800d554:	9a04      	ldr	r2, [sp, #16]
 800d556:	b9d8      	cbnz	r0, 800d590 <_vfiprintf_r+0x110>
 800d558:	06d1      	lsls	r1, r2, #27
 800d55a:	bf44      	itt	mi
 800d55c:	2320      	movmi	r3, #32
 800d55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d562:	0713      	lsls	r3, r2, #28
 800d564:	bf44      	itt	mi
 800d566:	232b      	movmi	r3, #43	@ 0x2b
 800d568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d56c:	f89a 3000 	ldrb.w	r3, [sl]
 800d570:	2b2a      	cmp	r3, #42	@ 0x2a
 800d572:	d015      	beq.n	800d5a0 <_vfiprintf_r+0x120>
 800d574:	9a07      	ldr	r2, [sp, #28]
 800d576:	4654      	mov	r4, sl
 800d578:	2000      	movs	r0, #0
 800d57a:	f04f 0c0a 	mov.w	ip, #10
 800d57e:	4621      	mov	r1, r4
 800d580:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d584:	3b30      	subs	r3, #48	@ 0x30
 800d586:	2b09      	cmp	r3, #9
 800d588:	d94b      	bls.n	800d622 <_vfiprintf_r+0x1a2>
 800d58a:	b1b0      	cbz	r0, 800d5ba <_vfiprintf_r+0x13a>
 800d58c:	9207      	str	r2, [sp, #28]
 800d58e:	e014      	b.n	800d5ba <_vfiprintf_r+0x13a>
 800d590:	eba0 0308 	sub.w	r3, r0, r8
 800d594:	fa09 f303 	lsl.w	r3, r9, r3
 800d598:	4313      	orrs	r3, r2
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	46a2      	mov	sl, r4
 800d59e:	e7d2      	b.n	800d546 <_vfiprintf_r+0xc6>
 800d5a0:	9b03      	ldr	r3, [sp, #12]
 800d5a2:	1d19      	adds	r1, r3, #4
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	9103      	str	r1, [sp, #12]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	bfbb      	ittet	lt
 800d5ac:	425b      	neglt	r3, r3
 800d5ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d5b2:	9307      	strge	r3, [sp, #28]
 800d5b4:	9307      	strlt	r3, [sp, #28]
 800d5b6:	bfb8      	it	lt
 800d5b8:	9204      	strlt	r2, [sp, #16]
 800d5ba:	7823      	ldrb	r3, [r4, #0]
 800d5bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5be:	d10a      	bne.n	800d5d6 <_vfiprintf_r+0x156>
 800d5c0:	7863      	ldrb	r3, [r4, #1]
 800d5c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5c4:	d132      	bne.n	800d62c <_vfiprintf_r+0x1ac>
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	1d1a      	adds	r2, r3, #4
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	9203      	str	r2, [sp, #12]
 800d5ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5d2:	3402      	adds	r4, #2
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d6ac <_vfiprintf_r+0x22c>
 800d5da:	7821      	ldrb	r1, [r4, #0]
 800d5dc:	2203      	movs	r2, #3
 800d5de:	4650      	mov	r0, sl
 800d5e0:	f7f2 fe26 	bl	8000230 <memchr>
 800d5e4:	b138      	cbz	r0, 800d5f6 <_vfiprintf_r+0x176>
 800d5e6:	9b04      	ldr	r3, [sp, #16]
 800d5e8:	eba0 000a 	sub.w	r0, r0, sl
 800d5ec:	2240      	movs	r2, #64	@ 0x40
 800d5ee:	4082      	lsls	r2, r0
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	3401      	adds	r4, #1
 800d5f4:	9304      	str	r3, [sp, #16]
 800d5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5fa:	4829      	ldr	r0, [pc, #164]	@ (800d6a0 <_vfiprintf_r+0x220>)
 800d5fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d600:	2206      	movs	r2, #6
 800d602:	f7f2 fe15 	bl	8000230 <memchr>
 800d606:	2800      	cmp	r0, #0
 800d608:	d03f      	beq.n	800d68a <_vfiprintf_r+0x20a>
 800d60a:	4b26      	ldr	r3, [pc, #152]	@ (800d6a4 <_vfiprintf_r+0x224>)
 800d60c:	bb1b      	cbnz	r3, 800d656 <_vfiprintf_r+0x1d6>
 800d60e:	9b03      	ldr	r3, [sp, #12]
 800d610:	3307      	adds	r3, #7
 800d612:	f023 0307 	bic.w	r3, r3, #7
 800d616:	3308      	adds	r3, #8
 800d618:	9303      	str	r3, [sp, #12]
 800d61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d61c:	443b      	add	r3, r7
 800d61e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d620:	e76a      	b.n	800d4f8 <_vfiprintf_r+0x78>
 800d622:	fb0c 3202 	mla	r2, ip, r2, r3
 800d626:	460c      	mov	r4, r1
 800d628:	2001      	movs	r0, #1
 800d62a:	e7a8      	b.n	800d57e <_vfiprintf_r+0xfe>
 800d62c:	2300      	movs	r3, #0
 800d62e:	3401      	adds	r4, #1
 800d630:	9305      	str	r3, [sp, #20]
 800d632:	4619      	mov	r1, r3
 800d634:	f04f 0c0a 	mov.w	ip, #10
 800d638:	4620      	mov	r0, r4
 800d63a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d63e:	3a30      	subs	r2, #48	@ 0x30
 800d640:	2a09      	cmp	r2, #9
 800d642:	d903      	bls.n	800d64c <_vfiprintf_r+0x1cc>
 800d644:	2b00      	cmp	r3, #0
 800d646:	d0c6      	beq.n	800d5d6 <_vfiprintf_r+0x156>
 800d648:	9105      	str	r1, [sp, #20]
 800d64a:	e7c4      	b.n	800d5d6 <_vfiprintf_r+0x156>
 800d64c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d650:	4604      	mov	r4, r0
 800d652:	2301      	movs	r3, #1
 800d654:	e7f0      	b.n	800d638 <_vfiprintf_r+0x1b8>
 800d656:	ab03      	add	r3, sp, #12
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	462a      	mov	r2, r5
 800d65c:	4b12      	ldr	r3, [pc, #72]	@ (800d6a8 <_vfiprintf_r+0x228>)
 800d65e:	a904      	add	r1, sp, #16
 800d660:	4630      	mov	r0, r6
 800d662:	f3af 8000 	nop.w
 800d666:	4607      	mov	r7, r0
 800d668:	1c78      	adds	r0, r7, #1
 800d66a:	d1d6      	bne.n	800d61a <_vfiprintf_r+0x19a>
 800d66c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d66e:	07d9      	lsls	r1, r3, #31
 800d670:	d405      	bmi.n	800d67e <_vfiprintf_r+0x1fe>
 800d672:	89ab      	ldrh	r3, [r5, #12]
 800d674:	059a      	lsls	r2, r3, #22
 800d676:	d402      	bmi.n	800d67e <_vfiprintf_r+0x1fe>
 800d678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d67a:	f7ff f9a7 	bl	800c9cc <__retarget_lock_release_recursive>
 800d67e:	89ab      	ldrh	r3, [r5, #12]
 800d680:	065b      	lsls	r3, r3, #25
 800d682:	f53f af1f 	bmi.w	800d4c4 <_vfiprintf_r+0x44>
 800d686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d688:	e71e      	b.n	800d4c8 <_vfiprintf_r+0x48>
 800d68a:	ab03      	add	r3, sp, #12
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	462a      	mov	r2, r5
 800d690:	4b05      	ldr	r3, [pc, #20]	@ (800d6a8 <_vfiprintf_r+0x228>)
 800d692:	a904      	add	r1, sp, #16
 800d694:	4630      	mov	r0, r6
 800d696:	f7ff fc8d 	bl	800cfb4 <_printf_i>
 800d69a:	e7e4      	b.n	800d666 <_vfiprintf_r+0x1e6>
 800d69c:	0800e1ab 	.word	0x0800e1ab
 800d6a0:	0800e1b5 	.word	0x0800e1b5
 800d6a4:	00000000 	.word	0x00000000
 800d6a8:	0800d45d 	.word	0x0800d45d
 800d6ac:	0800e1b1 	.word	0x0800e1b1

0800d6b0 <__swbuf_r>:
 800d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b2:	460e      	mov	r6, r1
 800d6b4:	4614      	mov	r4, r2
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	b118      	cbz	r0, 800d6c2 <__swbuf_r+0x12>
 800d6ba:	6a03      	ldr	r3, [r0, #32]
 800d6bc:	b90b      	cbnz	r3, 800d6c2 <__swbuf_r+0x12>
 800d6be:	f7ff f871 	bl	800c7a4 <__sinit>
 800d6c2:	69a3      	ldr	r3, [r4, #24]
 800d6c4:	60a3      	str	r3, [r4, #8]
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	071a      	lsls	r2, r3, #28
 800d6ca:	d501      	bpl.n	800d6d0 <__swbuf_r+0x20>
 800d6cc:	6923      	ldr	r3, [r4, #16]
 800d6ce:	b943      	cbnz	r3, 800d6e2 <__swbuf_r+0x32>
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f000 f82a 	bl	800d72c <__swsetup_r>
 800d6d8:	b118      	cbz	r0, 800d6e2 <__swbuf_r+0x32>
 800d6da:	f04f 37ff 	mov.w	r7, #4294967295
 800d6de:	4638      	mov	r0, r7
 800d6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	6922      	ldr	r2, [r4, #16]
 800d6e6:	1a98      	subs	r0, r3, r2
 800d6e8:	6963      	ldr	r3, [r4, #20]
 800d6ea:	b2f6      	uxtb	r6, r6
 800d6ec:	4283      	cmp	r3, r0
 800d6ee:	4637      	mov	r7, r6
 800d6f0:	dc05      	bgt.n	800d6fe <__swbuf_r+0x4e>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f7ff fe01 	bl	800d2fc <_fflush_r>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d1ed      	bne.n	800d6da <__swbuf_r+0x2a>
 800d6fe:	68a3      	ldr	r3, [r4, #8]
 800d700:	3b01      	subs	r3, #1
 800d702:	60a3      	str	r3, [r4, #8]
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	6022      	str	r2, [r4, #0]
 800d70a:	701e      	strb	r6, [r3, #0]
 800d70c:	6962      	ldr	r2, [r4, #20]
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	429a      	cmp	r2, r3
 800d712:	d004      	beq.n	800d71e <__swbuf_r+0x6e>
 800d714:	89a3      	ldrh	r3, [r4, #12]
 800d716:	07db      	lsls	r3, r3, #31
 800d718:	d5e1      	bpl.n	800d6de <__swbuf_r+0x2e>
 800d71a:	2e0a      	cmp	r6, #10
 800d71c:	d1df      	bne.n	800d6de <__swbuf_r+0x2e>
 800d71e:	4621      	mov	r1, r4
 800d720:	4628      	mov	r0, r5
 800d722:	f7ff fdeb 	bl	800d2fc <_fflush_r>
 800d726:	2800      	cmp	r0, #0
 800d728:	d0d9      	beq.n	800d6de <__swbuf_r+0x2e>
 800d72a:	e7d6      	b.n	800d6da <__swbuf_r+0x2a>

0800d72c <__swsetup_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4b29      	ldr	r3, [pc, #164]	@ (800d7d4 <__swsetup_r+0xa8>)
 800d730:	4605      	mov	r5, r0
 800d732:	6818      	ldr	r0, [r3, #0]
 800d734:	460c      	mov	r4, r1
 800d736:	b118      	cbz	r0, 800d740 <__swsetup_r+0x14>
 800d738:	6a03      	ldr	r3, [r0, #32]
 800d73a:	b90b      	cbnz	r3, 800d740 <__swsetup_r+0x14>
 800d73c:	f7ff f832 	bl	800c7a4 <__sinit>
 800d740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d744:	0719      	lsls	r1, r3, #28
 800d746:	d422      	bmi.n	800d78e <__swsetup_r+0x62>
 800d748:	06da      	lsls	r2, r3, #27
 800d74a:	d407      	bmi.n	800d75c <__swsetup_r+0x30>
 800d74c:	2209      	movs	r2, #9
 800d74e:	602a      	str	r2, [r5, #0]
 800d750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d754:	81a3      	strh	r3, [r4, #12]
 800d756:	f04f 30ff 	mov.w	r0, #4294967295
 800d75a:	e033      	b.n	800d7c4 <__swsetup_r+0x98>
 800d75c:	0758      	lsls	r0, r3, #29
 800d75e:	d512      	bpl.n	800d786 <__swsetup_r+0x5a>
 800d760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d762:	b141      	cbz	r1, 800d776 <__swsetup_r+0x4a>
 800d764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d768:	4299      	cmp	r1, r3
 800d76a:	d002      	beq.n	800d772 <__swsetup_r+0x46>
 800d76c:	4628      	mov	r0, r5
 800d76e:	f7ff f95b 	bl	800ca28 <_free_r>
 800d772:	2300      	movs	r3, #0
 800d774:	6363      	str	r3, [r4, #52]	@ 0x34
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	2300      	movs	r3, #0
 800d780:	6063      	str	r3, [r4, #4]
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	f043 0308 	orr.w	r3, r3, #8
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	b94b      	cbnz	r3, 800d7a6 <__swsetup_r+0x7a>
 800d792:	89a3      	ldrh	r3, [r4, #12]
 800d794:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d79c:	d003      	beq.n	800d7a6 <__swsetup_r+0x7a>
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f000 f88b 	bl	800d8bc <__smakebuf_r>
 800d7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7aa:	f013 0201 	ands.w	r2, r3, #1
 800d7ae:	d00a      	beq.n	800d7c6 <__swsetup_r+0x9a>
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	60a2      	str	r2, [r4, #8]
 800d7b4:	6962      	ldr	r2, [r4, #20]
 800d7b6:	4252      	negs	r2, r2
 800d7b8:	61a2      	str	r2, [r4, #24]
 800d7ba:	6922      	ldr	r2, [r4, #16]
 800d7bc:	b942      	cbnz	r2, 800d7d0 <__swsetup_r+0xa4>
 800d7be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d7c2:	d1c5      	bne.n	800d750 <__swsetup_r+0x24>
 800d7c4:	bd38      	pop	{r3, r4, r5, pc}
 800d7c6:	0799      	lsls	r1, r3, #30
 800d7c8:	bf58      	it	pl
 800d7ca:	6962      	ldrpl	r2, [r4, #20]
 800d7cc:	60a2      	str	r2, [r4, #8]
 800d7ce:	e7f4      	b.n	800d7ba <__swsetup_r+0x8e>
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	e7f7      	b.n	800d7c4 <__swsetup_r+0x98>
 800d7d4:	20000058 	.word	0x20000058

0800d7d8 <_raise_r>:
 800d7d8:	291f      	cmp	r1, #31
 800d7da:	b538      	push	{r3, r4, r5, lr}
 800d7dc:	4605      	mov	r5, r0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	d904      	bls.n	800d7ec <_raise_r+0x14>
 800d7e2:	2316      	movs	r3, #22
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ea:	bd38      	pop	{r3, r4, r5, pc}
 800d7ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7ee:	b112      	cbz	r2, 800d7f6 <_raise_r+0x1e>
 800d7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7f4:	b94b      	cbnz	r3, 800d80a <_raise_r+0x32>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f000 f830 	bl	800d85c <_getpid_r>
 800d7fc:	4622      	mov	r2, r4
 800d7fe:	4601      	mov	r1, r0
 800d800:	4628      	mov	r0, r5
 800d802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d806:	f000 b817 	b.w	800d838 <_kill_r>
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d00a      	beq.n	800d824 <_raise_r+0x4c>
 800d80e:	1c59      	adds	r1, r3, #1
 800d810:	d103      	bne.n	800d81a <_raise_r+0x42>
 800d812:	2316      	movs	r3, #22
 800d814:	6003      	str	r3, [r0, #0]
 800d816:	2001      	movs	r0, #1
 800d818:	e7e7      	b.n	800d7ea <_raise_r+0x12>
 800d81a:	2100      	movs	r1, #0
 800d81c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d820:	4620      	mov	r0, r4
 800d822:	4798      	blx	r3
 800d824:	2000      	movs	r0, #0
 800d826:	e7e0      	b.n	800d7ea <_raise_r+0x12>

0800d828 <raise>:
 800d828:	4b02      	ldr	r3, [pc, #8]	@ (800d834 <raise+0xc>)
 800d82a:	4601      	mov	r1, r0
 800d82c:	6818      	ldr	r0, [r3, #0]
 800d82e:	f7ff bfd3 	b.w	800d7d8 <_raise_r>
 800d832:	bf00      	nop
 800d834:	20000058 	.word	0x20000058

0800d838 <_kill_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d07      	ldr	r5, [pc, #28]	@ (800d858 <_kill_r+0x20>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	4604      	mov	r4, r0
 800d840:	4608      	mov	r0, r1
 800d842:	4611      	mov	r1, r2
 800d844:	602b      	str	r3, [r5, #0]
 800d846:	f7f5 fa71 	bl	8002d2c <_kill>
 800d84a:	1c43      	adds	r3, r0, #1
 800d84c:	d102      	bne.n	800d854 <_kill_r+0x1c>
 800d84e:	682b      	ldr	r3, [r5, #0]
 800d850:	b103      	cbz	r3, 800d854 <_kill_r+0x1c>
 800d852:	6023      	str	r3, [r4, #0]
 800d854:	bd38      	pop	{r3, r4, r5, pc}
 800d856:	bf00      	nop
 800d858:	20002440 	.word	0x20002440

0800d85c <_getpid_r>:
 800d85c:	f7f5 ba5e 	b.w	8002d1c <_getpid>

0800d860 <_malloc_usable_size_r>:
 800d860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d864:	1f18      	subs	r0, r3, #4
 800d866:	2b00      	cmp	r3, #0
 800d868:	bfbc      	itt	lt
 800d86a:	580b      	ldrlt	r3, [r1, r0]
 800d86c:	18c0      	addlt	r0, r0, r3
 800d86e:	4770      	bx	lr

0800d870 <__swhatbuf_r>:
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	460c      	mov	r4, r1
 800d874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d878:	2900      	cmp	r1, #0
 800d87a:	b096      	sub	sp, #88	@ 0x58
 800d87c:	4615      	mov	r5, r2
 800d87e:	461e      	mov	r6, r3
 800d880:	da0d      	bge.n	800d89e <__swhatbuf_r+0x2e>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d888:	f04f 0100 	mov.w	r1, #0
 800d88c:	bf14      	ite	ne
 800d88e:	2340      	movne	r3, #64	@ 0x40
 800d890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d894:	2000      	movs	r0, #0
 800d896:	6031      	str	r1, [r6, #0]
 800d898:	602b      	str	r3, [r5, #0]
 800d89a:	b016      	add	sp, #88	@ 0x58
 800d89c:	bd70      	pop	{r4, r5, r6, pc}
 800d89e:	466a      	mov	r2, sp
 800d8a0:	f000 f848 	bl	800d934 <_fstat_r>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	dbec      	blt.n	800d882 <__swhatbuf_r+0x12>
 800d8a8:	9901      	ldr	r1, [sp, #4]
 800d8aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8b2:	4259      	negs	r1, r3
 800d8b4:	4159      	adcs	r1, r3
 800d8b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8ba:	e7eb      	b.n	800d894 <__swhatbuf_r+0x24>

0800d8bc <__smakebuf_r>:
 800d8bc:	898b      	ldrh	r3, [r1, #12]
 800d8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8c0:	079d      	lsls	r5, r3, #30
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	d507      	bpl.n	800d8d8 <__smakebuf_r+0x1c>
 800d8c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	6163      	str	r3, [r4, #20]
 800d8d4:	b003      	add	sp, #12
 800d8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d8:	ab01      	add	r3, sp, #4
 800d8da:	466a      	mov	r2, sp
 800d8dc:	f7ff ffc8 	bl	800d870 <__swhatbuf_r>
 800d8e0:	9f00      	ldr	r7, [sp, #0]
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7ff f912 	bl	800cb10 <_malloc_r>
 800d8ec:	b948      	cbnz	r0, 800d902 <__smakebuf_r+0x46>
 800d8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f2:	059a      	lsls	r2, r3, #22
 800d8f4:	d4ee      	bmi.n	800d8d4 <__smakebuf_r+0x18>
 800d8f6:	f023 0303 	bic.w	r3, r3, #3
 800d8fa:	f043 0302 	orr.w	r3, r3, #2
 800d8fe:	81a3      	strh	r3, [r4, #12]
 800d900:	e7e2      	b.n	800d8c8 <__smakebuf_r+0xc>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	6020      	str	r0, [r4, #0]
 800d906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d90a:	81a3      	strh	r3, [r4, #12]
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d912:	b15b      	cbz	r3, 800d92c <__smakebuf_r+0x70>
 800d914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d918:	4630      	mov	r0, r6
 800d91a:	f000 f81d 	bl	800d958 <_isatty_r>
 800d91e:	b128      	cbz	r0, 800d92c <__smakebuf_r+0x70>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	f023 0303 	bic.w	r3, r3, #3
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	431d      	orrs	r5, r3
 800d930:	81a5      	strh	r5, [r4, #12]
 800d932:	e7cf      	b.n	800d8d4 <__smakebuf_r+0x18>

0800d934 <_fstat_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d07      	ldr	r5, [pc, #28]	@ (800d954 <_fstat_r+0x20>)
 800d938:	2300      	movs	r3, #0
 800d93a:	4604      	mov	r4, r0
 800d93c:	4608      	mov	r0, r1
 800d93e:	4611      	mov	r1, r2
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	f7f5 fa53 	bl	8002dec <_fstat>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d102      	bne.n	800d950 <_fstat_r+0x1c>
 800d94a:	682b      	ldr	r3, [r5, #0]
 800d94c:	b103      	cbz	r3, 800d950 <_fstat_r+0x1c>
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	bf00      	nop
 800d954:	20002440 	.word	0x20002440

0800d958 <_isatty_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	@ (800d974 <_isatty_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f5 fa52 	bl	8002e0c <_isatty>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_isatty_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_isatty_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	20002440 	.word	0x20002440

0800d978 <_init>:
 800d978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97a:	bf00      	nop
 800d97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d97e:	bc08      	pop	{r3}
 800d980:	469e      	mov	lr, r3
 800d982:	4770      	bx	lr

0800d984 <_fini>:
 800d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d986:	bf00      	nop
 800d988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d98a:	bc08      	pop	{r3}
 800d98c:	469e      	mov	lr, r3
 800d98e:	4770      	bx	lr
